// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_RelationshipSelector                   protoreflect.MessageDescriptor
	fd_RelationshipSelector_object_selector   protoreflect.FieldDescriptor
	fd_RelationshipSelector_relation_selector protoreflect.FieldDescriptor
	fd_RelationshipSelector_subject_selector  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	md_RelationshipSelector = File_sourcenetwork_acp_core_relationship_selector_proto.Messages().ByName("RelationshipSelector")
	fd_RelationshipSelector_object_selector = md_RelationshipSelector.Fields().ByName("object_selector")
	fd_RelationshipSelector_relation_selector = md_RelationshipSelector.Fields().ByName("relation_selector")
	fd_RelationshipSelector_subject_selector = md_RelationshipSelector.Fields().ByName("subject_selector")
}

var _ protoreflect.Message = (*fastReflection_RelationshipSelector)(nil)

type fastReflection_RelationshipSelector RelationshipSelector

func (x *RelationshipSelector) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RelationshipSelector)(x)
}

func (x *RelationshipSelector) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RelationshipSelector_messageType fastReflection_RelationshipSelector_messageType
var _ protoreflect.MessageType = fastReflection_RelationshipSelector_messageType{}

type fastReflection_RelationshipSelector_messageType struct{}

func (x fastReflection_RelationshipSelector_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RelationshipSelector)(nil)
}
func (x fastReflection_RelationshipSelector_messageType) New() protoreflect.Message {
	return new(fastReflection_RelationshipSelector)
}
func (x fastReflection_RelationshipSelector_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RelationshipSelector
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RelationshipSelector) Descriptor() protoreflect.MessageDescriptor {
	return md_RelationshipSelector
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RelationshipSelector) Type() protoreflect.MessageType {
	return _fastReflection_RelationshipSelector_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RelationshipSelector) New() protoreflect.Message {
	return new(fastReflection_RelationshipSelector)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RelationshipSelector) Interface() protoreflect.ProtoMessage {
	return (*RelationshipSelector)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RelationshipSelector) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ObjectSelector != nil {
		value := protoreflect.ValueOfMessage(x.ObjectSelector.ProtoReflect())
		if !f(fd_RelationshipSelector_object_selector, value) {
			return
		}
	}
	if x.RelationSelector != nil {
		value := protoreflect.ValueOfMessage(x.RelationSelector.ProtoReflect())
		if !f(fd_RelationshipSelector_relation_selector, value) {
			return
		}
	}
	if x.SubjectSelector != nil {
		value := protoreflect.ValueOfMessage(x.SubjectSelector.ProtoReflect())
		if !f(fd_RelationshipSelector_subject_selector, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RelationshipSelector) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		return x.ObjectSelector != nil
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		return x.RelationSelector != nil
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		return x.SubjectSelector != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationshipSelector) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		x.ObjectSelector = nil
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		x.RelationSelector = nil
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		x.SubjectSelector = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RelationshipSelector) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		value := x.ObjectSelector
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		value := x.RelationSelector
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		value := x.SubjectSelector
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationshipSelector) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		x.ObjectSelector = value.Message().Interface().(*ObjectSelector)
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		x.RelationSelector = value.Message().Interface().(*RelationSelector)
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		x.SubjectSelector = value.Message().Interface().(*SubjectSelector)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationshipSelector) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		if x.ObjectSelector == nil {
			x.ObjectSelector = new(ObjectSelector)
		}
		return protoreflect.ValueOfMessage(x.ObjectSelector.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		if x.RelationSelector == nil {
			x.RelationSelector = new(RelationSelector)
		}
		return protoreflect.ValueOfMessage(x.RelationSelector.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		if x.SubjectSelector == nil {
			x.SubjectSelector = new(SubjectSelector)
		}
		return protoreflect.ValueOfMessage(x.SubjectSelector.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RelationshipSelector) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationshipSelector.object_selector":
		m := new(ObjectSelector)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.relation_selector":
		m := new(RelationSelector)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.RelationshipSelector.subject_selector":
		m := new(SubjectSelector)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationshipSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationshipSelector does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RelationshipSelector) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.RelationshipSelector", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RelationshipSelector) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationshipSelector) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RelationshipSelector) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RelationshipSelector) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RelationshipSelector)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ObjectSelector != nil {
			l = options.Size(x.ObjectSelector)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RelationSelector != nil {
			l = options.Size(x.RelationSelector)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubjectSelector != nil {
			l = options.Size(x.SubjectSelector)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RelationshipSelector)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SubjectSelector != nil {
			encoded, err := options.Marshal(x.SubjectSelector)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.RelationSelector != nil {
			encoded, err := options.Marshal(x.RelationSelector)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.ObjectSelector != nil {
			encoded, err := options.Marshal(x.ObjectSelector)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RelationshipSelector)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RelationshipSelector: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RelationshipSelector: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ObjectSelector", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ObjectSelector == nil {
					x.ObjectSelector = &ObjectSelector{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ObjectSelector); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelationSelector", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RelationSelector == nil {
					x.RelationSelector = &RelationSelector{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RelationSelector); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubjectSelector", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SubjectSelector == nil {
					x.SubjectSelector = &SubjectSelector{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubjectSelector); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ObjectSelector                    protoreflect.MessageDescriptor
	fd_ObjectSelector_object             protoreflect.FieldDescriptor
	fd_ObjectSelector_wildcard           protoreflect.FieldDescriptor
	fd_ObjectSelector_resource_predicate protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	md_ObjectSelector = File_sourcenetwork_acp_core_relationship_selector_proto.Messages().ByName("ObjectSelector")
	fd_ObjectSelector_object = md_ObjectSelector.Fields().ByName("object")
	fd_ObjectSelector_wildcard = md_ObjectSelector.Fields().ByName("wildcard")
	fd_ObjectSelector_resource_predicate = md_ObjectSelector.Fields().ByName("resource_predicate")
}

var _ protoreflect.Message = (*fastReflection_ObjectSelector)(nil)

type fastReflection_ObjectSelector ObjectSelector

func (x *ObjectSelector) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ObjectSelector)(x)
}

func (x *ObjectSelector) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ObjectSelector_messageType fastReflection_ObjectSelector_messageType
var _ protoreflect.MessageType = fastReflection_ObjectSelector_messageType{}

type fastReflection_ObjectSelector_messageType struct{}

func (x fastReflection_ObjectSelector_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ObjectSelector)(nil)
}
func (x fastReflection_ObjectSelector_messageType) New() protoreflect.Message {
	return new(fastReflection_ObjectSelector)
}
func (x fastReflection_ObjectSelector_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ObjectSelector
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ObjectSelector) Descriptor() protoreflect.MessageDescriptor {
	return md_ObjectSelector
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ObjectSelector) Type() protoreflect.MessageType {
	return _fastReflection_ObjectSelector_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ObjectSelector) New() protoreflect.Message {
	return new(fastReflection_ObjectSelector)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ObjectSelector) Interface() protoreflect.ProtoMessage {
	return (*ObjectSelector)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ObjectSelector) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Selector != nil {
		switch o := x.Selector.(type) {
		case *ObjectSelector_Object:
			v := o.Object
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_ObjectSelector_object, value) {
				return
			}
		case *ObjectSelector_Wildcard:
			v := o.Wildcard
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_ObjectSelector_wildcard, value) {
				return
			}
		case *ObjectSelector_ResourcePredicate:
			v := o.ResourcePredicate
			value := protoreflect.ValueOfString(v)
			if !f(fd_ObjectSelector_resource_predicate, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ObjectSelector) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*ObjectSelector_Object); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*ObjectSelector_Wildcard); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*ObjectSelector_ResourcePredicate); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ObjectSelector) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		x.Selector = nil
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		x.Selector = nil
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		x.Selector = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ObjectSelector) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		if x.Selector == nil {
			return protoreflect.ValueOfMessage((*Object)(nil).ProtoReflect())
		} else if v, ok := x.Selector.(*ObjectSelector_Object); ok {
			return protoreflect.ValueOfMessage(v.Object.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*Object)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		if x.Selector == nil {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		} else if v, ok := x.Selector.(*ObjectSelector_Wildcard); ok {
			return protoreflect.ValueOfMessage(v.Wildcard.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		if x.Selector == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Selector.(*ObjectSelector_ResourcePredicate); ok {
			return protoreflect.ValueOfString(v.ResourcePredicate)
		} else {
			return protoreflect.ValueOfString("")
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ObjectSelector) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		cv := value.Message().Interface().(*Object)
		x.Selector = &ObjectSelector_Object{Object: cv}
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		cv := value.Message().Interface().(*WildcardSelector)
		x.Selector = &ObjectSelector_Wildcard{Wildcard: cv}
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		cv := value.Interface().(string)
		x.Selector = &ObjectSelector_ResourcePredicate{ResourcePredicate: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ObjectSelector) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		if x.Selector == nil {
			value := &Object{}
			oneofValue := &ObjectSelector_Object{Object: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Selector.(type) {
		case *ObjectSelector_Object:
			return protoreflect.ValueOfMessage(m.Object.ProtoReflect())
		default:
			value := &Object{}
			oneofValue := &ObjectSelector_Object{Object: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		if x.Selector == nil {
			value := &WildcardSelector{}
			oneofValue := &ObjectSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Selector.(type) {
		case *ObjectSelector_Wildcard:
			return protoreflect.ValueOfMessage(m.Wildcard.ProtoReflect())
		default:
			value := &WildcardSelector{}
			oneofValue := &ObjectSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		panic(fmt.Errorf("field resource_predicate of message sourcenetwork.acp_core.ObjectSelector is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ObjectSelector) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.object":
		value := &Object{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.ObjectSelector.wildcard":
		value := &WildcardSelector{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.ObjectSelector.resource_predicate":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ObjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ObjectSelector does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ObjectSelector) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sourcenetwork.acp_core.ObjectSelector.selector":
		if x.Selector == nil {
			return nil
		}
		switch x.Selector.(type) {
		case *ObjectSelector_Object:
			return x.Descriptor().Fields().ByName("object")
		case *ObjectSelector_Wildcard:
			return x.Descriptor().Fields().ByName("wildcard")
		case *ObjectSelector_ResourcePredicate:
			return x.Descriptor().Fields().ByName("resource_predicate")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.ObjectSelector", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ObjectSelector) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ObjectSelector) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ObjectSelector) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ObjectSelector) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ObjectSelector)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Selector.(type) {
		case *ObjectSelector_Object:
			if x == nil {
				break
			}
			l = options.Size(x.Object)
			n += 1 + l + runtime.Sov(uint64(l))
		case *ObjectSelector_Wildcard:
			if x == nil {
				break
			}
			l = options.Size(x.Wildcard)
			n += 1 + l + runtime.Sov(uint64(l))
		case *ObjectSelector_ResourcePredicate:
			if x == nil {
				break
			}
			l = len(x.ResourcePredicate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ObjectSelector)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Selector.(type) {
		case *ObjectSelector_Object:
			encoded, err := options.Marshal(x.Object)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *ObjectSelector_Wildcard:
			encoded, err := options.Marshal(x.Wildcard)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *ObjectSelector_ResourcePredicate:
			i -= len(x.ResourcePredicate)
			copy(dAtA[i:], x.ResourcePredicate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ResourcePredicate)))
			i--
			dAtA[i] = 0x1a
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ObjectSelector)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ObjectSelector: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ObjectSelector: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &Object{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Selector = &ObjectSelector_Object{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &WildcardSelector{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Selector = &ObjectSelector_Wildcard{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResourcePredicate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Selector = &ObjectSelector_ResourcePredicate{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RelationSelector          protoreflect.MessageDescriptor
	fd_RelationSelector_relation protoreflect.FieldDescriptor
	fd_RelationSelector_wildcard protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	md_RelationSelector = File_sourcenetwork_acp_core_relationship_selector_proto.Messages().ByName("RelationSelector")
	fd_RelationSelector_relation = md_RelationSelector.Fields().ByName("relation")
	fd_RelationSelector_wildcard = md_RelationSelector.Fields().ByName("wildcard")
}

var _ protoreflect.Message = (*fastReflection_RelationSelector)(nil)

type fastReflection_RelationSelector RelationSelector

func (x *RelationSelector) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RelationSelector)(x)
}

func (x *RelationSelector) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RelationSelector_messageType fastReflection_RelationSelector_messageType
var _ protoreflect.MessageType = fastReflection_RelationSelector_messageType{}

type fastReflection_RelationSelector_messageType struct{}

func (x fastReflection_RelationSelector_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RelationSelector)(nil)
}
func (x fastReflection_RelationSelector_messageType) New() protoreflect.Message {
	return new(fastReflection_RelationSelector)
}
func (x fastReflection_RelationSelector_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RelationSelector
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RelationSelector) Descriptor() protoreflect.MessageDescriptor {
	return md_RelationSelector
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RelationSelector) Type() protoreflect.MessageType {
	return _fastReflection_RelationSelector_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RelationSelector) New() protoreflect.Message {
	return new(fastReflection_RelationSelector)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RelationSelector) Interface() protoreflect.ProtoMessage {
	return (*RelationSelector)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RelationSelector) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Selector != nil {
		switch o := x.Selector.(type) {
		case *RelationSelector_Relation:
			v := o.Relation
			value := protoreflect.ValueOfString(v)
			if !f(fd_RelationSelector_relation, value) {
				return
			}
		case *RelationSelector_Wildcard:
			v := o.Wildcard
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_RelationSelector_wildcard, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RelationSelector) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.relation":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*RelationSelector_Relation); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*RelationSelector_Wildcard); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationSelector) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.relation":
		x.Selector = nil
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		x.Selector = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RelationSelector) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.relation":
		if x.Selector == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Selector.(*RelationSelector_Relation); ok {
			return protoreflect.ValueOfString(v.Relation)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		if x.Selector == nil {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		} else if v, ok := x.Selector.(*RelationSelector_Wildcard); ok {
			return protoreflect.ValueOfMessage(v.Wildcard.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationSelector) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.relation":
		cv := value.Interface().(string)
		x.Selector = &RelationSelector_Relation{Relation: cv}
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		cv := value.Message().Interface().(*WildcardSelector)
		x.Selector = &RelationSelector_Wildcard{Wildcard: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationSelector) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		if x.Selector == nil {
			value := &WildcardSelector{}
			oneofValue := &RelationSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Selector.(type) {
		case *RelationSelector_Wildcard:
			return protoreflect.ValueOfMessage(m.Wildcard.ProtoReflect())
		default:
			value := &WildcardSelector{}
			oneofValue := &RelationSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.RelationSelector.relation":
		panic(fmt.Errorf("field relation of message sourcenetwork.acp_core.RelationSelector is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RelationSelector) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.relation":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.RelationSelector.wildcard":
		value := &WildcardSelector{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.RelationSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.RelationSelector does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RelationSelector) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sourcenetwork.acp_core.RelationSelector.selector":
		if x.Selector == nil {
			return nil
		}
		switch x.Selector.(type) {
		case *RelationSelector_Relation:
			return x.Descriptor().Fields().ByName("relation")
		case *RelationSelector_Wildcard:
			return x.Descriptor().Fields().ByName("wildcard")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.RelationSelector", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RelationSelector) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RelationSelector) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RelationSelector) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RelationSelector) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RelationSelector)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Selector.(type) {
		case *RelationSelector_Relation:
			if x == nil {
				break
			}
			l = len(x.Relation)
			n += 1 + l + runtime.Sov(uint64(l))
		case *RelationSelector_Wildcard:
			if x == nil {
				break
			}
			l = options.Size(x.Wildcard)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RelationSelector)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Selector.(type) {
		case *RelationSelector_Relation:
			i -= len(x.Relation)
			copy(dAtA[i:], x.Relation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Relation)))
			i--
			dAtA[i] = 0xa
		case *RelationSelector_Wildcard:
			encoded, err := options.Marshal(x.Wildcard)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RelationSelector)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RelationSelector: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RelationSelector: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Selector = &RelationSelector_Relation{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &WildcardSelector{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Selector = &RelationSelector_Wildcard{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SubjectSelector          protoreflect.MessageDescriptor
	fd_SubjectSelector_subject  protoreflect.FieldDescriptor
	fd_SubjectSelector_wildcard protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	md_SubjectSelector = File_sourcenetwork_acp_core_relationship_selector_proto.Messages().ByName("SubjectSelector")
	fd_SubjectSelector_subject = md_SubjectSelector.Fields().ByName("subject")
	fd_SubjectSelector_wildcard = md_SubjectSelector.Fields().ByName("wildcard")
}

var _ protoreflect.Message = (*fastReflection_SubjectSelector)(nil)

type fastReflection_SubjectSelector SubjectSelector

func (x *SubjectSelector) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SubjectSelector)(x)
}

func (x *SubjectSelector) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SubjectSelector_messageType fastReflection_SubjectSelector_messageType
var _ protoreflect.MessageType = fastReflection_SubjectSelector_messageType{}

type fastReflection_SubjectSelector_messageType struct{}

func (x fastReflection_SubjectSelector_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SubjectSelector)(nil)
}
func (x fastReflection_SubjectSelector_messageType) New() protoreflect.Message {
	return new(fastReflection_SubjectSelector)
}
func (x fastReflection_SubjectSelector_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SubjectSelector
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SubjectSelector) Descriptor() protoreflect.MessageDescriptor {
	return md_SubjectSelector
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SubjectSelector) Type() protoreflect.MessageType {
	return _fastReflection_SubjectSelector_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SubjectSelector) New() protoreflect.Message {
	return new(fastReflection_SubjectSelector)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SubjectSelector) Interface() protoreflect.ProtoMessage {
	return (*SubjectSelector)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SubjectSelector) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Selector != nil {
		switch o := x.Selector.(type) {
		case *SubjectSelector_Subject:
			v := o.Subject
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_SubjectSelector_subject, value) {
				return
			}
		case *SubjectSelector_Wildcard:
			v := o.Wildcard
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_SubjectSelector_wildcard, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SubjectSelector) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*SubjectSelector_Subject); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		if x.Selector == nil {
			return false
		} else if _, ok := x.Selector.(*SubjectSelector_Wildcard); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectSelector) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		x.Selector = nil
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		x.Selector = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SubjectSelector) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		if x.Selector == nil {
			return protoreflect.ValueOfMessage((*Subject)(nil).ProtoReflect())
		} else if v, ok := x.Selector.(*SubjectSelector_Subject); ok {
			return protoreflect.ValueOfMessage(v.Subject.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*Subject)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		if x.Selector == nil {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		} else if v, ok := x.Selector.(*SubjectSelector_Wildcard); ok {
			return protoreflect.ValueOfMessage(v.Wildcard.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*WildcardSelector)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectSelector) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		cv := value.Message().Interface().(*Subject)
		x.Selector = &SubjectSelector_Subject{Subject: cv}
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		cv := value.Message().Interface().(*WildcardSelector)
		x.Selector = &SubjectSelector_Wildcard{Wildcard: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectSelector) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		if x.Selector == nil {
			value := &Subject{}
			oneofValue := &SubjectSelector_Subject{Subject: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Selector.(type) {
		case *SubjectSelector_Subject:
			return protoreflect.ValueOfMessage(m.Subject.ProtoReflect())
		default:
			value := &Subject{}
			oneofValue := &SubjectSelector_Subject{Subject: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		if x.Selector == nil {
			value := &WildcardSelector{}
			oneofValue := &SubjectSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Selector.(type) {
		case *SubjectSelector_Wildcard:
			return protoreflect.ValueOfMessage(m.Wildcard.ProtoReflect())
		default:
			value := &WildcardSelector{}
			oneofValue := &SubjectSelector_Wildcard{Wildcard: value}
			x.Selector = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SubjectSelector) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.subject":
		value := &Subject{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.SubjectSelector.wildcard":
		value := &WildcardSelector{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SubjectSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SubjectSelector does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SubjectSelector) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sourcenetwork.acp_core.SubjectSelector.selector":
		if x.Selector == nil {
			return nil
		}
		switch x.Selector.(type) {
		case *SubjectSelector_Subject:
			return x.Descriptor().Fields().ByName("subject")
		case *SubjectSelector_Wildcard:
			return x.Descriptor().Fields().ByName("wildcard")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.SubjectSelector", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SubjectSelector) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectSelector) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SubjectSelector) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SubjectSelector) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SubjectSelector)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Selector.(type) {
		case *SubjectSelector_Subject:
			if x == nil {
				break
			}
			l = options.Size(x.Subject)
			n += 1 + l + runtime.Sov(uint64(l))
		case *SubjectSelector_Wildcard:
			if x == nil {
				break
			}
			l = options.Size(x.Wildcard)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SubjectSelector)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Selector.(type) {
		case *SubjectSelector_Subject:
			encoded, err := options.Marshal(x.Subject)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *SubjectSelector_Wildcard:
			encoded, err := options.Marshal(x.Wildcard)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SubjectSelector)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubjectSelector: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubjectSelector: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &Subject{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Selector = &SubjectSelector_Subject{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &WildcardSelector{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Selector = &SubjectSelector_Wildcard{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WildcardSelector protoreflect.MessageDescriptor
)

func init() {
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	md_WildcardSelector = File_sourcenetwork_acp_core_relationship_selector_proto.Messages().ByName("WildcardSelector")
}

var _ protoreflect.Message = (*fastReflection_WildcardSelector)(nil)

type fastReflection_WildcardSelector WildcardSelector

func (x *WildcardSelector) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WildcardSelector)(x)
}

func (x *WildcardSelector) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WildcardSelector_messageType fastReflection_WildcardSelector_messageType
var _ protoreflect.MessageType = fastReflection_WildcardSelector_messageType{}

type fastReflection_WildcardSelector_messageType struct{}

func (x fastReflection_WildcardSelector_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WildcardSelector)(nil)
}
func (x fastReflection_WildcardSelector_messageType) New() protoreflect.Message {
	return new(fastReflection_WildcardSelector)
}
func (x fastReflection_WildcardSelector_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WildcardSelector
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WildcardSelector) Descriptor() protoreflect.MessageDescriptor {
	return md_WildcardSelector
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WildcardSelector) Type() protoreflect.MessageType {
	return _fastReflection_WildcardSelector_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WildcardSelector) New() protoreflect.Message {
	return new(fastReflection_WildcardSelector)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WildcardSelector) Interface() protoreflect.ProtoMessage {
	return (*WildcardSelector)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WildcardSelector) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WildcardSelector) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WildcardSelector) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WildcardSelector) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WildcardSelector) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WildcardSelector) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WildcardSelector) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.WildcardSelector"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.WildcardSelector does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WildcardSelector) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.WildcardSelector", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WildcardSelector) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WildcardSelector) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WildcardSelector) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WildcardSelector) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WildcardSelector)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WildcardSelector)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WildcardSelector)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WildcardSelector: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WildcardSelector: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sourcenetwork/acp_core/relationship_selector.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RelationshipSelector models a set of predicates which are used to filter through
// Relationships in a Policy.
type RelationshipSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSelector   *ObjectSelector   `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	RelationSelector *RelationSelector `protobuf:"bytes,2,opt,name=relation_selector,json=relationSelector,proto3" json:"relation_selector,omitempty"`
	SubjectSelector  *SubjectSelector  `protobuf:"bytes,3,opt,name=subject_selector,json=subjectSelector,proto3" json:"subject_selector,omitempty"`
}

func (x *RelationshipSelector) Reset() {
	*x = RelationshipSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationshipSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipSelector) ProtoMessage() {}

// Deprecated: Use RelationshipSelector.ProtoReflect.Descriptor instead.
func (*RelationshipSelector) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP(), []int{0}
}

func (x *RelationshipSelector) GetObjectSelector() *ObjectSelector {
	if x != nil {
		return x.ObjectSelector
	}
	return nil
}

func (x *RelationshipSelector) GetRelationSelector() *RelationSelector {
	if x != nil {
		return x.RelationSelector
	}
	return nil
}

func (x *RelationshipSelector) GetSubjectSelector() *SubjectSelector {
	if x != nil {
		return x.SubjectSelector
	}
	return nil
}

// ObjectSelector models a filter for Relationship Objects
type ObjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*ObjectSelector_Object
	//	*ObjectSelector_Wildcard
	//	*ObjectSelector_ResourcePredicate
	Selector isObjectSelector_Selector `protobuf_oneof:"selector"`
}

func (x *ObjectSelector) Reset() {
	*x = ObjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSelector) ProtoMessage() {}

// Deprecated: Use ObjectSelector.ProtoReflect.Descriptor instead.
func (*ObjectSelector) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectSelector) GetSelector() isObjectSelector_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *ObjectSelector) GetObject() *Object {
	if x, ok := x.GetSelector().(*ObjectSelector_Object); ok {
		return x.Object
	}
	return nil
}

func (x *ObjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*ObjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *ObjectSelector) GetResourcePredicate() string {
	if x, ok := x.GetSelector().(*ObjectSelector_ResourcePredicate); ok {
		return x.ResourcePredicate
	}
	return ""
}

type isObjectSelector_Selector interface {
	isObjectSelector_Selector()
}

type ObjectSelector_Object struct {
	// object specifies an object which the Relationship must contain
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3,oneof"`
}

type ObjectSelector_Wildcard struct {
	// wildcard matches any object
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

type ObjectSelector_ResourcePredicate struct {
	ResourcePredicate string `protobuf:"bytes,3,opt,name=resource_predicate,json=resourcePredicate,proto3,oneof"`
}

func (*ObjectSelector_Object) isObjectSelector_Selector() {}

func (*ObjectSelector_Wildcard) isObjectSelector_Selector() {}

func (*ObjectSelector_ResourcePredicate) isObjectSelector_Selector() {}

// RelationsSelector models a filter for Relationship Relations
type RelationSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*RelationSelector_Relation
	//	*RelationSelector_Wildcard
	Selector isRelationSelector_Selector `protobuf_oneof:"selector"`
}

func (x *RelationSelector) Reset() {
	*x = RelationSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationSelector) ProtoMessage() {}

// Deprecated: Use RelationSelector.ProtoReflect.Descriptor instead.
func (*RelationSelector) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP(), []int{2}
}

func (x *RelationSelector) GetSelector() isRelationSelector_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *RelationSelector) GetRelation() string {
	if x, ok := x.GetSelector().(*RelationSelector_Relation); ok {
		return x.Relation
	}
	return ""
}

func (x *RelationSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*RelationSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

type isRelationSelector_Selector interface {
	isRelationSelector_Selector()
}

type RelationSelector_Relation struct {
	// relation specifies a relation name which must exactly match the Relationship's
	Relation string `protobuf:"bytes,1,opt,name=relation,proto3,oneof"`
}

type RelationSelector_Wildcard struct {
	// wildcard matches any relation
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

func (*RelationSelector_Relation) isRelationSelector_Selector() {}

func (*RelationSelector_Wildcard) isRelationSelector_Selector() {}

// SubjectSelector models a filter for Relationship Subjects
type SubjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*SubjectSelector_Subject
	//	*SubjectSelector_Wildcard
	Selector isSubjectSelector_Selector `protobuf_oneof:"selector"`
}

func (x *SubjectSelector) Reset() {
	*x = SubjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectSelector) ProtoMessage() {}

// Deprecated: Use SubjectSelector.ProtoReflect.Descriptor instead.
func (*SubjectSelector) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP(), []int{3}
}

func (x *SubjectSelector) GetSelector() isSubjectSelector_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *SubjectSelector) GetSubject() *Subject {
	if x, ok := x.GetSelector().(*SubjectSelector_Subject); ok {
		return x.Subject
	}
	return nil
}

func (x *SubjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := x.GetSelector().(*SubjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

type isSubjectSelector_Selector interface {
	isSubjectSelector_Selector()
}

type SubjectSelector_Subject struct {
	// subject requires an exact match between the given subject and a Relationship's subject
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3,oneof"`
}

type SubjectSelector_Wildcard struct {
	// wildcard matches any subject in a Relationship
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof"`
}

func (*SubjectSelector_Subject) isSubjectSelector_Selector() {}

func (*SubjectSelector_Wildcard) isSubjectSelector_Selector() {}

// WildcardSelector matches anything in a context
type WildcardSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WildcardSelector) Reset() {
	*x = WildcardSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildcardSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildcardSelector) ProtoMessage() {}

// Deprecated: Use WildcardSelector.ProtoReflect.Descriptor instead.
func (*WildcardSelector) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP(), []int{4}
}

var File_sourcenetwork_acp_core_relationship_selector_proto protoreflect.FileDescriptor

var file_sourcenetwork_acp_core_relationship_selector_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x29, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4f, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xcf, 0x01, 0x0a,
	0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x38, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x84,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sourcenetwork_acp_core_relationship_selector_proto_rawDescOnce sync.Once
	file_sourcenetwork_acp_core_relationship_selector_proto_rawDescData = file_sourcenetwork_acp_core_relationship_selector_proto_rawDesc
)

func file_sourcenetwork_acp_core_relationship_selector_proto_rawDescGZIP() []byte {
	file_sourcenetwork_acp_core_relationship_selector_proto_rawDescOnce.Do(func() {
		file_sourcenetwork_acp_core_relationship_selector_proto_rawDescData = protoimpl.X.CompressGZIP(file_sourcenetwork_acp_core_relationship_selector_proto_rawDescData)
	})
	return file_sourcenetwork_acp_core_relationship_selector_proto_rawDescData
}

var file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sourcenetwork_acp_core_relationship_selector_proto_goTypes = []interface{}{
	(*RelationshipSelector)(nil), // 0: sourcenetwork.acp_core.RelationshipSelector
	(*ObjectSelector)(nil),       // 1: sourcenetwork.acp_core.ObjectSelector
	(*RelationSelector)(nil),     // 2: sourcenetwork.acp_core.RelationSelector
	(*SubjectSelector)(nil),      // 3: sourcenetwork.acp_core.SubjectSelector
	(*WildcardSelector)(nil),     // 4: sourcenetwork.acp_core.WildcardSelector
	(*Object)(nil),               // 5: sourcenetwork.acp_core.Object
	(*Subject)(nil),              // 6: sourcenetwork.acp_core.Subject
}
var file_sourcenetwork_acp_core_relationship_selector_proto_depIdxs = []int32{
	1, // 0: sourcenetwork.acp_core.RelationshipSelector.object_selector:type_name -> sourcenetwork.acp_core.ObjectSelector
	2, // 1: sourcenetwork.acp_core.RelationshipSelector.relation_selector:type_name -> sourcenetwork.acp_core.RelationSelector
	3, // 2: sourcenetwork.acp_core.RelationshipSelector.subject_selector:type_name -> sourcenetwork.acp_core.SubjectSelector
	5, // 3: sourcenetwork.acp_core.ObjectSelector.object:type_name -> sourcenetwork.acp_core.Object
	4, // 4: sourcenetwork.acp_core.ObjectSelector.wildcard:type_name -> sourcenetwork.acp_core.WildcardSelector
	4, // 5: sourcenetwork.acp_core.RelationSelector.wildcard:type_name -> sourcenetwork.acp_core.WildcardSelector
	6, // 6: sourcenetwork.acp_core.SubjectSelector.subject:type_name -> sourcenetwork.acp_core.Subject
	4, // 7: sourcenetwork.acp_core.SubjectSelector.wildcard:type_name -> sourcenetwork.acp_core.WildcardSelector
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sourcenetwork_acp_core_relationship_selector_proto_init() }
func file_sourcenetwork_acp_core_relationship_selector_proto_init() {
	if File_sourcenetwork_acp_core_relationship_selector_proto != nil {
		return
	}
	file_sourcenetwork_acp_core_relationship_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationshipSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildcardSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ObjectSelector_Object)(nil),
		(*ObjectSelector_Wildcard)(nil),
		(*ObjectSelector_ResourcePredicate)(nil),
	}
	file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RelationSelector_Relation)(nil),
		(*RelationSelector_Wildcard)(nil),
	}
	file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SubjectSelector_Subject)(nil),
		(*SubjectSelector_Wildcard)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sourcenetwork_acp_core_relationship_selector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sourcenetwork_acp_core_relationship_selector_proto_goTypes,
		DependencyIndexes: file_sourcenetwork_acp_core_relationship_selector_proto_depIdxs,
		MessageInfos:      file_sourcenetwork_acp_core_relationship_selector_proto_msgTypes,
	}.Build()
	File_sourcenetwork_acp_core_relationship_selector_proto = out.File
	file_sourcenetwork_acp_core_relationship_selector_proto_rawDesc = nil
	file_sourcenetwork_acp_core_relationship_selector_proto_goTypes = nil
	file_sourcenetwork_acp_core_relationship_selector_proto_depIdxs = nil
}
