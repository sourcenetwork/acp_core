// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_SandboxRecord             protoreflect.MessageDescriptor
	fd_SandboxRecord_handle      protoreflect.FieldDescriptor
	fd_SandboxRecord_name        protoreflect.FieldDescriptor
	fd_SandboxRecord_description protoreflect.FieldDescriptor
	fd_SandboxRecord_data        protoreflect.FieldDescriptor
	fd_SandboxRecord_scratchpad  protoreflect.FieldDescriptor
	fd_SandboxRecord_ctx         protoreflect.FieldDescriptor
	fd_SandboxRecord_initialized protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_sandbox_proto_init()
	md_SandboxRecord = File_sourcenetwork_acp_core_sandbox_proto.Messages().ByName("SandboxRecord")
	fd_SandboxRecord_handle = md_SandboxRecord.Fields().ByName("handle")
	fd_SandboxRecord_name = md_SandboxRecord.Fields().ByName("name")
	fd_SandboxRecord_description = md_SandboxRecord.Fields().ByName("description")
	fd_SandboxRecord_data = md_SandboxRecord.Fields().ByName("data")
	fd_SandboxRecord_scratchpad = md_SandboxRecord.Fields().ByName("scratchpad")
	fd_SandboxRecord_ctx = md_SandboxRecord.Fields().ByName("ctx")
	fd_SandboxRecord_initialized = md_SandboxRecord.Fields().ByName("initialized")
}

var _ protoreflect.Message = (*fastReflection_SandboxRecord)(nil)

type fastReflection_SandboxRecord SandboxRecord

func (x *SandboxRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SandboxRecord)(x)
}

func (x *SandboxRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SandboxRecord_messageType fastReflection_SandboxRecord_messageType
var _ protoreflect.MessageType = fastReflection_SandboxRecord_messageType{}

type fastReflection_SandboxRecord_messageType struct{}

func (x fastReflection_SandboxRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SandboxRecord)(nil)
}
func (x fastReflection_SandboxRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_SandboxRecord)
}
func (x fastReflection_SandboxRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SandboxRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SandboxRecord) Type() protoreflect.MessageType {
	return _fastReflection_SandboxRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SandboxRecord) New() protoreflect.Message {
	return new(fastReflection_SandboxRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SandboxRecord) Interface() protoreflect.ProtoMessage {
	return (*SandboxRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SandboxRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Handle != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Handle)
		if !f(fd_SandboxRecord_handle, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_SandboxRecord_name, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_SandboxRecord_description, value) {
			return
		}
	}
	if x.Data != nil {
		value := protoreflect.ValueOfMessage(x.Data.ProtoReflect())
		if !f(fd_SandboxRecord_data, value) {
			return
		}
	}
	if x.Scratchpad != nil {
		value := protoreflect.ValueOfMessage(x.Scratchpad.ProtoReflect())
		if !f(fd_SandboxRecord_scratchpad, value) {
			return
		}
	}
	if x.Ctx != nil {
		value := protoreflect.ValueOfMessage(x.Ctx.ProtoReflect())
		if !f(fd_SandboxRecord_ctx, value) {
			return
		}
	}
	if x.Initialized != false {
		value := protoreflect.ValueOfBool(x.Initialized)
		if !f(fd_SandboxRecord_initialized, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SandboxRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		return x.Handle != uint64(0)
	case "sourcenetwork.acp_core.SandboxRecord.name":
		return x.Name != ""
	case "sourcenetwork.acp_core.SandboxRecord.description":
		return x.Description != ""
	case "sourcenetwork.acp_core.SandboxRecord.data":
		return x.Data != nil
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		return x.Scratchpad != nil
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		return x.Ctx != nil
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		return x.Initialized != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		x.Handle = uint64(0)
	case "sourcenetwork.acp_core.SandboxRecord.name":
		x.Name = ""
	case "sourcenetwork.acp_core.SandboxRecord.description":
		x.Description = ""
	case "sourcenetwork.acp_core.SandboxRecord.data":
		x.Data = nil
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		x.Scratchpad = nil
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		x.Ctx = nil
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		x.Initialized = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SandboxRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		value := x.Handle
		return protoreflect.ValueOfUint64(value)
	case "sourcenetwork.acp_core.SandboxRecord.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.SandboxRecord.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.SandboxRecord.data":
		value := x.Data
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		value := x.Scratchpad
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		value := x.Ctx
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		value := x.Initialized
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		x.Handle = value.Uint()
	case "sourcenetwork.acp_core.SandboxRecord.name":
		x.Name = value.Interface().(string)
	case "sourcenetwork.acp_core.SandboxRecord.description":
		x.Description = value.Interface().(string)
	case "sourcenetwork.acp_core.SandboxRecord.data":
		x.Data = value.Message().Interface().(*SandboxData)
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		x.Scratchpad = value.Message().Interface().(*SandboxData)
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		x.Ctx = value.Message().Interface().(*SandboxCtx)
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		x.Initialized = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.data":
		if x.Data == nil {
			x.Data = new(SandboxData)
		}
		return protoreflect.ValueOfMessage(x.Data.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		if x.Scratchpad == nil {
			x.Scratchpad = new(SandboxData)
		}
		return protoreflect.ValueOfMessage(x.Scratchpad.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		if x.Ctx == nil {
			x.Ctx = new(SandboxCtx)
		}
		return protoreflect.ValueOfMessage(x.Ctx.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		panic(fmt.Errorf("field handle of message sourcenetwork.acp_core.SandboxRecord is not mutable"))
	case "sourcenetwork.acp_core.SandboxRecord.name":
		panic(fmt.Errorf("field name of message sourcenetwork.acp_core.SandboxRecord is not mutable"))
	case "sourcenetwork.acp_core.SandboxRecord.description":
		panic(fmt.Errorf("field description of message sourcenetwork.acp_core.SandboxRecord is not mutable"))
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		panic(fmt.Errorf("field initialized of message sourcenetwork.acp_core.SandboxRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SandboxRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxRecord.handle":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sourcenetwork.acp_core.SandboxRecord.name":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.SandboxRecord.description":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.SandboxRecord.data":
		m := new(SandboxData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.scratchpad":
		m := new(SandboxData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.ctx":
		m := new(SandboxCtx)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxRecord.initialized":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxRecord"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SandboxRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.SandboxRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SandboxRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SandboxRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SandboxRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SandboxRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Handle != 0 {
			n += 1 + runtime.Sov(uint64(x.Handle))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Data != nil {
			l = options.Size(x.Data)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Scratchpad != nil {
			l = options.Size(x.Scratchpad)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Ctx != nil {
			l = options.Size(x.Ctx)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Initialized {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SandboxRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Initialized {
			i--
			if x.Initialized {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.Ctx != nil {
			encoded, err := options.Marshal(x.Ctx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.Scratchpad != nil {
			encoded, err := options.Marshal(x.Scratchpad)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Data != nil {
			encoded, err := options.Marshal(x.Data)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if x.Handle != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Handle))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SandboxRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
				}
				x.Handle = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Handle |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Data == nil {
					x.Data = &SandboxData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Data); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Scratchpad", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Scratchpad == nil {
					x.Scratchpad = &SandboxData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Scratchpad); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ctx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Ctx == nil {
					x.Ctx = &SandboxCtx{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Ctx); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Initialized", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Initialized = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SandboxData                   protoreflect.MessageDescriptor
	fd_SandboxData_policy_definition protoreflect.FieldDescriptor
	fd_SandboxData_relationships     protoreflect.FieldDescriptor
	fd_SandboxData_policy_theorem    protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_sandbox_proto_init()
	md_SandboxData = File_sourcenetwork_acp_core_sandbox_proto.Messages().ByName("SandboxData")
	fd_SandboxData_policy_definition = md_SandboxData.Fields().ByName("policy_definition")
	fd_SandboxData_relationships = md_SandboxData.Fields().ByName("relationships")
	fd_SandboxData_policy_theorem = md_SandboxData.Fields().ByName("policy_theorem")
}

var _ protoreflect.Message = (*fastReflection_SandboxData)(nil)

type fastReflection_SandboxData SandboxData

func (x *SandboxData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SandboxData)(x)
}

func (x *SandboxData) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SandboxData_messageType fastReflection_SandboxData_messageType
var _ protoreflect.MessageType = fastReflection_SandboxData_messageType{}

type fastReflection_SandboxData_messageType struct{}

func (x fastReflection_SandboxData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SandboxData)(nil)
}
func (x fastReflection_SandboxData_messageType) New() protoreflect.Message {
	return new(fastReflection_SandboxData)
}
func (x fastReflection_SandboxData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SandboxData) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SandboxData) Type() protoreflect.MessageType {
	return _fastReflection_SandboxData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SandboxData) New() protoreflect.Message {
	return new(fastReflection_SandboxData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SandboxData) Interface() protoreflect.ProtoMessage {
	return (*SandboxData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SandboxData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PolicyDefinition != "" {
		value := protoreflect.ValueOfString(x.PolicyDefinition)
		if !f(fd_SandboxData_policy_definition, value) {
			return
		}
	}
	if x.Relationships != "" {
		value := protoreflect.ValueOfString(x.Relationships)
		if !f(fd_SandboxData_relationships, value) {
			return
		}
	}
	if x.PolicyTheorem != "" {
		value := protoreflect.ValueOfString(x.PolicyTheorem)
		if !f(fd_SandboxData_policy_theorem, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SandboxData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		return x.PolicyDefinition != ""
	case "sourcenetwork.acp_core.SandboxData.relationships":
		return x.Relationships != ""
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		return x.PolicyTheorem != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		x.PolicyDefinition = ""
	case "sourcenetwork.acp_core.SandboxData.relationships":
		x.Relationships = ""
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		x.PolicyTheorem = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SandboxData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		value := x.PolicyDefinition
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.SandboxData.relationships":
		value := x.Relationships
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		value := x.PolicyTheorem
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		x.PolicyDefinition = value.Interface().(string)
	case "sourcenetwork.acp_core.SandboxData.relationships":
		x.Relationships = value.Interface().(string)
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		x.PolicyTheorem = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		panic(fmt.Errorf("field policy_definition of message sourcenetwork.acp_core.SandboxData is not mutable"))
	case "sourcenetwork.acp_core.SandboxData.relationships":
		panic(fmt.Errorf("field relationships of message sourcenetwork.acp_core.SandboxData is not mutable"))
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		panic(fmt.Errorf("field policy_theorem of message sourcenetwork.acp_core.SandboxData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SandboxData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxData.policy_definition":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.SandboxData.relationships":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.SandboxData.policy_theorem":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxData"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SandboxData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.SandboxData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SandboxData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SandboxData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SandboxData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SandboxData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PolicyDefinition)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Relationships)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PolicyTheorem)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SandboxData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PolicyTheorem) > 0 {
			i -= len(x.PolicyTheorem)
			copy(dAtA[i:], x.PolicyTheorem)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PolicyTheorem)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Relationships) > 0 {
			i -= len(x.Relationships)
			copy(dAtA[i:], x.Relationships)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Relationships)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PolicyDefinition) > 0 {
			i -= len(x.PolicyDefinition)
			copy(dAtA[i:], x.PolicyDefinition)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PolicyDefinition)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SandboxData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyDefinition", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PolicyDefinition = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relationships", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Relationships = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyTheorem", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PolicyTheorem = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SandboxCtx_2_list)(nil)

type _SandboxCtx_2_list struct {
	list *[]*Relationship
}

func (x *_SandboxCtx_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SandboxCtx_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SandboxCtx_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Relationship)
	(*x.list)[i] = concreteValue
}

func (x *_SandboxCtx_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Relationship)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SandboxCtx_2_list) AppendMutable() protoreflect.Value {
	v := new(Relationship)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxCtx_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SandboxCtx_2_list) NewElement() protoreflect.Value {
	v := new(Relationship)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxCtx_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SandboxCtx                protoreflect.MessageDescriptor
	fd_SandboxCtx_policy         protoreflect.FieldDescriptor
	fd_SandboxCtx_relationships  protoreflect.FieldDescriptor
	fd_SandboxCtx_policy_theorem protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_sandbox_proto_init()
	md_SandboxCtx = File_sourcenetwork_acp_core_sandbox_proto.Messages().ByName("SandboxCtx")
	fd_SandboxCtx_policy = md_SandboxCtx.Fields().ByName("policy")
	fd_SandboxCtx_relationships = md_SandboxCtx.Fields().ByName("relationships")
	fd_SandboxCtx_policy_theorem = md_SandboxCtx.Fields().ByName("policy_theorem")
}

var _ protoreflect.Message = (*fastReflection_SandboxCtx)(nil)

type fastReflection_SandboxCtx SandboxCtx

func (x *SandboxCtx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SandboxCtx)(x)
}

func (x *SandboxCtx) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SandboxCtx_messageType fastReflection_SandboxCtx_messageType
var _ protoreflect.MessageType = fastReflection_SandboxCtx_messageType{}

type fastReflection_SandboxCtx_messageType struct{}

func (x fastReflection_SandboxCtx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SandboxCtx)(nil)
}
func (x fastReflection_SandboxCtx_messageType) New() protoreflect.Message {
	return new(fastReflection_SandboxCtx)
}
func (x fastReflection_SandboxCtx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxCtx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SandboxCtx) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxCtx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SandboxCtx) Type() protoreflect.MessageType {
	return _fastReflection_SandboxCtx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SandboxCtx) New() protoreflect.Message {
	return new(fastReflection_SandboxCtx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SandboxCtx) Interface() protoreflect.ProtoMessage {
	return (*SandboxCtx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SandboxCtx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Policy != nil {
		value := protoreflect.ValueOfMessage(x.Policy.ProtoReflect())
		if !f(fd_SandboxCtx_policy, value) {
			return
		}
	}
	if len(x.Relationships) != 0 {
		value := protoreflect.ValueOfList(&_SandboxCtx_2_list{list: &x.Relationships})
		if !f(fd_SandboxCtx_relationships, value) {
			return
		}
	}
	if x.PolicyTheorem != nil {
		value := protoreflect.ValueOfMessage(x.PolicyTheorem.ProtoReflect())
		if !f(fd_SandboxCtx_policy_theorem, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SandboxCtx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		return x.Policy != nil
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		return len(x.Relationships) != 0
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		return x.PolicyTheorem != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxCtx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		x.Policy = nil
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		x.Relationships = nil
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		x.PolicyTheorem = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SandboxCtx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		value := x.Policy
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		if len(x.Relationships) == 0 {
			return protoreflect.ValueOfList(&_SandboxCtx_2_list{})
		}
		listValue := &_SandboxCtx_2_list{list: &x.Relationships}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		value := x.PolicyTheorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxCtx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		x.Policy = value.Message().Interface().(*Policy)
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		lv := value.List()
		clv := lv.(*_SandboxCtx_2_list)
		x.Relationships = *clv.list
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		x.PolicyTheorem = value.Message().Interface().(*PolicyTheorem)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxCtx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		if x.Policy == nil {
			x.Policy = new(Policy)
		}
		return protoreflect.ValueOfMessage(x.Policy.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		if x.Relationships == nil {
			x.Relationships = []*Relationship{}
		}
		value := &_SandboxCtx_2_list{list: &x.Relationships}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		if x.PolicyTheorem == nil {
			x.PolicyTheorem = new(PolicyTheorem)
		}
		return protoreflect.ValueOfMessage(x.PolicyTheorem.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SandboxCtx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxCtx.policy":
		m := new(Policy)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.SandboxCtx.relationships":
		list := []*Relationship{}
		return protoreflect.ValueOfList(&_SandboxCtx_2_list{list: &list})
	case "sourcenetwork.acp_core.SandboxCtx.policy_theorem":
		m := new(PolicyTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxCtx"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxCtx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SandboxCtx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.SandboxCtx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SandboxCtx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxCtx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SandboxCtx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SandboxCtx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SandboxCtx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Policy != nil {
			l = options.Size(x.Policy)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Relationships) > 0 {
			for _, e := range x.Relationships {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PolicyTheorem != nil {
			l = options.Size(x.PolicyTheorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SandboxCtx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PolicyTheorem != nil {
			encoded, err := options.Marshal(x.PolicyTheorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Relationships) > 0 {
			for iNdEx := len(x.Relationships) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Relationships[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Policy != nil {
			encoded, err := options.Marshal(x.Policy)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SandboxCtx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxCtx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxCtx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Policy == nil {
					x.Policy = &Policy{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Policy); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relationships", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Relationships = append(x.Relationships, &Relationship{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Relationships[len(x.Relationships)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyTheorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PolicyTheorem == nil {
					x.PolicyTheorem = &PolicyTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PolicyTheorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SandboxDataErrors_1_list)(nil)

type _SandboxDataErrors_1_list struct {
	list *[]*LocatedMessage
}

func (x *_SandboxDataErrors_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SandboxDataErrors_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SandboxDataErrors_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	(*x.list)[i] = concreteValue
}

func (x *_SandboxDataErrors_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SandboxDataErrors_1_list) AppendMutable() protoreflect.Value {
	v := new(LocatedMessage)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SandboxDataErrors_1_list) NewElement() protoreflect.Value {
	v := new(LocatedMessage)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SandboxDataErrors_2_list)(nil)

type _SandboxDataErrors_2_list struct {
	list *[]*LocatedMessage
}

func (x *_SandboxDataErrors_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SandboxDataErrors_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SandboxDataErrors_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	(*x.list)[i] = concreteValue
}

func (x *_SandboxDataErrors_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SandboxDataErrors_2_list) AppendMutable() protoreflect.Value {
	v := new(LocatedMessage)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SandboxDataErrors_2_list) NewElement() protoreflect.Value {
	v := new(LocatedMessage)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SandboxDataErrors_3_list)(nil)

type _SandboxDataErrors_3_list struct {
	list *[]*LocatedMessage
}

func (x *_SandboxDataErrors_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SandboxDataErrors_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SandboxDataErrors_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	(*x.list)[i] = concreteValue
}

func (x *_SandboxDataErrors_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LocatedMessage)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SandboxDataErrors_3_list) AppendMutable() protoreflect.Value {
	v := new(LocatedMessage)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SandboxDataErrors_3_list) NewElement() protoreflect.Value {
	v := new(LocatedMessage)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SandboxDataErrors_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SandboxDataErrors                      protoreflect.MessageDescriptor
	fd_SandboxDataErrors_policy_errors        protoreflect.FieldDescriptor
	fd_SandboxDataErrors_relationships_errors protoreflect.FieldDescriptor
	fd_SandboxDataErrors_theorems_errors      protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_sandbox_proto_init()
	md_SandboxDataErrors = File_sourcenetwork_acp_core_sandbox_proto.Messages().ByName("SandboxDataErrors")
	fd_SandboxDataErrors_policy_errors = md_SandboxDataErrors.Fields().ByName("policy_errors")
	fd_SandboxDataErrors_relationships_errors = md_SandboxDataErrors.Fields().ByName("relationships_errors")
	fd_SandboxDataErrors_theorems_errors = md_SandboxDataErrors.Fields().ByName("theorems_errors")
}

var _ protoreflect.Message = (*fastReflection_SandboxDataErrors)(nil)

type fastReflection_SandboxDataErrors SandboxDataErrors

func (x *SandboxDataErrors) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SandboxDataErrors)(x)
}

func (x *SandboxDataErrors) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SandboxDataErrors_messageType fastReflection_SandboxDataErrors_messageType
var _ protoreflect.MessageType = fastReflection_SandboxDataErrors_messageType{}

type fastReflection_SandboxDataErrors_messageType struct{}

func (x fastReflection_SandboxDataErrors_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SandboxDataErrors)(nil)
}
func (x fastReflection_SandboxDataErrors_messageType) New() protoreflect.Message {
	return new(fastReflection_SandboxDataErrors)
}
func (x fastReflection_SandboxDataErrors_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxDataErrors
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SandboxDataErrors) Descriptor() protoreflect.MessageDescriptor {
	return md_SandboxDataErrors
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SandboxDataErrors) Type() protoreflect.MessageType {
	return _fastReflection_SandboxDataErrors_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SandboxDataErrors) New() protoreflect.Message {
	return new(fastReflection_SandboxDataErrors)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SandboxDataErrors) Interface() protoreflect.ProtoMessage {
	return (*SandboxDataErrors)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SandboxDataErrors) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PolicyErrors) != 0 {
		value := protoreflect.ValueOfList(&_SandboxDataErrors_1_list{list: &x.PolicyErrors})
		if !f(fd_SandboxDataErrors_policy_errors, value) {
			return
		}
	}
	if len(x.RelationshipsErrors) != 0 {
		value := protoreflect.ValueOfList(&_SandboxDataErrors_2_list{list: &x.RelationshipsErrors})
		if !f(fd_SandboxDataErrors_relationships_errors, value) {
			return
		}
	}
	if len(x.TheoremsErrors) != 0 {
		value := protoreflect.ValueOfList(&_SandboxDataErrors_3_list{list: &x.TheoremsErrors})
		if !f(fd_SandboxDataErrors_theorems_errors, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SandboxDataErrors) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		return len(x.PolicyErrors) != 0
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		return len(x.RelationshipsErrors) != 0
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		return len(x.TheoremsErrors) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxDataErrors) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		x.PolicyErrors = nil
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		x.RelationshipsErrors = nil
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		x.TheoremsErrors = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SandboxDataErrors) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		if len(x.PolicyErrors) == 0 {
			return protoreflect.ValueOfList(&_SandboxDataErrors_1_list{})
		}
		listValue := &_SandboxDataErrors_1_list{list: &x.PolicyErrors}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		if len(x.RelationshipsErrors) == 0 {
			return protoreflect.ValueOfList(&_SandboxDataErrors_2_list{})
		}
		listValue := &_SandboxDataErrors_2_list{list: &x.RelationshipsErrors}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		if len(x.TheoremsErrors) == 0 {
			return protoreflect.ValueOfList(&_SandboxDataErrors_3_list{})
		}
		listValue := &_SandboxDataErrors_3_list{list: &x.TheoremsErrors}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxDataErrors) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		lv := value.List()
		clv := lv.(*_SandboxDataErrors_1_list)
		x.PolicyErrors = *clv.list
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		lv := value.List()
		clv := lv.(*_SandboxDataErrors_2_list)
		x.RelationshipsErrors = *clv.list
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		lv := value.List()
		clv := lv.(*_SandboxDataErrors_3_list)
		x.TheoremsErrors = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxDataErrors) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		if x.PolicyErrors == nil {
			x.PolicyErrors = []*LocatedMessage{}
		}
		value := &_SandboxDataErrors_1_list{list: &x.PolicyErrors}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		if x.RelationshipsErrors == nil {
			x.RelationshipsErrors = []*LocatedMessage{}
		}
		value := &_SandboxDataErrors_2_list{list: &x.RelationshipsErrors}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		if x.TheoremsErrors == nil {
			x.TheoremsErrors = []*LocatedMessage{}
		}
		value := &_SandboxDataErrors_3_list{list: &x.TheoremsErrors}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SandboxDataErrors) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.SandboxDataErrors.policy_errors":
		list := []*LocatedMessage{}
		return protoreflect.ValueOfList(&_SandboxDataErrors_1_list{list: &list})
	case "sourcenetwork.acp_core.SandboxDataErrors.relationships_errors":
		list := []*LocatedMessage{}
		return protoreflect.ValueOfList(&_SandboxDataErrors_2_list{list: &list})
	case "sourcenetwork.acp_core.SandboxDataErrors.theorems_errors":
		list := []*LocatedMessage{}
		return protoreflect.ValueOfList(&_SandboxDataErrors_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.SandboxDataErrors"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.SandboxDataErrors does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SandboxDataErrors) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.SandboxDataErrors", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SandboxDataErrors) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SandboxDataErrors) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SandboxDataErrors) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SandboxDataErrors) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SandboxDataErrors)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.PolicyErrors) > 0 {
			for _, e := range x.PolicyErrors {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.RelationshipsErrors) > 0 {
			for _, e := range x.RelationshipsErrors {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TheoremsErrors) > 0 {
			for _, e := range x.TheoremsErrors {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SandboxDataErrors)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TheoremsErrors) > 0 {
			for iNdEx := len(x.TheoremsErrors) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TheoremsErrors[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.RelationshipsErrors) > 0 {
			for iNdEx := len(x.RelationshipsErrors) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RelationshipsErrors[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.PolicyErrors) > 0 {
			for iNdEx := len(x.PolicyErrors) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PolicyErrors[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SandboxDataErrors)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxDataErrors: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SandboxDataErrors: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyErrors", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PolicyErrors = append(x.PolicyErrors, &LocatedMessage{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PolicyErrors[len(x.PolicyErrors)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelationshipsErrors", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RelationshipsErrors = append(x.RelationshipsErrors, &LocatedMessage{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RelationshipsErrors[len(x.RelationshipsErrors)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TheoremsErrors", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TheoremsErrors = append(x.TheoremsErrors, &LocatedMessage{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TheoremsErrors[len(x.TheoremsErrors)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sourcenetwork/acp_core/sandbox.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SandboxRecord represents an instance of a sandbox
type SandboxRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Handle is an opaque identifier to a sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// name is a user given designation to a sandbox
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Data        *SandboxData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// scratchpad acts as temporary storage for modifications in the sandbox data
	Scratchpad  *SandboxData `protobuf:"bytes,5,opt,name=scratchpad,proto3" json:"scratchpad,omitempty"`
	Ctx         *SandboxCtx  `protobuf:"bytes,6,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Initialized bool         `protobuf:"varint,7,opt,name=initialized,proto3" json:"initialized,omitempty"`
}

func (x *SandboxRecord) Reset() {
	*x = SandboxRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandboxRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxRecord) ProtoMessage() {}

// Deprecated: Use SandboxRecord.ProtoReflect.Descriptor instead.
func (*SandboxRecord) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_sandbox_proto_rawDescGZIP(), []int{0}
}

func (x *SandboxRecord) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *SandboxRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SandboxRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SandboxRecord) GetData() *SandboxData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SandboxRecord) GetScratchpad() *SandboxData {
	if x != nil {
		return x.Scratchpad
	}
	return nil
}

func (x *SandboxRecord) GetCtx() *SandboxCtx {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SandboxRecord) GetInitialized() bool {
	if x != nil {
		return x.Initialized
	}
	return false
}

// SandboxData encapsulates all the data necessary to create a Sandbox
type SandboxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_definition contains a yaml serialized policy which will be loaded in the sandbox
	PolicyDefinition string `protobuf:"bytes,1,opt,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
	// relationships is a set of line separated relationships, as defined in the PolicyTheoremDSL
	// For an introduction to the language, check acp_core docs
	Relationships string `protobuf:"bytes,2,opt,name=relationships,proto3" json:"relationships,omitempty"`
	// policy_theorem is a PolicyTheoremDSL document representing a PolicyTheorem.
	// For an introduction to the language, check acp_core docs
	PolicyTheorem string `protobuf:"bytes,3,opt,name=policy_theorem,json=policyTheorem,proto3" json:"policy_theorem,omitempty"`
}

func (x *SandboxData) Reset() {
	*x = SandboxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandboxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxData) ProtoMessage() {}

// Deprecated: Use SandboxData.ProtoReflect.Descriptor instead.
func (*SandboxData) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_sandbox_proto_rawDescGZIP(), []int{1}
}

func (x *SandboxData) GetPolicyDefinition() string {
	if x != nil {
		return x.PolicyDefinition
	}
	return ""
}

func (x *SandboxData) GetRelationships() string {
	if x != nil {
		return x.Relationships
	}
	return ""
}

func (x *SandboxData) GetPolicyTheorem() string {
	if x != nil {
		return x.PolicyTheorem
	}
	return ""
}

// SandboxCtx encapsulated all context data
// to execute an isolated theorem execution simulation
type SandboxCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy contains the parsed policy as defined in SandboxData
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// relationships contains the parsed relationships as defined in SandboxData
	Relationships []*Relationship `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
	// policy_theorem contains the parsed policy_theorem as defined in SandboxData
	PolicyTheorem *PolicyTheorem `protobuf:"bytes,3,opt,name=policy_theorem,json=policyTheorem,proto3" json:"policy_theorem,omitempty"`
}

func (x *SandboxCtx) Reset() {
	*x = SandboxCtx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandboxCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxCtx) ProtoMessage() {}

// Deprecated: Use SandboxCtx.ProtoReflect.Descriptor instead.
func (*SandboxCtx) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_sandbox_proto_rawDescGZIP(), []int{2}
}

func (x *SandboxCtx) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *SandboxCtx) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *SandboxCtx) GetPolicyTheorem() *PolicyTheorem {
	if x != nil {
		return x.PolicyTheorem
	}
	return nil
}

type SandboxDataErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_errors contains all errors encountered while
	// processing the given policy
	PolicyErrors []*LocatedMessage `protobuf:"bytes,1,rep,name=policy_errors,json=policyErrors,proto3" json:"policy_errors,omitempty"`
	// policy_errors contains all errors encountered while
	// processing the relationship set
	RelationshipsErrors []*LocatedMessage `protobuf:"bytes,2,rep,name=relationships_errors,json=relationshipsErrors,proto3" json:"relationships_errors,omitempty"`
	// policy_errors contains all errors encountered while
	// parsing the theorems
	TheoremsErrors []*LocatedMessage `protobuf:"bytes,3,rep,name=theorems_errors,json=theoremsErrors,proto3" json:"theorems_errors,omitempty"`
}

func (x *SandboxDataErrors) Reset() {
	*x = SandboxDataErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_sandbox_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandboxDataErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxDataErrors) ProtoMessage() {}

// Deprecated: Use SandboxDataErrors.ProtoReflect.Descriptor instead.
func (*SandboxDataErrors) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_sandbox_proto_rawDescGZIP(), []int{3}
}

func (x *SandboxDataErrors) GetPolicyErrors() []*LocatedMessage {
	if x != nil {
		return x.PolicyErrors
	}
	return nil
}

func (x *SandboxDataErrors) GetRelationshipsErrors() []*LocatedMessage {
	if x != nil {
		return x.RelationshipsErrors
	}
	return nil
}

func (x *SandboxDataErrors) GetTheoremsErrors() []*LocatedMessage {
	if x != nil {
		return x.TheoremsErrors
	}
	return nil
}

var File_sourcenetwork_acp_core_sandbox_proto protoreflect.FileDescriptor

var file_sourcenetwork_acp_core_sandbox_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x2b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x63,
	0x72, 0x61, 0x74, 0x63, 0x68, 0x70, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x70, 0x61, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43, 0x74, 0x78,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65,
	0x6d, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43, 0x74, 0x78,
	0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65, 0x6f,
	0x72, 0x65, 0x6d, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x4f, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sourcenetwork_acp_core_sandbox_proto_rawDescOnce sync.Once
	file_sourcenetwork_acp_core_sandbox_proto_rawDescData = file_sourcenetwork_acp_core_sandbox_proto_rawDesc
)

func file_sourcenetwork_acp_core_sandbox_proto_rawDescGZIP() []byte {
	file_sourcenetwork_acp_core_sandbox_proto_rawDescOnce.Do(func() {
		file_sourcenetwork_acp_core_sandbox_proto_rawDescData = protoimpl.X.CompressGZIP(file_sourcenetwork_acp_core_sandbox_proto_rawDescData)
	})
	return file_sourcenetwork_acp_core_sandbox_proto_rawDescData
}

var file_sourcenetwork_acp_core_sandbox_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sourcenetwork_acp_core_sandbox_proto_goTypes = []interface{}{
	(*SandboxRecord)(nil),     // 0: sourcenetwork.acp_core.SandboxRecord
	(*SandboxData)(nil),       // 1: sourcenetwork.acp_core.SandboxData
	(*SandboxCtx)(nil),        // 2: sourcenetwork.acp_core.SandboxCtx
	(*SandboxDataErrors)(nil), // 3: sourcenetwork.acp_core.SandboxDataErrors
	(*Policy)(nil),            // 4: sourcenetwork.acp_core.Policy
	(*Relationship)(nil),      // 5: sourcenetwork.acp_core.Relationship
	(*PolicyTheorem)(nil),     // 6: sourcenetwork.acp_core.PolicyTheorem
	(*LocatedMessage)(nil),    // 7: sourcenetwork.acp_core.LocatedMessage
}
var file_sourcenetwork_acp_core_sandbox_proto_depIdxs = []int32{
	1, // 0: sourcenetwork.acp_core.SandboxRecord.data:type_name -> sourcenetwork.acp_core.SandboxData
	1, // 1: sourcenetwork.acp_core.SandboxRecord.scratchpad:type_name -> sourcenetwork.acp_core.SandboxData
	2, // 2: sourcenetwork.acp_core.SandboxRecord.ctx:type_name -> sourcenetwork.acp_core.SandboxCtx
	4, // 3: sourcenetwork.acp_core.SandboxCtx.policy:type_name -> sourcenetwork.acp_core.Policy
	5, // 4: sourcenetwork.acp_core.SandboxCtx.relationships:type_name -> sourcenetwork.acp_core.Relationship
	6, // 5: sourcenetwork.acp_core.SandboxCtx.policy_theorem:type_name -> sourcenetwork.acp_core.PolicyTheorem
	7, // 6: sourcenetwork.acp_core.SandboxDataErrors.policy_errors:type_name -> sourcenetwork.acp_core.LocatedMessage
	7, // 7: sourcenetwork.acp_core.SandboxDataErrors.relationships_errors:type_name -> sourcenetwork.acp_core.LocatedMessage
	7, // 8: sourcenetwork.acp_core.SandboxDataErrors.theorems_errors:type_name -> sourcenetwork.acp_core.LocatedMessage
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_sourcenetwork_acp_core_sandbox_proto_init() }
func file_sourcenetwork_acp_core_sandbox_proto_init() {
	if File_sourcenetwork_acp_core_sandbox_proto != nil {
		return
	}
	file_sourcenetwork_acp_core_parser_message_proto_init()
	file_sourcenetwork_acp_core_policy_proto_init()
	file_sourcenetwork_acp_core_relationship_proto_init()
	file_sourcenetwork_acp_core_theorem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sourcenetwork_acp_core_sandbox_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandboxRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_sandbox_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandboxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_sandbox_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandboxCtx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_sandbox_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandboxDataErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sourcenetwork_acp_core_sandbox_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sourcenetwork_acp_core_sandbox_proto_goTypes,
		DependencyIndexes: file_sourcenetwork_acp_core_sandbox_proto_depIdxs,
		MessageInfos:      file_sourcenetwork_acp_core_sandbox_proto_msgTypes,
	}.Build()
	File_sourcenetwork_acp_core_sandbox_proto = out.File
	file_sourcenetwork_acp_core_sandbox_proto_rawDesc = nil
	file_sourcenetwork_acp_core_sandbox_proto_goTypes = nil
	file_sourcenetwork_acp_core_sandbox_proto_depIdxs = nil
}
