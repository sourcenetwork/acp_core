// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_PermissionFetchTree           protoreflect.MessageDescriptor
	fd_PermissionFetchTree_operation protoreflect.FieldDescriptor
	fd_PermissionFetchTree_comb_node protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_PermissionFetchTree = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("PermissionFetchTree")
	fd_PermissionFetchTree_operation = md_PermissionFetchTree.Fields().ByName("operation")
	fd_PermissionFetchTree_comb_node = md_PermissionFetchTree.Fields().ByName("comb_node")
}

var _ protoreflect.Message = (*fastReflection_PermissionFetchTree)(nil)

type fastReflection_PermissionFetchTree PermissionFetchTree

func (x *PermissionFetchTree) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PermissionFetchTree)(x)
}

func (x *PermissionFetchTree) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PermissionFetchTree_messageType fastReflection_PermissionFetchTree_messageType
var _ protoreflect.MessageType = fastReflection_PermissionFetchTree_messageType{}

type fastReflection_PermissionFetchTree_messageType struct{}

func (x fastReflection_PermissionFetchTree_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PermissionFetchTree)(nil)
}
func (x fastReflection_PermissionFetchTree_messageType) New() protoreflect.Message {
	return new(fastReflection_PermissionFetchTree)
}
func (x fastReflection_PermissionFetchTree_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PermissionFetchTree
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PermissionFetchTree) Descriptor() protoreflect.MessageDescriptor {
	return md_PermissionFetchTree
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PermissionFetchTree) Type() protoreflect.MessageType {
	return _fastReflection_PermissionFetchTree_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PermissionFetchTree) New() protoreflect.Message {
	return new(fastReflection_PermissionFetchTree)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PermissionFetchTree) Interface() protoreflect.ProtoMessage {
	return (*PermissionFetchTree)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PermissionFetchTree) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Term != nil {
		switch o := x.Term.(type) {
		case *PermissionFetchTree_Operation:
			v := o.Operation
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_PermissionFetchTree_operation, value) {
				return
			}
		case *PermissionFetchTree_CombNode:
			v := o.CombNode
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_PermissionFetchTree_comb_node, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PermissionFetchTree) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		if x.Term == nil {
			return false
		} else if _, ok := x.Term.(*PermissionFetchTree_Operation); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		if x.Term == nil {
			return false
		} else if _, ok := x.Term.(*PermissionFetchTree_CombNode); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionFetchTree) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		x.Term = nil
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		x.Term = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PermissionFetchTree) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		if x.Term == nil {
			return protoreflect.ValueOfMessage((*FetchOperation)(nil).ProtoReflect())
		} else if v, ok := x.Term.(*PermissionFetchTree_Operation); ok {
			return protoreflect.ValueOfMessage(v.Operation.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*FetchOperation)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		if x.Term == nil {
			return protoreflect.ValueOfMessage((*CombinationNode)(nil).ProtoReflect())
		} else if v, ok := x.Term.(*PermissionFetchTree_CombNode); ok {
			return protoreflect.ValueOfMessage(v.CombNode.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*CombinationNode)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionFetchTree) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		cv := value.Message().Interface().(*FetchOperation)
		x.Term = &PermissionFetchTree_Operation{Operation: cv}
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		cv := value.Message().Interface().(*CombinationNode)
		x.Term = &PermissionFetchTree_CombNode{CombNode: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionFetchTree) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		if x.Term == nil {
			value := &FetchOperation{}
			oneofValue := &PermissionFetchTree_Operation{Operation: value}
			x.Term = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Term.(type) {
		case *PermissionFetchTree_Operation:
			return protoreflect.ValueOfMessage(m.Operation.ProtoReflect())
		default:
			value := &FetchOperation{}
			oneofValue := &PermissionFetchTree_Operation{Operation: value}
			x.Term = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		if x.Term == nil {
			value := &CombinationNode{}
			oneofValue := &PermissionFetchTree_CombNode{CombNode: value}
			x.Term = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Term.(type) {
		case *PermissionFetchTree_CombNode:
			return protoreflect.ValueOfMessage(m.CombNode.ProtoReflect())
		default:
			value := &CombinationNode{}
			oneofValue := &PermissionFetchTree_CombNode{CombNode: value}
			x.Term = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PermissionFetchTree) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.operation":
		value := &FetchOperation{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.PermissionFetchTree.comb_node":
		value := &CombinationNode{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PermissionFetchTree"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PermissionFetchTree does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PermissionFetchTree) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sourcenetwork.acp_core.PermissionFetchTree.term":
		if x.Term == nil {
			return nil
		}
		switch x.Term.(type) {
		case *PermissionFetchTree_Operation:
			return x.Descriptor().Fields().ByName("operation")
		case *PermissionFetchTree_CombNode:
			return x.Descriptor().Fields().ByName("comb_node")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.PermissionFetchTree", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PermissionFetchTree) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionFetchTree) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PermissionFetchTree) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PermissionFetchTree) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PermissionFetchTree)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Term.(type) {
		case *PermissionFetchTree_Operation:
			if x == nil {
				break
			}
			l = options.Size(x.Operation)
			n += 1 + l + runtime.Sov(uint64(l))
		case *PermissionFetchTree_CombNode:
			if x == nil {
				break
			}
			l = options.Size(x.CombNode)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PermissionFetchTree)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Term.(type) {
		case *PermissionFetchTree_Operation:
			encoded, err := options.Marshal(x.Operation)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *PermissionFetchTree_CombNode:
			encoded, err := options.Marshal(x.CombNode)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PermissionFetchTree)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PermissionFetchTree: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PermissionFetchTree: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &FetchOperation{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Term = &PermissionFetchTree_Operation{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CombNode", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &CombinationNode{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Term = &PermissionFetchTree_CombNode{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CombinationNode            protoreflect.MessageDescriptor
	fd_CombinationNode_left       protoreflect.FieldDescriptor
	fd_CombinationNode_combinator protoreflect.FieldDescriptor
	fd_CombinationNode_right      protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_CombinationNode = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("CombinationNode")
	fd_CombinationNode_left = md_CombinationNode.Fields().ByName("left")
	fd_CombinationNode_combinator = md_CombinationNode.Fields().ByName("combinator")
	fd_CombinationNode_right = md_CombinationNode.Fields().ByName("right")
}

var _ protoreflect.Message = (*fastReflection_CombinationNode)(nil)

type fastReflection_CombinationNode CombinationNode

func (x *CombinationNode) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CombinationNode)(x)
}

func (x *CombinationNode) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CombinationNode_messageType fastReflection_CombinationNode_messageType
var _ protoreflect.MessageType = fastReflection_CombinationNode_messageType{}

type fastReflection_CombinationNode_messageType struct{}

func (x fastReflection_CombinationNode_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CombinationNode)(nil)
}
func (x fastReflection_CombinationNode_messageType) New() protoreflect.Message {
	return new(fastReflection_CombinationNode)
}
func (x fastReflection_CombinationNode_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CombinationNode
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CombinationNode) Descriptor() protoreflect.MessageDescriptor {
	return md_CombinationNode
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CombinationNode) Type() protoreflect.MessageType {
	return _fastReflection_CombinationNode_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CombinationNode) New() protoreflect.Message {
	return new(fastReflection_CombinationNode)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CombinationNode) Interface() protoreflect.ProtoMessage {
	return (*CombinationNode)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CombinationNode) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Left != nil {
		value := protoreflect.ValueOfMessage(x.Left.ProtoReflect())
		if !f(fd_CombinationNode_left, value) {
			return
		}
	}
	if x.Combinator != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Combinator))
		if !f(fd_CombinationNode_combinator, value) {
			return
		}
	}
	if x.Right != nil {
		value := protoreflect.ValueOfMessage(x.Right.ProtoReflect())
		if !f(fd_CombinationNode_right, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CombinationNode) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		return x.Left != nil
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		return x.Combinator != 0
	case "sourcenetwork.acp_core.CombinationNode.right":
		return x.Right != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CombinationNode) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		x.Left = nil
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		x.Combinator = 0
	case "sourcenetwork.acp_core.CombinationNode.right":
		x.Right = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CombinationNode) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		value := x.Left
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		value := x.Combinator
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sourcenetwork.acp_core.CombinationNode.right":
		value := x.Right
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CombinationNode) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		x.Left = value.Message().Interface().(*PermissionFetchTree)
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		x.Combinator = (Combinator)(value.Enum())
	case "sourcenetwork.acp_core.CombinationNode.right":
		x.Right = value.Message().Interface().(*PermissionFetchTree)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CombinationNode) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		if x.Left == nil {
			x.Left = new(PermissionFetchTree)
		}
		return protoreflect.ValueOfMessage(x.Left.ProtoReflect())
	case "sourcenetwork.acp_core.CombinationNode.right":
		if x.Right == nil {
			x.Right = new(PermissionFetchTree)
		}
		return protoreflect.ValueOfMessage(x.Right.ProtoReflect())
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		panic(fmt.Errorf("field combinator of message sourcenetwork.acp_core.CombinationNode is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CombinationNode) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.CombinationNode.left":
		m := new(PermissionFetchTree)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.CombinationNode.combinator":
		return protoreflect.ValueOfEnum(0)
	case "sourcenetwork.acp_core.CombinationNode.right":
		m := new(PermissionFetchTree)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.CombinationNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.CombinationNode does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CombinationNode) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.CombinationNode", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CombinationNode) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CombinationNode) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CombinationNode) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CombinationNode) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CombinationNode)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Left != nil {
			l = options.Size(x.Left)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Combinator != 0 {
			n += 1 + runtime.Sov(uint64(x.Combinator))
		}
		if x.Right != nil {
			l = options.Size(x.Right)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CombinationNode)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Right != nil {
			encoded, err := options.Marshal(x.Right)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Combinator != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Combinator))
			i--
			dAtA[i] = 0x10
		}
		if x.Left != nil {
			encoded, err := options.Marshal(x.Left)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CombinationNode)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CombinationNode: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CombinationNode: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Left == nil {
					x.Left = &PermissionFetchTree{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Left); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Combinator", wireType)
				}
				x.Combinator = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Combinator |= Combinator(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Right == nil {
					x.Right = &PermissionFetchTree{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Right); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FetchOperation      protoreflect.MessageDescriptor
	fd_FetchOperation_cu   protoreflect.FieldDescriptor
	fd_FetchOperation_this protoreflect.FieldDescriptor
	fd_FetchOperation_ttu  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_FetchOperation = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("FetchOperation")
	fd_FetchOperation_cu = md_FetchOperation.Fields().ByName("cu")
	fd_FetchOperation_this = md_FetchOperation.Fields().ByName("this")
	fd_FetchOperation_ttu = md_FetchOperation.Fields().ByName("ttu")
}

var _ protoreflect.Message = (*fastReflection_FetchOperation)(nil)

type fastReflection_FetchOperation FetchOperation

func (x *FetchOperation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FetchOperation)(x)
}

func (x *FetchOperation) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FetchOperation_messageType fastReflection_FetchOperation_messageType
var _ protoreflect.MessageType = fastReflection_FetchOperation_messageType{}

type fastReflection_FetchOperation_messageType struct{}

func (x fastReflection_FetchOperation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FetchOperation)(nil)
}
func (x fastReflection_FetchOperation_messageType) New() protoreflect.Message {
	return new(fastReflection_FetchOperation)
}
func (x fastReflection_FetchOperation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FetchOperation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FetchOperation) Descriptor() protoreflect.MessageDescriptor {
	return md_FetchOperation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FetchOperation) Type() protoreflect.MessageType {
	return _fastReflection_FetchOperation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FetchOperation) New() protoreflect.Message {
	return new(fastReflection_FetchOperation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FetchOperation) Interface() protoreflect.ProtoMessage {
	return (*FetchOperation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FetchOperation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Operation != nil {
		switch o := x.Operation.(type) {
		case *FetchOperation_Cu:
			v := o.Cu
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_FetchOperation_cu, value) {
				return
			}
		case *FetchOperation_This:
			v := o.This
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_FetchOperation_this, value) {
				return
			}
		case *FetchOperation_Ttu:
			v := o.Ttu
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_FetchOperation_ttu, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FetchOperation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		if x.Operation == nil {
			return false
		} else if _, ok := x.Operation.(*FetchOperation_Cu); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.FetchOperation.this":
		if x.Operation == nil {
			return false
		} else if _, ok := x.Operation.(*FetchOperation_This); ok {
			return true
		} else {
			return false
		}
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		if x.Operation == nil {
			return false
		} else if _, ok := x.Operation.(*FetchOperation_Ttu); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FetchOperation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		x.Operation = nil
	case "sourcenetwork.acp_core.FetchOperation.this":
		x.Operation = nil
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		x.Operation = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FetchOperation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		if x.Operation == nil {
			return protoreflect.ValueOfMessage((*ComputedUsersetNode)(nil).ProtoReflect())
		} else if v, ok := x.Operation.(*FetchOperation_Cu); ok {
			return protoreflect.ValueOfMessage(v.Cu.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ComputedUsersetNode)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.FetchOperation.this":
		if x.Operation == nil {
			return protoreflect.ValueOfMessage((*ThisNode)(nil).ProtoReflect())
		} else if v, ok := x.Operation.(*FetchOperation_This); ok {
			return protoreflect.ValueOfMessage(v.This.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ThisNode)(nil).ProtoReflect())
		}
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		if x.Operation == nil {
			return protoreflect.ValueOfMessage((*TupleToUsersetNode)(nil).ProtoReflect())
		} else if v, ok := x.Operation.(*FetchOperation_Ttu); ok {
			return protoreflect.ValueOfMessage(v.Ttu.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*TupleToUsersetNode)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FetchOperation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		cv := value.Message().Interface().(*ComputedUsersetNode)
		x.Operation = &FetchOperation_Cu{Cu: cv}
	case "sourcenetwork.acp_core.FetchOperation.this":
		cv := value.Message().Interface().(*ThisNode)
		x.Operation = &FetchOperation_This{This: cv}
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		cv := value.Message().Interface().(*TupleToUsersetNode)
		x.Operation = &FetchOperation_Ttu{Ttu: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FetchOperation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		if x.Operation == nil {
			value := &ComputedUsersetNode{}
			oneofValue := &FetchOperation_Cu{Cu: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Operation.(type) {
		case *FetchOperation_Cu:
			return protoreflect.ValueOfMessage(m.Cu.ProtoReflect())
		default:
			value := &ComputedUsersetNode{}
			oneofValue := &FetchOperation_Cu{Cu: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.FetchOperation.this":
		if x.Operation == nil {
			value := &ThisNode{}
			oneofValue := &FetchOperation_This{This: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Operation.(type) {
		case *FetchOperation_This:
			return protoreflect.ValueOfMessage(m.This.ProtoReflect())
		default:
			value := &ThisNode{}
			oneofValue := &FetchOperation_This{This: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		if x.Operation == nil {
			value := &TupleToUsersetNode{}
			oneofValue := &FetchOperation_Ttu{Ttu: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Operation.(type) {
		case *FetchOperation_Ttu:
			return protoreflect.ValueOfMessage(m.Ttu.ProtoReflect())
		default:
			value := &TupleToUsersetNode{}
			oneofValue := &FetchOperation_Ttu{Ttu: value}
			x.Operation = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FetchOperation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.cu":
		value := &ComputedUsersetNode{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.FetchOperation.this":
		value := &ThisNode{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.FetchOperation.ttu":
		value := &TupleToUsersetNode{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.FetchOperation"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.FetchOperation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FetchOperation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "sourcenetwork.acp_core.FetchOperation.operation":
		if x.Operation == nil {
			return nil
		}
		switch x.Operation.(type) {
		case *FetchOperation_Cu:
			return x.Descriptor().Fields().ByName("cu")
		case *FetchOperation_This:
			return x.Descriptor().Fields().ByName("this")
		case *FetchOperation_Ttu:
			return x.Descriptor().Fields().ByName("ttu")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.FetchOperation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FetchOperation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FetchOperation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FetchOperation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FetchOperation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FetchOperation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Operation.(type) {
		case *FetchOperation_Cu:
			if x == nil {
				break
			}
			l = options.Size(x.Cu)
			n += 1 + l + runtime.Sov(uint64(l))
		case *FetchOperation_This:
			if x == nil {
				break
			}
			l = options.Size(x.This)
			n += 1 + l + runtime.Sov(uint64(l))
		case *FetchOperation_Ttu:
			if x == nil {
				break
			}
			l = options.Size(x.Ttu)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FetchOperation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Operation.(type) {
		case *FetchOperation_Cu:
			encoded, err := options.Marshal(x.Cu)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *FetchOperation_This:
			encoded, err := options.Marshal(x.This)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *FetchOperation_Ttu:
			encoded, err := options.Marshal(x.Ttu)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FetchOperation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FetchOperation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FetchOperation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cu", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ComputedUsersetNode{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Operation = &FetchOperation_Cu{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field This", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ThisNode{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Operation = &FetchOperation_This{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ttu", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &TupleToUsersetNode{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Operation = &FetchOperation_Ttu{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ComputedUsersetNode          protoreflect.MessageDescriptor
	fd_ComputedUsersetNode_relation protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_ComputedUsersetNode = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("ComputedUsersetNode")
	fd_ComputedUsersetNode_relation = md_ComputedUsersetNode.Fields().ByName("relation")
}

var _ protoreflect.Message = (*fastReflection_ComputedUsersetNode)(nil)

type fastReflection_ComputedUsersetNode ComputedUsersetNode

func (x *ComputedUsersetNode) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ComputedUsersetNode)(x)
}

func (x *ComputedUsersetNode) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ComputedUsersetNode_messageType fastReflection_ComputedUsersetNode_messageType
var _ protoreflect.MessageType = fastReflection_ComputedUsersetNode_messageType{}

type fastReflection_ComputedUsersetNode_messageType struct{}

func (x fastReflection_ComputedUsersetNode_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ComputedUsersetNode)(nil)
}
func (x fastReflection_ComputedUsersetNode_messageType) New() protoreflect.Message {
	return new(fastReflection_ComputedUsersetNode)
}
func (x fastReflection_ComputedUsersetNode_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ComputedUsersetNode
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ComputedUsersetNode) Descriptor() protoreflect.MessageDescriptor {
	return md_ComputedUsersetNode
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ComputedUsersetNode) Type() protoreflect.MessageType {
	return _fastReflection_ComputedUsersetNode_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ComputedUsersetNode) New() protoreflect.Message {
	return new(fastReflection_ComputedUsersetNode)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ComputedUsersetNode) Interface() protoreflect.ProtoMessage {
	return (*ComputedUsersetNode)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ComputedUsersetNode) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Relation != "" {
		value := protoreflect.ValueOfString(x.Relation)
		if !f(fd_ComputedUsersetNode_relation, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ComputedUsersetNode) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		return x.Relation != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ComputedUsersetNode) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		x.Relation = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ComputedUsersetNode) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		value := x.Relation
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ComputedUsersetNode) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		x.Relation = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ComputedUsersetNode) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		panic(fmt.Errorf("field relation of message sourcenetwork.acp_core.ComputedUsersetNode is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ComputedUsersetNode) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ComputedUsersetNode.relation":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ComputedUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ComputedUsersetNode does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ComputedUsersetNode) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.ComputedUsersetNode", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ComputedUsersetNode) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ComputedUsersetNode) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ComputedUsersetNode) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ComputedUsersetNode) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ComputedUsersetNode)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Relation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ComputedUsersetNode)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Relation) > 0 {
			i -= len(x.Relation)
			copy(dAtA[i:], x.Relation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Relation)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ComputedUsersetNode)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ComputedUsersetNode: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ComputedUsersetNode: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Relation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ThisNode protoreflect.MessageDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_ThisNode = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("ThisNode")
}

var _ protoreflect.Message = (*fastReflection_ThisNode)(nil)

type fastReflection_ThisNode ThisNode

func (x *ThisNode) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ThisNode)(x)
}

func (x *ThisNode) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ThisNode_messageType fastReflection_ThisNode_messageType
var _ protoreflect.MessageType = fastReflection_ThisNode_messageType{}

type fastReflection_ThisNode_messageType struct{}

func (x fastReflection_ThisNode_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ThisNode)(nil)
}
func (x fastReflection_ThisNode_messageType) New() protoreflect.Message {
	return new(fastReflection_ThisNode)
}
func (x fastReflection_ThisNode_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ThisNode
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ThisNode) Descriptor() protoreflect.MessageDescriptor {
	return md_ThisNode
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ThisNode) Type() protoreflect.MessageType {
	return _fastReflection_ThisNode_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ThisNode) New() protoreflect.Message {
	return new(fastReflection_ThisNode)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ThisNode) Interface() protoreflect.ProtoMessage {
	return (*ThisNode)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ThisNode) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ThisNode) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ThisNode) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ThisNode) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ThisNode) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ThisNode) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ThisNode) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ThisNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ThisNode does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ThisNode) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.ThisNode", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ThisNode) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ThisNode) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ThisNode) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ThisNode) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ThisNode)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ThisNode)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ThisNode)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ThisNode: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ThisNode: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TupleToUsersetNode          protoreflect.MessageDescriptor
	fd_TupleToUsersetNode_resource protoreflect.FieldDescriptor
	fd_TupleToUsersetNode_relation protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_init()
	md_TupleToUsersetNode = File_sourcenetwork_acp_core_permission_expr_tree_proto.Messages().ByName("TupleToUsersetNode")
	fd_TupleToUsersetNode_resource = md_TupleToUsersetNode.Fields().ByName("resource")
	fd_TupleToUsersetNode_relation = md_TupleToUsersetNode.Fields().ByName("relation")
}

var _ protoreflect.Message = (*fastReflection_TupleToUsersetNode)(nil)

type fastReflection_TupleToUsersetNode TupleToUsersetNode

func (x *TupleToUsersetNode) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TupleToUsersetNode)(x)
}

func (x *TupleToUsersetNode) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TupleToUsersetNode_messageType fastReflection_TupleToUsersetNode_messageType
var _ protoreflect.MessageType = fastReflection_TupleToUsersetNode_messageType{}

type fastReflection_TupleToUsersetNode_messageType struct{}

func (x fastReflection_TupleToUsersetNode_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TupleToUsersetNode)(nil)
}
func (x fastReflection_TupleToUsersetNode_messageType) New() protoreflect.Message {
	return new(fastReflection_TupleToUsersetNode)
}
func (x fastReflection_TupleToUsersetNode_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TupleToUsersetNode
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TupleToUsersetNode) Descriptor() protoreflect.MessageDescriptor {
	return md_TupleToUsersetNode
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TupleToUsersetNode) Type() protoreflect.MessageType {
	return _fastReflection_TupleToUsersetNode_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TupleToUsersetNode) New() protoreflect.Message {
	return new(fastReflection_TupleToUsersetNode)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TupleToUsersetNode) Interface() protoreflect.ProtoMessage {
	return (*TupleToUsersetNode)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TupleToUsersetNode) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Resource != "" {
		value := protoreflect.ValueOfString(x.Resource)
		if !f(fd_TupleToUsersetNode_resource, value) {
			return
		}
	}
	if x.Relation != "" {
		value := protoreflect.ValueOfString(x.Relation)
		if !f(fd_TupleToUsersetNode_relation, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TupleToUsersetNode) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		return x.Resource != ""
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		return x.Relation != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TupleToUsersetNode) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		x.Resource = ""
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		x.Relation = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TupleToUsersetNode) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		value := x.Resource
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		value := x.Relation
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TupleToUsersetNode) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		x.Resource = value.Interface().(string)
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		x.Relation = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TupleToUsersetNode) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		panic(fmt.Errorf("field resource of message sourcenetwork.acp_core.TupleToUsersetNode is not mutable"))
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		panic(fmt.Errorf("field relation of message sourcenetwork.acp_core.TupleToUsersetNode is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TupleToUsersetNode) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.TupleToUsersetNode.resource":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.TupleToUsersetNode.relation":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.TupleToUsersetNode"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.TupleToUsersetNode does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TupleToUsersetNode) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.TupleToUsersetNode", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TupleToUsersetNode) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TupleToUsersetNode) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TupleToUsersetNode) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TupleToUsersetNode) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TupleToUsersetNode)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Resource)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Relation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TupleToUsersetNode)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Relation) > 0 {
			i -= len(x.Relation)
			copy(dAtA[i:], x.Relation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Relation)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Resource) > 0 {
			i -= len(x.Resource)
			copy(dAtA[i:], x.Resource)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Resource)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TupleToUsersetNode)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TupleToUsersetNode: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TupleToUsersetNode: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Resource = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Relation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sourcenetwork/acp_core/permission_expr_tree.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Combinator expresses a set combinator which
// merges the result of two fetch operatiosn
type Combinator int32

const (
	Combinator_COMB_UNKNOWN Combinator = 0
	Combinator_UNION        Combinator = 1
	Combinator_DIFFERENCE   Combinator = 2
	Combinator_INTERSECTION Combinator = 3
)

// Enum value maps for Combinator.
var (
	Combinator_name = map[int32]string{
		0: "COMB_UNKNOWN",
		1: "UNION",
		2: "DIFFERENCE",
		3: "INTERSECTION",
	}
	Combinator_value = map[string]int32{
		"COMB_UNKNOWN": 0,
		"UNION":        1,
		"DIFFERENCE":   2,
		"INTERSECTION": 3,
	}
)

func (x Combinator) Enum() *Combinator {
	p := new(Combinator)
	*p = x
	return p
}

func (x Combinator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Combinator) Descriptor() protoreflect.EnumDescriptor {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_enumTypes[0].Descriptor()
}

func (Combinator) Type() protoreflect.EnumType {
	return &file_sourcenetwork_acp_core_permission_expr_tree_proto_enumTypes[0]
}

func (x Combinator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Combinator.Descriptor instead.
func (Combinator) EnumDescriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{0}
}

// PermissionExpr models a permission fetch tree,
// which controls how a permission is evaluated
type PermissionFetchTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Term:
	//
	//	*PermissionFetchTree_Operation
	//	*PermissionFetchTree_CombNode
	Term isPermissionFetchTree_Term `protobuf_oneof:"term"`
}

func (x *PermissionFetchTree) Reset() {
	*x = PermissionFetchTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionFetchTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionFetchTree) ProtoMessage() {}

// Deprecated: Use PermissionFetchTree.ProtoReflect.Descriptor instead.
func (*PermissionFetchTree) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{0}
}

func (x *PermissionFetchTree) GetTerm() isPermissionFetchTree_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *PermissionFetchTree) GetOperation() *FetchOperation {
	if x, ok := x.GetTerm().(*PermissionFetchTree_Operation); ok {
		return x.Operation
	}
	return nil
}

func (x *PermissionFetchTree) GetCombNode() *CombinationNode {
	if x, ok := x.GetTerm().(*PermissionFetchTree_CombNode); ok {
		return x.CombNode
	}
	return nil
}

type isPermissionFetchTree_Term interface {
	isPermissionFetchTree_Term()
}

type PermissionFetchTree_Operation struct {
	Operation *FetchOperation `protobuf:"bytes,1,opt,name=operation,proto3,oneof"`
}

type PermissionFetchTree_CombNode struct {
	CombNode *CombinationNode `protobuf:"bytes,2,opt,name=comb_node,json=combNode,proto3,oneof"`
}

func (*PermissionFetchTree_Operation) isPermissionFetchTree_Term() {}

func (*PermissionFetchTree_CombNode) isPermissionFetchTree_Term() {}

// CombinationNode models a term which has a left and right expr alongside a combinator
type CombinationNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left       *PermissionFetchTree `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Combinator Combinator           `protobuf:"varint,2,opt,name=combinator,proto3,enum=sourcenetwork.acp_core.Combinator" json:"combinator,omitempty"`
	Right      *PermissionFetchTree `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *CombinationNode) Reset() {
	*x = CombinationNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationNode) ProtoMessage() {}

// Deprecated: Use CombinationNode.ProtoReflect.Descriptor instead.
func (*CombinationNode) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{1}
}

func (x *CombinationNode) GetLeft() *PermissionFetchTree {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *CombinationNode) GetCombinator() Combinator {
	if x != nil {
		return x.Combinator
	}
	return Combinator_COMB_UNKNOWN
}

func (x *CombinationNode) GetRight() *PermissionFetchTree {
	if x != nil {
		return x.Right
	}
	return nil
}

// FetchOperation models a terminal in the permission expr tree, meaning a single fetch operator
type FetchOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*FetchOperation_Cu
	//	*FetchOperation_This
	//	*FetchOperation_Ttu
	Operation isFetchOperation_Operation `protobuf_oneof:"operation"`
}

func (x *FetchOperation) Reset() {
	*x = FetchOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOperation) ProtoMessage() {}

// Deprecated: Use FetchOperation.ProtoReflect.Descriptor instead.
func (*FetchOperation) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{2}
}

func (x *FetchOperation) GetOperation() isFetchOperation_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *FetchOperation) GetCu() *ComputedUsersetNode {
	if x, ok := x.GetOperation().(*FetchOperation_Cu); ok {
		return x.Cu
	}
	return nil
}

func (x *FetchOperation) GetThis() *ThisNode {
	if x, ok := x.GetOperation().(*FetchOperation_This); ok {
		return x.This
	}
	return nil
}

func (x *FetchOperation) GetTtu() *TupleToUsersetNode {
	if x, ok := x.GetOperation().(*FetchOperation_Ttu); ok {
		return x.Ttu
	}
	return nil
}

type isFetchOperation_Operation interface {
	isFetchOperation_Operation()
}

type FetchOperation_Cu struct {
	Cu *ComputedUsersetNode `protobuf:"bytes,1,opt,name=cu,proto3,oneof"`
}

type FetchOperation_This struct {
	This *ThisNode `protobuf:"bytes,2,opt,name=this,proto3,oneof"`
}

type FetchOperation_Ttu struct {
	Ttu *TupleToUsersetNode `protobuf:"bytes,3,opt,name=ttu,proto3,oneof"`
}

func (*FetchOperation_Cu) isFetchOperation_Operation() {}

func (*FetchOperation_This) isFetchOperation_Operation() {}

func (*FetchOperation_Ttu) isFetchOperation_Operation() {}

// ComputedUsersetNode models a computed userset operation
type ComputedUsersetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation string `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ComputedUsersetNode) Reset() {
	*x = ComputedUsersetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedUsersetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedUsersetNode) ProtoMessage() {}

// Deprecated: Use ComputedUsersetNode.ProtoReflect.Descriptor instead.
func (*ComputedUsersetNode) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{3}
}

func (x *ComputedUsersetNode) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

// ThisNode models a fetch this operation
type ThisNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThisNode) Reset() {
	*x = ThisNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThisNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisNode) ProtoMessage() {}

// Deprecated: Use ThisNode.ProtoReflect.Descriptor instead.
func (*ThisNode) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{4}
}

// TupleToUsersetNode models a Tuple to Userset operation
type TupleToUsersetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *TupleToUsersetNode) Reset() {
	*x = TupleToUsersetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleToUsersetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleToUsersetNode) ProtoMessage() {}

// Deprecated: Use TupleToUsersetNode.ProtoReflect.Descriptor instead.
func (*TupleToUsersetNode) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP(), []int{5}
}

func (x *TupleToUsersetNode) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *TupleToUsersetNode) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

var File_sourcenetwork_acp_core_permission_expr_tree_proto protoreflect.FileDescriptor

var file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x62, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xd9, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x02, 0x63, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x02, 0x63, 0x75, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x68, 0x69,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x68, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x68, 0x69,
	0x73, 0x12, 0x3e, 0x0a, 0x03, 0x74, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x74,
	0x75, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x0a, 0x0a, 0x08, 0x54, 0x68, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a,
	0x12, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x4b, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d,
	0x42, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescOnce sync.Once
	file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescData = file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDesc
)

func file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescGZIP() []byte {
	file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescOnce.Do(func() {
		file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescData)
	})
	return file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDescData
}

var file_sourcenetwork_acp_core_permission_expr_tree_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sourcenetwork_acp_core_permission_expr_tree_proto_goTypes = []interface{}{
	(Combinator)(0),             // 0: sourcenetwork.acp_core.Combinator
	(*PermissionFetchTree)(nil), // 1: sourcenetwork.acp_core.PermissionFetchTree
	(*CombinationNode)(nil),     // 2: sourcenetwork.acp_core.CombinationNode
	(*FetchOperation)(nil),      // 3: sourcenetwork.acp_core.FetchOperation
	(*ComputedUsersetNode)(nil), // 4: sourcenetwork.acp_core.ComputedUsersetNode
	(*ThisNode)(nil),            // 5: sourcenetwork.acp_core.ThisNode
	(*TupleToUsersetNode)(nil),  // 6: sourcenetwork.acp_core.TupleToUsersetNode
}
var file_sourcenetwork_acp_core_permission_expr_tree_proto_depIdxs = []int32{
	3, // 0: sourcenetwork.acp_core.PermissionFetchTree.operation:type_name -> sourcenetwork.acp_core.FetchOperation
	2, // 1: sourcenetwork.acp_core.PermissionFetchTree.comb_node:type_name -> sourcenetwork.acp_core.CombinationNode
	1, // 2: sourcenetwork.acp_core.CombinationNode.left:type_name -> sourcenetwork.acp_core.PermissionFetchTree
	0, // 3: sourcenetwork.acp_core.CombinationNode.combinator:type_name -> sourcenetwork.acp_core.Combinator
	1, // 4: sourcenetwork.acp_core.CombinationNode.right:type_name -> sourcenetwork.acp_core.PermissionFetchTree
	4, // 5: sourcenetwork.acp_core.FetchOperation.cu:type_name -> sourcenetwork.acp_core.ComputedUsersetNode
	5, // 6: sourcenetwork.acp_core.FetchOperation.this:type_name -> sourcenetwork.acp_core.ThisNode
	6, // 7: sourcenetwork.acp_core.FetchOperation.ttu:type_name -> sourcenetwork.acp_core.TupleToUsersetNode
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sourcenetwork_acp_core_permission_expr_tree_proto_init() }
func file_sourcenetwork_acp_core_permission_expr_tree_proto_init() {
	if File_sourcenetwork_acp_core_permission_expr_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionFetchTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinationNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedUsersetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThisNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleToUsersetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PermissionFetchTree_Operation)(nil),
		(*PermissionFetchTree_CombNode)(nil),
	}
	file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FetchOperation_Cu)(nil),
		(*FetchOperation_This)(nil),
		(*FetchOperation_Ttu)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sourcenetwork_acp_core_permission_expr_tree_proto_goTypes,
		DependencyIndexes: file_sourcenetwork_acp_core_permission_expr_tree_proto_depIdxs,
		EnumInfos:         file_sourcenetwork_acp_core_permission_expr_tree_proto_enumTypes,
		MessageInfos:      file_sourcenetwork_acp_core_permission_expr_tree_proto_msgTypes,
	}.Build()
	File_sourcenetwork_acp_core_permission_expr_tree_proto = out.File
	file_sourcenetwork_acp_core_permission_expr_tree_proto_rawDesc = nil
	file_sourcenetwork_acp_core_permission_expr_tree_proto_goTypes = nil
	file_sourcenetwork_acp_core_permission_expr_tree_proto_depIdxs = nil
}
