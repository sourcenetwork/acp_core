// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_AuthorizationTheorem             protoreflect.MessageDescriptor
	fd_AuthorizationTheorem_operation   protoreflect.FieldDescriptor
	fd_AuthorizationTheorem_actor       protoreflect.FieldDescriptor
	fd_AuthorizationTheorem_assert_true protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AuthorizationTheorem = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AuthorizationTheorem")
	fd_AuthorizationTheorem_operation = md_AuthorizationTheorem.Fields().ByName("operation")
	fd_AuthorizationTheorem_actor = md_AuthorizationTheorem.Fields().ByName("actor")
	fd_AuthorizationTheorem_assert_true = md_AuthorizationTheorem.Fields().ByName("assert_true")
}

var _ protoreflect.Message = (*fastReflection_AuthorizationTheorem)(nil)

type fastReflection_AuthorizationTheorem AuthorizationTheorem

func (x *AuthorizationTheorem) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AuthorizationTheorem)(x)
}

func (x *AuthorizationTheorem) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AuthorizationTheorem_messageType fastReflection_AuthorizationTheorem_messageType
var _ protoreflect.MessageType = fastReflection_AuthorizationTheorem_messageType{}

type fastReflection_AuthorizationTheorem_messageType struct{}

func (x fastReflection_AuthorizationTheorem_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AuthorizationTheorem)(nil)
}
func (x fastReflection_AuthorizationTheorem_messageType) New() protoreflect.Message {
	return new(fastReflection_AuthorizationTheorem)
}
func (x fastReflection_AuthorizationTheorem_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AuthorizationTheorem
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AuthorizationTheorem) Descriptor() protoreflect.MessageDescriptor {
	return md_AuthorizationTheorem
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AuthorizationTheorem) Type() protoreflect.MessageType {
	return _fastReflection_AuthorizationTheorem_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AuthorizationTheorem) New() protoreflect.Message {
	return new(fastReflection_AuthorizationTheorem)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AuthorizationTheorem) Interface() protoreflect.ProtoMessage {
	return (*AuthorizationTheorem)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AuthorizationTheorem) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Operation != nil {
		value := protoreflect.ValueOfMessage(x.Operation.ProtoReflect())
		if !f(fd_AuthorizationTheorem_operation, value) {
			return
		}
	}
	if x.Actor != nil {
		value := protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
		if !f(fd_AuthorizationTheorem_actor, value) {
			return
		}
	}
	if x.AssertTrue != false {
		value := protoreflect.ValueOfBool(x.AssertTrue)
		if !f(fd_AuthorizationTheorem_assert_true, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AuthorizationTheorem) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		return x.Operation != nil
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		return x.Actor != nil
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		return x.AssertTrue != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheorem) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		x.Operation = nil
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		x.Actor = nil
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		x.AssertTrue = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AuthorizationTheorem) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		value := x.Operation
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		value := x.Actor
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		value := x.AssertTrue
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheorem) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		x.Operation = value.Message().Interface().(*Operation)
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		x.Actor = value.Message().Interface().(*Actor)
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		x.AssertTrue = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheorem) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		if x.Operation == nil {
			x.Operation = new(Operation)
		}
		return protoreflect.ValueOfMessage(x.Operation.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		if x.Actor == nil {
			x.Actor = new(Actor)
		}
		return protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		panic(fmt.Errorf("field assert_true of message sourcenetwork.acp_core.AuthorizationTheorem is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AuthorizationTheorem) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheorem.operation":
		m := new(Operation)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.actor":
		m := new(Actor)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheorem.assert_true":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheorem does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AuthorizationTheorem) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AuthorizationTheorem", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AuthorizationTheorem) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheorem) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AuthorizationTheorem) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AuthorizationTheorem) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AuthorizationTheorem)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Operation != nil {
			l = options.Size(x.Operation)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Actor != nil {
			l = options.Size(x.Actor)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssertTrue {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AuthorizationTheorem)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AssertTrue {
			i--
			if x.AssertTrue {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Actor != nil {
			encoded, err := options.Marshal(x.Actor)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Operation != nil {
			encoded, err := options.Marshal(x.Operation)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AuthorizationTheorem)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AuthorizationTheorem: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AuthorizationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Operation == nil {
					x.Operation = &Operation{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Operation); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Actor == nil {
					x.Actor = &Actor{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Actor); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.AssertTrue = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ReachabilityTheorem             protoreflect.MessageDescriptor
	fd_ReachabilityTheorem_actor       protoreflect.FieldDescriptor
	fd_ReachabilityTheorem_operation   protoreflect.FieldDescriptor
	fd_ReachabilityTheorem_object      protoreflect.FieldDescriptor
	fd_ReachabilityTheorem_assert_true protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_ReachabilityTheorem = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("ReachabilityTheorem")
	fd_ReachabilityTheorem_actor = md_ReachabilityTheorem.Fields().ByName("actor")
	fd_ReachabilityTheorem_operation = md_ReachabilityTheorem.Fields().ByName("operation")
	fd_ReachabilityTheorem_object = md_ReachabilityTheorem.Fields().ByName("object")
	fd_ReachabilityTheorem_assert_true = md_ReachabilityTheorem.Fields().ByName("assert_true")
}

var _ protoreflect.Message = (*fastReflection_ReachabilityTheorem)(nil)

type fastReflection_ReachabilityTheorem ReachabilityTheorem

func (x *ReachabilityTheorem) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ReachabilityTheorem)(x)
}

func (x *ReachabilityTheorem) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ReachabilityTheorem_messageType fastReflection_ReachabilityTheorem_messageType
var _ protoreflect.MessageType = fastReflection_ReachabilityTheorem_messageType{}

type fastReflection_ReachabilityTheorem_messageType struct{}

func (x fastReflection_ReachabilityTheorem_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ReachabilityTheorem)(nil)
}
func (x fastReflection_ReachabilityTheorem_messageType) New() protoreflect.Message {
	return new(fastReflection_ReachabilityTheorem)
}
func (x fastReflection_ReachabilityTheorem_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ReachabilityTheorem
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ReachabilityTheorem) Descriptor() protoreflect.MessageDescriptor {
	return md_ReachabilityTheorem
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ReachabilityTheorem) Type() protoreflect.MessageType {
	return _fastReflection_ReachabilityTheorem_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ReachabilityTheorem) New() protoreflect.Message {
	return new(fastReflection_ReachabilityTheorem)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ReachabilityTheorem) Interface() protoreflect.ProtoMessage {
	return (*ReachabilityTheorem)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ReachabilityTheorem) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Actor != nil {
		value := protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
		if !f(fd_ReachabilityTheorem_actor, value) {
			return
		}
	}
	if x.Operation != "" {
		value := protoreflect.ValueOfString(x.Operation)
		if !f(fd_ReachabilityTheorem_operation, value) {
			return
		}
	}
	if x.Object != nil {
		value := protoreflect.ValueOfMessage(x.Object.ProtoReflect())
		if !f(fd_ReachabilityTheorem_object, value) {
			return
		}
	}
	if x.AssertTrue != false {
		value := protoreflect.ValueOfBool(x.AssertTrue)
		if !f(fd_ReachabilityTheorem_assert_true, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ReachabilityTheorem) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		return x.Actor != nil
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		return x.Operation != ""
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		return x.Object != nil
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		return x.AssertTrue != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheorem) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		x.Actor = nil
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		x.Operation = ""
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		x.Object = nil
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		x.AssertTrue = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ReachabilityTheorem) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		value := x.Actor
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		value := x.Operation
		return protoreflect.ValueOfString(value)
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		value := x.Object
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		value := x.AssertTrue
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheorem) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		x.Actor = value.Message().Interface().(*Actor)
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		x.Operation = value.Interface().(string)
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		x.Object = value.Message().Interface().(*Object)
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		x.AssertTrue = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheorem) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		if x.Actor == nil {
			x.Actor = new(Actor)
		}
		return protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		if x.Object == nil {
			x.Object = new(Object)
		}
		return protoreflect.ValueOfMessage(x.Object.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		panic(fmt.Errorf("field operation of message sourcenetwork.acp_core.ReachabilityTheorem is not mutable"))
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		panic(fmt.Errorf("field assert_true of message sourcenetwork.acp_core.ReachabilityTheorem is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ReachabilityTheorem) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheorem.actor":
		m := new(Actor)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.operation":
		return protoreflect.ValueOfString("")
	case "sourcenetwork.acp_core.ReachabilityTheorem.object":
		m := new(Object)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheorem.assert_true":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheorem does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ReachabilityTheorem) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.ReachabilityTheorem", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ReachabilityTheorem) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheorem) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ReachabilityTheorem) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ReachabilityTheorem) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ReachabilityTheorem)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Actor != nil {
			l = options.Size(x.Actor)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Operation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Object != nil {
			l = options.Size(x.Object)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssertTrue {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ReachabilityTheorem)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AssertTrue {
			i--
			if x.AssertTrue {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.Object != nil {
			encoded, err := options.Marshal(x.Object)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Operation) > 0 {
			i -= len(x.Operation)
			copy(dAtA[i:], x.Operation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Operation)))
			i--
			dAtA[i] = 0x12
		}
		if x.Actor != nil {
			encoded, err := options.Marshal(x.Actor)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ReachabilityTheorem)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ReachabilityTheorem: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ReachabilityTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Actor == nil {
					x.Actor = &Actor{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Actor); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Operation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Object == nil {
					x.Object = &Object{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Object); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.AssertTrue = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DelegationTheorem             protoreflect.MessageDescriptor
	fd_DelegationTheorem_actor       protoreflect.FieldDescriptor
	fd_DelegationTheorem_operation   protoreflect.FieldDescriptor
	fd_DelegationTheorem_assert_true protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_DelegationTheorem = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("DelegationTheorem")
	fd_DelegationTheorem_actor = md_DelegationTheorem.Fields().ByName("actor")
	fd_DelegationTheorem_operation = md_DelegationTheorem.Fields().ByName("operation")
	fd_DelegationTheorem_assert_true = md_DelegationTheorem.Fields().ByName("assert_true")
}

var _ protoreflect.Message = (*fastReflection_DelegationTheorem)(nil)

type fastReflection_DelegationTheorem DelegationTheorem

func (x *DelegationTheorem) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DelegationTheorem)(x)
}

func (x *DelegationTheorem) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DelegationTheorem_messageType fastReflection_DelegationTheorem_messageType
var _ protoreflect.MessageType = fastReflection_DelegationTheorem_messageType{}

type fastReflection_DelegationTheorem_messageType struct{}

func (x fastReflection_DelegationTheorem_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DelegationTheorem)(nil)
}
func (x fastReflection_DelegationTheorem_messageType) New() protoreflect.Message {
	return new(fastReflection_DelegationTheorem)
}
func (x fastReflection_DelegationTheorem_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegationTheorem
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DelegationTheorem) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegationTheorem
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DelegationTheorem) Type() protoreflect.MessageType {
	return _fastReflection_DelegationTheorem_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DelegationTheorem) New() protoreflect.Message {
	return new(fastReflection_DelegationTheorem)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DelegationTheorem) Interface() protoreflect.ProtoMessage {
	return (*DelegationTheorem)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DelegationTheorem) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Actor != nil {
		value := protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
		if !f(fd_DelegationTheorem_actor, value) {
			return
		}
	}
	if x.Operation != nil {
		value := protoreflect.ValueOfMessage(x.Operation.ProtoReflect())
		if !f(fd_DelegationTheorem_operation, value) {
			return
		}
	}
	if x.AssertTrue != false {
		value := protoreflect.ValueOfBool(x.AssertTrue)
		if !f(fd_DelegationTheorem_assert_true, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DelegationTheorem) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		return x.Actor != nil
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		return x.Operation != nil
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		return x.AssertTrue != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheorem) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		x.Actor = nil
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		x.Operation = nil
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		x.AssertTrue = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DelegationTheorem) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		value := x.Actor
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		value := x.Operation
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		value := x.AssertTrue
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheorem) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		x.Actor = value.Message().Interface().(*Actor)
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		x.Operation = value.Message().Interface().(*Operation)
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		x.AssertTrue = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheorem) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		if x.Actor == nil {
			x.Actor = new(Actor)
		}
		return protoreflect.ValueOfMessage(x.Actor.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		if x.Operation == nil {
			x.Operation = new(Operation)
		}
		return protoreflect.ValueOfMessage(x.Operation.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		panic(fmt.Errorf("field assert_true of message sourcenetwork.acp_core.DelegationTheorem is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DelegationTheorem) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheorem.actor":
		m := new(Actor)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.operation":
		m := new(Operation)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheorem.assert_true":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheorem does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DelegationTheorem) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.DelegationTheorem", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DelegationTheorem) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheorem) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DelegationTheorem) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DelegationTheorem) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DelegationTheorem)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Actor != nil {
			l = options.Size(x.Actor)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Operation != nil {
			l = options.Size(x.Operation)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssertTrue {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DelegationTheorem)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AssertTrue {
			i--
			if x.AssertTrue {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Operation != nil {
			encoded, err := options.Marshal(x.Operation)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Actor != nil {
			encoded, err := options.Marshal(x.Actor)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DelegationTheorem)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegationTheorem: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Actor == nil {
					x.Actor = &Actor{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Actor); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Operation == nil {
					x.Operation = &Operation{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Operation); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.AssertTrue = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PolicyTheorem_1_list)(nil)

type _PolicyTheorem_1_list struct {
	list *[]*AuthorizationTheorem
}

func (x *_PolicyTheorem_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheorem_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheorem_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AuthorizationTheorem)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheorem_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AuthorizationTheorem)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheorem_1_list) AppendMutable() protoreflect.Value {
	v := new(AuthorizationTheorem)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheorem_1_list) NewElement() protoreflect.Value {
	v := new(AuthorizationTheorem)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PolicyTheorem_2_list)(nil)

type _PolicyTheorem_2_list struct {
	list *[]*DelegationTheorem
}

func (x *_PolicyTheorem_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheorem_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheorem_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DelegationTheorem)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheorem_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DelegationTheorem)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheorem_2_list) AppendMutable() protoreflect.Value {
	v := new(DelegationTheorem)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheorem_2_list) NewElement() protoreflect.Value {
	v := new(DelegationTheorem)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PolicyTheorem_3_list)(nil)

type _PolicyTheorem_3_list struct {
	list *[]*ReachabilityTheorem
}

func (x *_PolicyTheorem_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheorem_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheorem_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ReachabilityTheorem)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheorem_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ReachabilityTheorem)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheorem_3_list) AppendMutable() protoreflect.Value {
	v := new(ReachabilityTheorem)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheorem_3_list) NewElement() protoreflect.Value {
	v := new(ReachabilityTheorem)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheorem_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PolicyTheorem                        protoreflect.MessageDescriptor
	fd_PolicyTheorem_authorization_theorems protoreflect.FieldDescriptor
	fd_PolicyTheorem_delegation_theorems    protoreflect.FieldDescriptor
	fd_PolicyTheorem_reachability_theorems  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_PolicyTheorem = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("PolicyTheorem")
	fd_PolicyTheorem_authorization_theorems = md_PolicyTheorem.Fields().ByName("authorization_theorems")
	fd_PolicyTheorem_delegation_theorems = md_PolicyTheorem.Fields().ByName("delegation_theorems")
	fd_PolicyTheorem_reachability_theorems = md_PolicyTheorem.Fields().ByName("reachability_theorems")
}

var _ protoreflect.Message = (*fastReflection_PolicyTheorem)(nil)

type fastReflection_PolicyTheorem PolicyTheorem

func (x *PolicyTheorem) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PolicyTheorem)(x)
}

func (x *PolicyTheorem) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PolicyTheorem_messageType fastReflection_PolicyTheorem_messageType
var _ protoreflect.MessageType = fastReflection_PolicyTheorem_messageType{}

type fastReflection_PolicyTheorem_messageType struct{}

func (x fastReflection_PolicyTheorem_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PolicyTheorem)(nil)
}
func (x fastReflection_PolicyTheorem_messageType) New() protoreflect.Message {
	return new(fastReflection_PolicyTheorem)
}
func (x fastReflection_PolicyTheorem_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PolicyTheorem
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PolicyTheorem) Descriptor() protoreflect.MessageDescriptor {
	return md_PolicyTheorem
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PolicyTheorem) Type() protoreflect.MessageType {
	return _fastReflection_PolicyTheorem_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PolicyTheorem) New() protoreflect.Message {
	return new(fastReflection_PolicyTheorem)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PolicyTheorem) Interface() protoreflect.ProtoMessage {
	return (*PolicyTheorem)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PolicyTheorem) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.AuthorizationTheorems) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheorem_1_list{list: &x.AuthorizationTheorems})
		if !f(fd_PolicyTheorem_authorization_theorems, value) {
			return
		}
	}
	if len(x.DelegationTheorems) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheorem_2_list{list: &x.DelegationTheorems})
		if !f(fd_PolicyTheorem_delegation_theorems, value) {
			return
		}
	}
	if len(x.ReachabilityTheorems) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheorem_3_list{list: &x.ReachabilityTheorems})
		if !f(fd_PolicyTheorem_reachability_theorems, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PolicyTheorem) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		return len(x.AuthorizationTheorems) != 0
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		return len(x.DelegationTheorems) != 0
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		return len(x.ReachabilityTheorems) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheorem) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		x.AuthorizationTheorems = nil
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		x.DelegationTheorems = nil
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		x.ReachabilityTheorems = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PolicyTheorem) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		if len(x.AuthorizationTheorems) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheorem_1_list{})
		}
		listValue := &_PolicyTheorem_1_list{list: &x.AuthorizationTheorems}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		if len(x.DelegationTheorems) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheorem_2_list{})
		}
		listValue := &_PolicyTheorem_2_list{list: &x.DelegationTheorems}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		if len(x.ReachabilityTheorems) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheorem_3_list{})
		}
		listValue := &_PolicyTheorem_3_list{list: &x.ReachabilityTheorems}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheorem) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		lv := value.List()
		clv := lv.(*_PolicyTheorem_1_list)
		x.AuthorizationTheorems = *clv.list
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		lv := value.List()
		clv := lv.(*_PolicyTheorem_2_list)
		x.DelegationTheorems = *clv.list
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		lv := value.List()
		clv := lv.(*_PolicyTheorem_3_list)
		x.ReachabilityTheorems = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheorem) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		if x.AuthorizationTheorems == nil {
			x.AuthorizationTheorems = []*AuthorizationTheorem{}
		}
		value := &_PolicyTheorem_1_list{list: &x.AuthorizationTheorems}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		if x.DelegationTheorems == nil {
			x.DelegationTheorems = []*DelegationTheorem{}
		}
		value := &_PolicyTheorem_2_list{list: &x.DelegationTheorems}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		if x.ReachabilityTheorems == nil {
			x.ReachabilityTheorems = []*ReachabilityTheorem{}
		}
		value := &_PolicyTheorem_3_list{list: &x.ReachabilityTheorems}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PolicyTheorem) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheorem.authorization_theorems":
		list := []*AuthorizationTheorem{}
		return protoreflect.ValueOfList(&_PolicyTheorem_1_list{list: &list})
	case "sourcenetwork.acp_core.PolicyTheorem.delegation_theorems":
		list := []*DelegationTheorem{}
		return protoreflect.ValueOfList(&_PolicyTheorem_2_list{list: &list})
	case "sourcenetwork.acp_core.PolicyTheorem.reachability_theorems":
		list := []*ReachabilityTheorem{}
		return protoreflect.ValueOfList(&_PolicyTheorem_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheorem"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheorem does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PolicyTheorem) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.PolicyTheorem", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PolicyTheorem) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheorem) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PolicyTheorem) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PolicyTheorem) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PolicyTheorem)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.AuthorizationTheorems) > 0 {
			for _, e := range x.AuthorizationTheorems {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.DelegationTheorems) > 0 {
			for _, e := range x.DelegationTheorems {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ReachabilityTheorems) > 0 {
			for _, e := range x.ReachabilityTheorems {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PolicyTheorem)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ReachabilityTheorems) > 0 {
			for iNdEx := len(x.ReachabilityTheorems) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ReachabilityTheorems[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.DelegationTheorems) > 0 {
			for iNdEx := len(x.DelegationTheorems) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DelegationTheorems[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.AuthorizationTheorems) > 0 {
			for iNdEx := len(x.AuthorizationTheorems) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AuthorizationTheorems[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PolicyTheorem)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PolicyTheorem: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PolicyTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheorems", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AuthorizationTheorems = append(x.AuthorizationTheorems, &AuthorizationTheorem{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AuthorizationTheorems[len(x.AuthorizationTheorems)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegationTheorems", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegationTheorems = append(x.DelegationTheorems, &DelegationTheorem{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegationTheorems[len(x.DelegationTheorems)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheorems", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReachabilityTheorems = append(x.ReachabilityTheorems, &ReachabilityTheorem{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReachabilityTheorems[len(x.ReachabilityTheorems)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Result         protoreflect.MessageDescriptor
	fd_Result_status  protoreflect.FieldDescriptor
	fd_Result_message protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_Result = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("Result")
	fd_Result_status = md_Result.Fields().ByName("status")
	fd_Result_message = md_Result.Fields().ByName("message")
}

var _ protoreflect.Message = (*fastReflection_Result)(nil)

type fastReflection_Result Result

func (x *Result) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Result)(x)
}

func (x *Result) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Result_messageType fastReflection_Result_messageType
var _ protoreflect.MessageType = fastReflection_Result_messageType{}

type fastReflection_Result_messageType struct{}

func (x fastReflection_Result_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Result)(nil)
}
func (x fastReflection_Result_messageType) New() protoreflect.Message {
	return new(fastReflection_Result)
}
func (x fastReflection_Result_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Result
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Result) Descriptor() protoreflect.MessageDescriptor {
	return md_Result
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Result) Type() protoreflect.MessageType {
	return _fastReflection_Result_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Result) New() protoreflect.Message {
	return new(fastReflection_Result)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Result) Interface() protoreflect.ProtoMessage {
	return (*Result)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Result) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Result_status, value) {
			return
		}
	}
	if x.Message != "" {
		value := protoreflect.ValueOfString(x.Message)
		if !f(fd_Result_message, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Result) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		return x.Status != 0
	case "sourcenetwork.acp_core.Result.message":
		return x.Message != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Result) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		x.Status = 0
	case "sourcenetwork.acp_core.Result.message":
		x.Message = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Result) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sourcenetwork.acp_core.Result.message":
		value := x.Message
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Result) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		x.Status = (ResultStatus)(value.Enum())
	case "sourcenetwork.acp_core.Result.message":
		x.Message = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Result) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		panic(fmt.Errorf("field status of message sourcenetwork.acp_core.Result is not mutable"))
	case "sourcenetwork.acp_core.Result.message":
		panic(fmt.Errorf("field message of message sourcenetwork.acp_core.Result is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Result) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.Result.status":
		return protoreflect.ValueOfEnum(0)
	case "sourcenetwork.acp_core.Result.message":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.Result"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.Result does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Result) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.Result", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Result) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Result) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Result) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Result) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Result)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Message)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Result)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Message) > 0 {
			i -= len(x.Message)
			copy(dAtA[i:], x.Message)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Message)))
			i--
			dAtA[i] = 0x12
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Result)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Result: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ResultStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Message = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AuthorizationTheoremResult         protoreflect.MessageDescriptor
	fd_AuthorizationTheoremResult_theorem protoreflect.FieldDescriptor
	fd_AuthorizationTheoremResult_result  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AuthorizationTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AuthorizationTheoremResult")
	fd_AuthorizationTheoremResult_theorem = md_AuthorizationTheoremResult.Fields().ByName("theorem")
	fd_AuthorizationTheoremResult_result = md_AuthorizationTheoremResult.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_AuthorizationTheoremResult)(nil)

type fastReflection_AuthorizationTheoremResult AuthorizationTheoremResult

func (x *AuthorizationTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AuthorizationTheoremResult)(x)
}

func (x *AuthorizationTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AuthorizationTheoremResult_messageType fastReflection_AuthorizationTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_AuthorizationTheoremResult_messageType{}

type fastReflection_AuthorizationTheoremResult_messageType struct{}

func (x fastReflection_AuthorizationTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AuthorizationTheoremResult)(nil)
}
func (x fastReflection_AuthorizationTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_AuthorizationTheoremResult)
}
func (x fastReflection_AuthorizationTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AuthorizationTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AuthorizationTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_AuthorizationTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AuthorizationTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_AuthorizationTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AuthorizationTheoremResult) New() protoreflect.Message {
	return new(fastReflection_AuthorizationTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AuthorizationTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*AuthorizationTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AuthorizationTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Theorem != nil {
		value := protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
		if !f(fd_AuthorizationTheoremResult_theorem, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_AuthorizationTheoremResult_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AuthorizationTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		return x.Theorem != nil
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		x.Theorem = nil
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AuthorizationTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		value := x.Theorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		x.Theorem = value.Message().Interface().(*AuthorizationTheorem)
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		x.Result = value.Message().Interface().(*Result)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		if x.Theorem == nil {
			x.Theorem = new(AuthorizationTheorem)
		}
		return protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		if x.Result == nil {
			x.Result = new(Result)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AuthorizationTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.theorem":
		m := new(AuthorizationTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AuthorizationTheoremResult.result":
		m := new(Result)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AuthorizationTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AuthorizationTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AuthorizationTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AuthorizationTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AuthorizationTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AuthorizationTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AuthorizationTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Theorem != nil {
			l = options.Size(x.Theorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AuthorizationTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Theorem != nil {
			encoded, err := options.Marshal(x.Theorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AuthorizationTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AuthorizationTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AuthorizationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Theorem == nil {
					x.Theorem = &AuthorizationTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Theorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &Result{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DelegationTheoremResult         protoreflect.MessageDescriptor
	fd_DelegationTheoremResult_theorem protoreflect.FieldDescriptor
	fd_DelegationTheoremResult_result  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_DelegationTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("DelegationTheoremResult")
	fd_DelegationTheoremResult_theorem = md_DelegationTheoremResult.Fields().ByName("theorem")
	fd_DelegationTheoremResult_result = md_DelegationTheoremResult.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_DelegationTheoremResult)(nil)

type fastReflection_DelegationTheoremResult DelegationTheoremResult

func (x *DelegationTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DelegationTheoremResult)(x)
}

func (x *DelegationTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DelegationTheoremResult_messageType fastReflection_DelegationTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_DelegationTheoremResult_messageType{}

type fastReflection_DelegationTheoremResult_messageType struct{}

func (x fastReflection_DelegationTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DelegationTheoremResult)(nil)
}
func (x fastReflection_DelegationTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_DelegationTheoremResult)
}
func (x fastReflection_DelegationTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegationTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DelegationTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegationTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DelegationTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_DelegationTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DelegationTheoremResult) New() protoreflect.Message {
	return new(fastReflection_DelegationTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DelegationTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*DelegationTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DelegationTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Theorem != nil {
		value := protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
		if !f(fd_DelegationTheoremResult_theorem, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_DelegationTheoremResult_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DelegationTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		return x.Theorem != nil
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		x.Theorem = nil
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DelegationTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		value := x.Theorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		x.Theorem = value.Message().Interface().(*DelegationTheorem)
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		x.Result = value.Message().Interface().(*Result)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		if x.Theorem == nil {
			x.Theorem = new(DelegationTheorem)
		}
		return protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		if x.Result == nil {
			x.Result = new(Result)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DelegationTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.DelegationTheoremResult.theorem":
		m := new(DelegationTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.DelegationTheoremResult.result":
		m := new(Result)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.DelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.DelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DelegationTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.DelegationTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DelegationTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegationTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DelegationTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DelegationTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DelegationTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Theorem != nil {
			l = options.Size(x.Theorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DelegationTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Theorem != nil {
			encoded, err := options.Marshal(x.Theorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DelegationTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegationTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Theorem == nil {
					x.Theorem = &DelegationTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Theorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &Result{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ReachabilityTheoremResult         protoreflect.MessageDescriptor
	fd_ReachabilityTheoremResult_theorem protoreflect.FieldDescriptor
	fd_ReachabilityTheoremResult_result  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_ReachabilityTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("ReachabilityTheoremResult")
	fd_ReachabilityTheoremResult_theorem = md_ReachabilityTheoremResult.Fields().ByName("theorem")
	fd_ReachabilityTheoremResult_result = md_ReachabilityTheoremResult.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_ReachabilityTheoremResult)(nil)

type fastReflection_ReachabilityTheoremResult ReachabilityTheoremResult

func (x *ReachabilityTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ReachabilityTheoremResult)(x)
}

func (x *ReachabilityTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ReachabilityTheoremResult_messageType fastReflection_ReachabilityTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_ReachabilityTheoremResult_messageType{}

type fastReflection_ReachabilityTheoremResult_messageType struct{}

func (x fastReflection_ReachabilityTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ReachabilityTheoremResult)(nil)
}
func (x fastReflection_ReachabilityTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_ReachabilityTheoremResult)
}
func (x fastReflection_ReachabilityTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ReachabilityTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ReachabilityTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_ReachabilityTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ReachabilityTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_ReachabilityTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ReachabilityTheoremResult) New() protoreflect.Message {
	return new(fastReflection_ReachabilityTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ReachabilityTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*ReachabilityTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ReachabilityTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Theorem != nil {
		value := protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
		if !f(fd_ReachabilityTheoremResult_theorem, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_ReachabilityTheoremResult_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ReachabilityTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		return x.Theorem != nil
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		x.Theorem = nil
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ReachabilityTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		value := x.Theorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		x.Theorem = value.Message().Interface().(*ReachabilityTheorem)
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		x.Result = value.Message().Interface().(*Result)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		if x.Theorem == nil {
			x.Theorem = new(ReachabilityTheorem)
		}
		return protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		if x.Result == nil {
			x.Result = new(Result)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ReachabilityTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.theorem":
		m := new(ReachabilityTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.ReachabilityTheoremResult.result":
		m := new(Result)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.ReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.ReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ReachabilityTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.ReachabilityTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ReachabilityTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ReachabilityTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ReachabilityTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ReachabilityTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ReachabilityTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Theorem != nil {
			l = options.Size(x.Theorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ReachabilityTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Theorem != nil {
			encoded, err := options.Marshal(x.Theorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ReachabilityTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ReachabilityTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ReachabilityTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Theorem == nil {
					x.Theorem = &ReachabilityTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Theorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &Result{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AnnotatedAuthorizationTheoremResult          protoreflect.MessageDescriptor
	fd_AnnotatedAuthorizationTheoremResult_result   protoreflect.FieldDescriptor
	fd_AnnotatedAuthorizationTheoremResult_interval protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AnnotatedAuthorizationTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AnnotatedAuthorizationTheoremResult")
	fd_AnnotatedAuthorizationTheoremResult_result = md_AnnotatedAuthorizationTheoremResult.Fields().ByName("result")
	fd_AnnotatedAuthorizationTheoremResult_interval = md_AnnotatedAuthorizationTheoremResult.Fields().ByName("interval")
}

var _ protoreflect.Message = (*fastReflection_AnnotatedAuthorizationTheoremResult)(nil)

type fastReflection_AnnotatedAuthorizationTheoremResult AnnotatedAuthorizationTheoremResult

func (x *AnnotatedAuthorizationTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AnnotatedAuthorizationTheoremResult)(x)
}

func (x *AnnotatedAuthorizationTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AnnotatedAuthorizationTheoremResult_messageType fastReflection_AnnotatedAuthorizationTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_AnnotatedAuthorizationTheoremResult_messageType{}

type fastReflection_AnnotatedAuthorizationTheoremResult_messageType struct{}

func (x fastReflection_AnnotatedAuthorizationTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AnnotatedAuthorizationTheoremResult)(nil)
}
func (x fastReflection_AnnotatedAuthorizationTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_AnnotatedAuthorizationTheoremResult)
}
func (x fastReflection_AnnotatedAuthorizationTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedAuthorizationTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedAuthorizationTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_AnnotatedAuthorizationTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) New() protoreflect.Message {
	return new(fastReflection_AnnotatedAuthorizationTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*AnnotatedAuthorizationTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_AnnotatedAuthorizationTheoremResult_result, value) {
			return
		}
	}
	if x.Interval != nil {
		value := protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
		if !f(fd_AnnotatedAuthorizationTheoremResult_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		return x.Result != nil
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		return x.Interval != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		x.Result = nil
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		x.Interval = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		value := x.Interval
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		x.Result = value.Message().Interface().(*AuthorizationTheoremResult)
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		x.Interval = value.Message().Interface().(*BufferInterval)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		if x.Result == nil {
			x.Result = new(AuthorizationTheoremResult)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		if x.Interval == nil {
			x.Interval = new(BufferInterval)
		}
		return protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result":
		m := new(AuthorizationTheoremResult)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval":
		m := new(BufferInterval)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AnnotatedAuthorizationTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AnnotatedAuthorizationTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Interval != nil {
			l = options.Size(x.Interval)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedAuthorizationTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Interval != nil {
			encoded, err := options.Marshal(x.Interval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedAuthorizationTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedAuthorizationTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedAuthorizationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &AuthorizationTheoremResult{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Interval == nil {
					x.Interval = &BufferInterval{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Interval); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AnnotatedDelegationTheoremResult          protoreflect.MessageDescriptor
	fd_AnnotatedDelegationTheoremResult_result   protoreflect.FieldDescriptor
	fd_AnnotatedDelegationTheoremResult_interval protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AnnotatedDelegationTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AnnotatedDelegationTheoremResult")
	fd_AnnotatedDelegationTheoremResult_result = md_AnnotatedDelegationTheoremResult.Fields().ByName("result")
	fd_AnnotatedDelegationTheoremResult_interval = md_AnnotatedDelegationTheoremResult.Fields().ByName("interval")
}

var _ protoreflect.Message = (*fastReflection_AnnotatedDelegationTheoremResult)(nil)

type fastReflection_AnnotatedDelegationTheoremResult AnnotatedDelegationTheoremResult

func (x *AnnotatedDelegationTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AnnotatedDelegationTheoremResult)(x)
}

func (x *AnnotatedDelegationTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AnnotatedDelegationTheoremResult_messageType fastReflection_AnnotatedDelegationTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_AnnotatedDelegationTheoremResult_messageType{}

type fastReflection_AnnotatedDelegationTheoremResult_messageType struct{}

func (x fastReflection_AnnotatedDelegationTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AnnotatedDelegationTheoremResult)(nil)
}
func (x fastReflection_AnnotatedDelegationTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_AnnotatedDelegationTheoremResult)
}
func (x fastReflection_AnnotatedDelegationTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedDelegationTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedDelegationTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_AnnotatedDelegationTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AnnotatedDelegationTheoremResult) New() protoreflect.Message {
	return new(fastReflection_AnnotatedDelegationTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*AnnotatedDelegationTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_AnnotatedDelegationTheoremResult_result, value) {
			return
		}
	}
	if x.Interval != nil {
		value := protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
		if !f(fd_AnnotatedDelegationTheoremResult_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		return x.Result != nil
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		return x.Interval != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		x.Result = nil
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		x.Interval = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		value := x.Interval
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		x.Result = value.Message().Interface().(*DelegationTheoremResult)
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		x.Interval = value.Message().Interface().(*BufferInterval)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedDelegationTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		if x.Result == nil {
			x.Result = new(DelegationTheoremResult)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		if x.Interval == nil {
			x.Interval = new(BufferInterval)
		}
		return protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AnnotatedDelegationTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result":
		m := new(DelegationTheoremResult)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval":
		m := new(BufferInterval)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedDelegationTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AnnotatedDelegationTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AnnotatedDelegationTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AnnotatedDelegationTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedDelegationTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AnnotatedDelegationTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AnnotatedDelegationTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AnnotatedDelegationTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Interval != nil {
			l = options.Size(x.Interval)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedDelegationTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Interval != nil {
			encoded, err := options.Marshal(x.Interval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedDelegationTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedDelegationTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedDelegationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &DelegationTheoremResult{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Interval == nil {
					x.Interval = &BufferInterval{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Interval); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AnnotatedReachabilityTheoremResult          protoreflect.MessageDescriptor
	fd_AnnotatedReachabilityTheoremResult_result   protoreflect.FieldDescriptor
	fd_AnnotatedReachabilityTheoremResult_interval protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AnnotatedReachabilityTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AnnotatedReachabilityTheoremResult")
	fd_AnnotatedReachabilityTheoremResult_result = md_AnnotatedReachabilityTheoremResult.Fields().ByName("result")
	fd_AnnotatedReachabilityTheoremResult_interval = md_AnnotatedReachabilityTheoremResult.Fields().ByName("interval")
}

var _ protoreflect.Message = (*fastReflection_AnnotatedReachabilityTheoremResult)(nil)

type fastReflection_AnnotatedReachabilityTheoremResult AnnotatedReachabilityTheoremResult

func (x *AnnotatedReachabilityTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AnnotatedReachabilityTheoremResult)(x)
}

func (x *AnnotatedReachabilityTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AnnotatedReachabilityTheoremResult_messageType fastReflection_AnnotatedReachabilityTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_AnnotatedReachabilityTheoremResult_messageType{}

type fastReflection_AnnotatedReachabilityTheoremResult_messageType struct{}

func (x fastReflection_AnnotatedReachabilityTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AnnotatedReachabilityTheoremResult)(nil)
}
func (x fastReflection_AnnotatedReachabilityTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_AnnotatedReachabilityTheoremResult)
}
func (x fastReflection_AnnotatedReachabilityTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedReachabilityTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedReachabilityTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_AnnotatedReachabilityTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) New() protoreflect.Message {
	return new(fastReflection_AnnotatedReachabilityTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*AnnotatedReachabilityTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_AnnotatedReachabilityTheoremResult_result, value) {
			return
		}
	}
	if x.Interval != nil {
		value := protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
		if !f(fd_AnnotatedReachabilityTheoremResult_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		return x.Result != nil
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		return x.Interval != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		x.Result = nil
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		x.Interval = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		value := x.Interval
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		x.Result = value.Message().Interface().(*ReachabilityTheoremResult)
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		x.Interval = value.Message().Interface().(*BufferInterval)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		if x.Result == nil {
			x.Result = new(ReachabilityTheoremResult)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		if x.Interval == nil {
			x.Interval = new(BufferInterval)
		}
		return protoreflect.ValueOfMessage(x.Interval.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result":
		m := new(ReachabilityTheoremResult)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval":
		m := new(BufferInterval)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AnnotatedReachabilityTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AnnotatedReachabilityTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Interval != nil {
			l = options.Size(x.Interval)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedReachabilityTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Interval != nil {
			encoded, err := options.Marshal(x.Interval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedReachabilityTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedReachabilityTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedReachabilityTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &ReachabilityTheoremResult{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Interval == nil {
					x.Interval = &BufferInterval{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Interval); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PolicyTheoremResult_2_list)(nil)

type _PolicyTheoremResult_2_list struct {
	list *[]*AuthorizationTheoremResult
}

func (x *_PolicyTheoremResult_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheoremResult_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheoremResult_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AuthorizationTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheoremResult_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AuthorizationTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheoremResult_2_list) AppendMutable() protoreflect.Value {
	v := new(AuthorizationTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheoremResult_2_list) NewElement() protoreflect.Value {
	v := new(AuthorizationTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PolicyTheoremResult_3_list)(nil)

type _PolicyTheoremResult_3_list struct {
	list *[]*DelegationTheoremResult
}

func (x *_PolicyTheoremResult_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheoremResult_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheoremResult_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DelegationTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheoremResult_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DelegationTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheoremResult_3_list) AppendMutable() protoreflect.Value {
	v := new(DelegationTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheoremResult_3_list) NewElement() protoreflect.Value {
	v := new(DelegationTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PolicyTheoremResult_4_list)(nil)

type _PolicyTheoremResult_4_list struct {
	list *[]*ReachabilityTheoremResult
}

func (x *_PolicyTheoremResult_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PolicyTheoremResult_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PolicyTheoremResult_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ReachabilityTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_PolicyTheoremResult_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ReachabilityTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PolicyTheoremResult_4_list) AppendMutable() protoreflect.Value {
	v := new(ReachabilityTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PolicyTheoremResult_4_list) NewElement() protoreflect.Value {
	v := new(ReachabilityTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PolicyTheoremResult_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PolicyTheoremResult                               protoreflect.MessageDescriptor
	fd_PolicyTheoremResult_theorem                       protoreflect.FieldDescriptor
	fd_PolicyTheoremResult_authorization_theorems_result protoreflect.FieldDescriptor
	fd_PolicyTheoremResult_delegation_theorems_result    protoreflect.FieldDescriptor
	fd_PolicyTheoremResult_reachability_theorems_result  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_PolicyTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("PolicyTheoremResult")
	fd_PolicyTheoremResult_theorem = md_PolicyTheoremResult.Fields().ByName("theorem")
	fd_PolicyTheoremResult_authorization_theorems_result = md_PolicyTheoremResult.Fields().ByName("authorization_theorems_result")
	fd_PolicyTheoremResult_delegation_theorems_result = md_PolicyTheoremResult.Fields().ByName("delegation_theorems_result")
	fd_PolicyTheoremResult_reachability_theorems_result = md_PolicyTheoremResult.Fields().ByName("reachability_theorems_result")
}

var _ protoreflect.Message = (*fastReflection_PolicyTheoremResult)(nil)

type fastReflection_PolicyTheoremResult PolicyTheoremResult

func (x *PolicyTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PolicyTheoremResult)(x)
}

func (x *PolicyTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PolicyTheoremResult_messageType fastReflection_PolicyTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_PolicyTheoremResult_messageType{}

type fastReflection_PolicyTheoremResult_messageType struct{}

func (x fastReflection_PolicyTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PolicyTheoremResult)(nil)
}
func (x fastReflection_PolicyTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_PolicyTheoremResult)
}
func (x fastReflection_PolicyTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PolicyTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PolicyTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_PolicyTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PolicyTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_PolicyTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PolicyTheoremResult) New() protoreflect.Message {
	return new(fastReflection_PolicyTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PolicyTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*PolicyTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PolicyTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Theorem != nil {
		value := protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
		if !f(fd_PolicyTheoremResult_theorem, value) {
			return
		}
	}
	if len(x.AuthorizationTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult})
		if !f(fd_PolicyTheoremResult_authorization_theorems_result, value) {
			return
		}
	}
	if len(x.DelegationTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult})
		if !f(fd_PolicyTheoremResult_delegation_theorems_result, value) {
			return
		}
	}
	if len(x.ReachabilityTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_PolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult})
		if !f(fd_PolicyTheoremResult_reachability_theorems_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PolicyTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		return x.Theorem != nil
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		return len(x.AuthorizationTheoremsResult) != 0
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		return len(x.DelegationTheoremsResult) != 0
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		return len(x.ReachabilityTheoremsResult) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		x.Theorem = nil
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		x.AuthorizationTheoremsResult = nil
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		x.DelegationTheoremsResult = nil
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		x.ReachabilityTheoremsResult = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PolicyTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		value := x.Theorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		if len(x.AuthorizationTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheoremResult_2_list{})
		}
		listValue := &_PolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		if len(x.DelegationTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheoremResult_3_list{})
		}
		listValue := &_PolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		if len(x.ReachabilityTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_PolicyTheoremResult_4_list{})
		}
		listValue := &_PolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		x.Theorem = value.Message().Interface().(*PolicyTheorem)
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		lv := value.List()
		clv := lv.(*_PolicyTheoremResult_2_list)
		x.AuthorizationTheoremsResult = *clv.list
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		lv := value.List()
		clv := lv.(*_PolicyTheoremResult_3_list)
		x.DelegationTheoremsResult = *clv.list
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		lv := value.List()
		clv := lv.(*_PolicyTheoremResult_4_list)
		x.ReachabilityTheoremsResult = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		if x.Theorem == nil {
			x.Theorem = new(PolicyTheorem)
		}
		return protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		if x.AuthorizationTheoremsResult == nil {
			x.AuthorizationTheoremsResult = []*AuthorizationTheoremResult{}
		}
		value := &_PolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		if x.DelegationTheoremsResult == nil {
			x.DelegationTheoremsResult = []*DelegationTheoremResult{}
		}
		value := &_PolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		if x.ReachabilityTheoremsResult == nil {
			x.ReachabilityTheoremsResult = []*ReachabilityTheoremResult{}
		}
		value := &_PolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PolicyTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.PolicyTheoremResult.theorem":
		m := new(PolicyTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result":
		list := []*AuthorizationTheoremResult{}
		return protoreflect.ValueOfList(&_PolicyTheoremResult_2_list{list: &list})
	case "sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result":
		list := []*DelegationTheoremResult{}
		return protoreflect.ValueOfList(&_PolicyTheoremResult_3_list{list: &list})
	case "sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result":
		list := []*ReachabilityTheoremResult{}
		return protoreflect.ValueOfList(&_PolicyTheoremResult_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.PolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.PolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PolicyTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.PolicyTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PolicyTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PolicyTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PolicyTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PolicyTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PolicyTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Theorem != nil {
			l = options.Size(x.Theorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AuthorizationTheoremsResult) > 0 {
			for _, e := range x.AuthorizationTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.DelegationTheoremsResult) > 0 {
			for _, e := range x.DelegationTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ReachabilityTheoremsResult) > 0 {
			for _, e := range x.ReachabilityTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PolicyTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ReachabilityTheoremsResult) > 0 {
			for iNdEx := len(x.ReachabilityTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ReachabilityTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.DelegationTheoremsResult) > 0 {
			for iNdEx := len(x.DelegationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DelegationTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.AuthorizationTheoremsResult) > 0 {
			for iNdEx := len(x.AuthorizationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AuthorizationTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Theorem != nil {
			encoded, err := options.Marshal(x.Theorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PolicyTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PolicyTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PolicyTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Theorem == nil {
					x.Theorem = &PolicyTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Theorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AuthorizationTheoremsResult = append(x.AuthorizationTheoremsResult, &AuthorizationTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AuthorizationTheoremsResult[len(x.AuthorizationTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegationTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegationTheoremsResult = append(x.DelegationTheoremsResult, &DelegationTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegationTheoremsResult[len(x.DelegationTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReachabilityTheoremsResult = append(x.ReachabilityTheoremsResult, &ReachabilityTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReachabilityTheoremsResult[len(x.ReachabilityTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AnnotatedPolicyTheoremResult_2_list)(nil)

type _AnnotatedPolicyTheoremResult_2_list struct {
	list *[]*AnnotatedAuthorizationTheoremResult
}

func (x *_AnnotatedPolicyTheoremResult_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AnnotatedPolicyTheoremResult_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedAuthorizationTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_AnnotatedPolicyTheoremResult_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedAuthorizationTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AnnotatedPolicyTheoremResult_2_list) AppendMutable() protoreflect.Value {
	v := new(AnnotatedAuthorizationTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AnnotatedPolicyTheoremResult_2_list) NewElement() protoreflect.Value {
	v := new(AnnotatedAuthorizationTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AnnotatedPolicyTheoremResult_3_list)(nil)

type _AnnotatedPolicyTheoremResult_3_list struct {
	list *[]*AnnotatedDelegationTheoremResult
}

func (x *_AnnotatedPolicyTheoremResult_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AnnotatedPolicyTheoremResult_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedDelegationTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_AnnotatedPolicyTheoremResult_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedDelegationTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AnnotatedPolicyTheoremResult_3_list) AppendMutable() protoreflect.Value {
	v := new(AnnotatedDelegationTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AnnotatedPolicyTheoremResult_3_list) NewElement() protoreflect.Value {
	v := new(AnnotatedDelegationTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AnnotatedPolicyTheoremResult_4_list)(nil)

type _AnnotatedPolicyTheoremResult_4_list struct {
	list *[]*AnnotatedReachabilityTheoremResult
}

func (x *_AnnotatedPolicyTheoremResult_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AnnotatedPolicyTheoremResult_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedReachabilityTheoremResult)
	(*x.list)[i] = concreteValue
}

func (x *_AnnotatedPolicyTheoremResult_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AnnotatedReachabilityTheoremResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AnnotatedPolicyTheoremResult_4_list) AppendMutable() protoreflect.Value {
	v := new(AnnotatedReachabilityTheoremResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AnnotatedPolicyTheoremResult_4_list) NewElement() protoreflect.Value {
	v := new(AnnotatedReachabilityTheoremResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AnnotatedPolicyTheoremResult_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AnnotatedPolicyTheoremResult                               protoreflect.MessageDescriptor
	fd_AnnotatedPolicyTheoremResult_theorem                       protoreflect.FieldDescriptor
	fd_AnnotatedPolicyTheoremResult_authorization_theorems_result protoreflect.FieldDescriptor
	fd_AnnotatedPolicyTheoremResult_delegation_theorems_result    protoreflect.FieldDescriptor
	fd_AnnotatedPolicyTheoremResult_reachability_theorems_result  protoreflect.FieldDescriptor
)

func init() {
	file_sourcenetwork_acp_core_theorem_proto_init()
	md_AnnotatedPolicyTheoremResult = File_sourcenetwork_acp_core_theorem_proto.Messages().ByName("AnnotatedPolicyTheoremResult")
	fd_AnnotatedPolicyTheoremResult_theorem = md_AnnotatedPolicyTheoremResult.Fields().ByName("theorem")
	fd_AnnotatedPolicyTheoremResult_authorization_theorems_result = md_AnnotatedPolicyTheoremResult.Fields().ByName("authorization_theorems_result")
	fd_AnnotatedPolicyTheoremResult_delegation_theorems_result = md_AnnotatedPolicyTheoremResult.Fields().ByName("delegation_theorems_result")
	fd_AnnotatedPolicyTheoremResult_reachability_theorems_result = md_AnnotatedPolicyTheoremResult.Fields().ByName("reachability_theorems_result")
}

var _ protoreflect.Message = (*fastReflection_AnnotatedPolicyTheoremResult)(nil)

type fastReflection_AnnotatedPolicyTheoremResult AnnotatedPolicyTheoremResult

func (x *AnnotatedPolicyTheoremResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AnnotatedPolicyTheoremResult)(x)
}

func (x *AnnotatedPolicyTheoremResult) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AnnotatedPolicyTheoremResult_messageType fastReflection_AnnotatedPolicyTheoremResult_messageType
var _ protoreflect.MessageType = fastReflection_AnnotatedPolicyTheoremResult_messageType{}

type fastReflection_AnnotatedPolicyTheoremResult_messageType struct{}

func (x fastReflection_AnnotatedPolicyTheoremResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AnnotatedPolicyTheoremResult)(nil)
}
func (x fastReflection_AnnotatedPolicyTheoremResult_messageType) New() protoreflect.Message {
	return new(fastReflection_AnnotatedPolicyTheoremResult)
}
func (x fastReflection_AnnotatedPolicyTheoremResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedPolicyTheoremResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Descriptor() protoreflect.MessageDescriptor {
	return md_AnnotatedPolicyTheoremResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Type() protoreflect.MessageType {
	return _fastReflection_AnnotatedPolicyTheoremResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AnnotatedPolicyTheoremResult) New() protoreflect.Message {
	return new(fastReflection_AnnotatedPolicyTheoremResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Interface() protoreflect.ProtoMessage {
	return (*AnnotatedPolicyTheoremResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Theorem != nil {
		value := protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
		if !f(fd_AnnotatedPolicyTheoremResult_theorem, value) {
			return
		}
	}
	if len(x.AuthorizationTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult})
		if !f(fd_AnnotatedPolicyTheoremResult_authorization_theorems_result, value) {
			return
		}
	}
	if len(x.DelegationTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult})
		if !f(fd_AnnotatedPolicyTheoremResult_delegation_theorems_result, value) {
			return
		}
	}
	if len(x.ReachabilityTheoremsResult) != 0 {
		value := protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult})
		if !f(fd_AnnotatedPolicyTheoremResult_reachability_theorems_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		return x.Theorem != nil
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		return len(x.AuthorizationTheoremsResult) != 0
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		return len(x.DelegationTheoremsResult) != 0
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		return len(x.ReachabilityTheoremsResult) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		x.Theorem = nil
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		x.AuthorizationTheoremsResult = nil
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		x.DelegationTheoremsResult = nil
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		x.ReachabilityTheoremsResult = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		value := x.Theorem
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		if len(x.AuthorizationTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_2_list{})
		}
		listValue := &_AnnotatedPolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		if len(x.DelegationTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_3_list{})
		}
		listValue := &_AnnotatedPolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		if len(x.ReachabilityTheoremsResult) == 0 {
			return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_4_list{})
		}
		listValue := &_AnnotatedPolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		x.Theorem = value.Message().Interface().(*PolicyTheorem)
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		lv := value.List()
		clv := lv.(*_AnnotatedPolicyTheoremResult_2_list)
		x.AuthorizationTheoremsResult = *clv.list
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		lv := value.List()
		clv := lv.(*_AnnotatedPolicyTheoremResult_3_list)
		x.DelegationTheoremsResult = *clv.list
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		lv := value.List()
		clv := lv.(*_AnnotatedPolicyTheoremResult_4_list)
		x.ReachabilityTheoremsResult = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedPolicyTheoremResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		if x.Theorem == nil {
			x.Theorem = new(PolicyTheorem)
		}
		return protoreflect.ValueOfMessage(x.Theorem.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		if x.AuthorizationTheoremsResult == nil {
			x.AuthorizationTheoremsResult = []*AnnotatedAuthorizationTheoremResult{}
		}
		value := &_AnnotatedPolicyTheoremResult_2_list{list: &x.AuthorizationTheoremsResult}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		if x.DelegationTheoremsResult == nil {
			x.DelegationTheoremsResult = []*AnnotatedDelegationTheoremResult{}
		}
		value := &_AnnotatedPolicyTheoremResult_3_list{list: &x.DelegationTheoremsResult}
		return protoreflect.ValueOfList(value)
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		if x.ReachabilityTheoremsResult == nil {
			x.ReachabilityTheoremsResult = []*AnnotatedReachabilityTheoremResult{}
		}
		value := &_AnnotatedPolicyTheoremResult_4_list{list: &x.ReachabilityTheoremsResult}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AnnotatedPolicyTheoremResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem":
		m := new(PolicyTheorem)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result":
		list := []*AnnotatedAuthorizationTheoremResult{}
		return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_2_list{list: &list})
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result":
		list := []*AnnotatedDelegationTheoremResult{}
		return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_3_list{list: &list})
	case "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result":
		list := []*AnnotatedReachabilityTheoremResult{}
		return protoreflect.ValueOfList(&_AnnotatedPolicyTheoremResult_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult"))
		}
		panic(fmt.Errorf("message sourcenetwork.acp_core.AnnotatedPolicyTheoremResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AnnotatedPolicyTheoremResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcenetwork.acp_core.AnnotatedPolicyTheoremResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AnnotatedPolicyTheoremResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AnnotatedPolicyTheoremResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AnnotatedPolicyTheoremResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AnnotatedPolicyTheoremResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AnnotatedPolicyTheoremResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Theorem != nil {
			l = options.Size(x.Theorem)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AuthorizationTheoremsResult) > 0 {
			for _, e := range x.AuthorizationTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.DelegationTheoremsResult) > 0 {
			for _, e := range x.DelegationTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ReachabilityTheoremsResult) > 0 {
			for _, e := range x.ReachabilityTheoremsResult {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedPolicyTheoremResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ReachabilityTheoremsResult) > 0 {
			for iNdEx := len(x.ReachabilityTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ReachabilityTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.DelegationTheoremsResult) > 0 {
			for iNdEx := len(x.DelegationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DelegationTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.AuthorizationTheoremsResult) > 0 {
			for iNdEx := len(x.AuthorizationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AuthorizationTheoremsResult[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Theorem != nil {
			encoded, err := options.Marshal(x.Theorem)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AnnotatedPolicyTheoremResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedPolicyTheoremResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AnnotatedPolicyTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Theorem == nil {
					x.Theorem = &PolicyTheorem{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Theorem); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AuthorizationTheoremsResult = append(x.AuthorizationTheoremsResult, &AnnotatedAuthorizationTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AuthorizationTheoremsResult[len(x.AuthorizationTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegationTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegationTheoremsResult = append(x.DelegationTheoremsResult, &AnnotatedDelegationTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegationTheoremsResult[len(x.DelegationTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheoremsResult", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReachabilityTheoremsResult = append(x.ReachabilityTheoremsResult, &AnnotatedReachabilityTheoremResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReachabilityTheoremsResult[len(x.ReachabilityTheoremsResult)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sourcenetwork/acp_core/theorem.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResultStatus models the possible results from executing a Theorem
type ResultStatus int32

const (
	ResultStatus_Reject ResultStatus = 0
	ResultStatus_Accept ResultStatus = 1
	ResultStatus_Error  ResultStatus = 2
)

// Enum value maps for ResultStatus.
var (
	ResultStatus_name = map[int32]string{
		0: "Reject",
		1: "Accept",
		2: "Error",
	}
	ResultStatus_value = map[string]int32{
		"Reject": 0,
		"Accept": 1,
		"Error":  2,
	}
)

func (x ResultStatus) Enum() *ResultStatus {
	p := new(ResultStatus)
	*p = x
	return p
}

func (x ResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sourcenetwork_acp_core_theorem_proto_enumTypes[0].Descriptor()
}

func (ResultStatus) Type() protoreflect.EnumType {
	return &file_sourcenetwork_acp_core_theorem_proto_enumTypes[0]
}

func (x ResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultStatus.Descriptor instead.
func (ResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{0}
}

// AuthorizationTheorem states that the given AccessRequest request is valid (or not) in the context of a certain Policy
type AuthorizationTheorem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Actor      *Actor     `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (x *AuthorizationTheorem) Reset() {
	*x = AuthorizationTheorem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationTheorem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationTheorem) ProtoMessage() {}

// Deprecated: Use AuthorizationTheorem.ProtoReflect.Descriptor instead.
func (*AuthorizationTheorem) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizationTheorem) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *AuthorizationTheorem) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AuthorizationTheorem) GetAssertTrue() bool {
	if x != nil {
		return x.AssertTrue
	}
	return false
}

type ReachabilityTheorem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor      *Actor  `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  string  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Object     *Object `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	AssertTrue bool    `protobuf:"varint,4,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (x *ReachabilityTheorem) Reset() {
	*x = ReachabilityTheorem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReachabilityTheorem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReachabilityTheorem) ProtoMessage() {}

// Deprecated: Use ReachabilityTheorem.ProtoReflect.Descriptor instead.
func (*ReachabilityTheorem) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{1}
}

func (x *ReachabilityTheorem) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ReachabilityTheorem) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *ReachabilityTheorem) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ReachabilityTheorem) GetAssertTrue() bool {
	if x != nil {
		return x.AssertTrue
	}
	return false
}

// DelegationTheorem models a statement declaring that actor can create and delete relationships
// with `relation` for the given `object`
type DelegationTheorem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor      *Actor     `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  *Operation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (x *DelegationTheorem) Reset() {
	*x = DelegationTheorem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationTheorem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationTheorem) ProtoMessage() {}

// Deprecated: Use DelegationTheorem.ProtoReflect.Descriptor instead.
func (*DelegationTheorem) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{2}
}

func (x *DelegationTheorem) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DelegationTheorem) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DelegationTheorem) GetAssertTrue() bool {
	if x != nil {
		return x.AssertTrue
	}
	return false
}

// PolicyTheorem models a set of theorems about a Policy
type PolicyTheorem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationTheorems []*AuthorizationTheorem `protobuf:"bytes,1,rep,name=authorization_theorems,json=authorizationTheorems,proto3" json:"authorization_theorems,omitempty"`
	DelegationTheorems    []*DelegationTheorem    `protobuf:"bytes,2,rep,name=delegation_theorems,json=delegationTheorems,proto3" json:"delegation_theorems,omitempty"`
	ReachabilityTheorems  []*ReachabilityTheorem  `protobuf:"bytes,3,rep,name=reachability_theorems,json=reachabilityTheorems,proto3" json:"reachability_theorems,omitempty"`
}

func (x *PolicyTheorem) Reset() {
	*x = PolicyTheorem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyTheorem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTheorem) ProtoMessage() {}

// Deprecated: Use PolicyTheorem.ProtoReflect.Descriptor instead.
func (*PolicyTheorem) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyTheorem) GetAuthorizationTheorems() []*AuthorizationTheorem {
	if x != nil {
		return x.AuthorizationTheorems
	}
	return nil
}

func (x *PolicyTheorem) GetDelegationTheorems() []*DelegationTheorem {
	if x != nil {
		return x.DelegationTheorems
	}
	return nil
}

func (x *PolicyTheorem) GetReachabilityTheorems() []*ReachabilityTheorem {
	if x != nil {
		return x.ReachabilityTheorems
	}
	return nil
}

// Result models the result of evaluating a theorem
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status indicates whether the theorem was accepted, rejected or an error happened
	Status ResultStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sourcenetwork.acp_core.ResultStatus" json:"status,omitempty"`
	// Message explains the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{4}
}

func (x *Result) GetStatus() ResultStatus {
	if x != nil {
		return x.Status
	}
	return ResultStatus_Reject
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AuthorizationTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theorem *AuthorizationTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AuthorizationTheoremResult) Reset() {
	*x = AuthorizationTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationTheoremResult) ProtoMessage() {}

// Deprecated: Use AuthorizationTheoremResult.ProtoReflect.Descriptor instead.
func (*AuthorizationTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{5}
}

func (x *AuthorizationTheoremResult) GetTheorem() *AuthorizationTheorem {
	if x != nil {
		return x.Theorem
	}
	return nil
}

func (x *AuthorizationTheoremResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type DelegationTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theorem *DelegationTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result            `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelegationTheoremResult) Reset() {
	*x = DelegationTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationTheoremResult) ProtoMessage() {}

// Deprecated: Use DelegationTheoremResult.ProtoReflect.Descriptor instead.
func (*DelegationTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{6}
}

func (x *DelegationTheoremResult) GetTheorem() *DelegationTheorem {
	if x != nil {
		return x.Theorem
	}
	return nil
}

func (x *DelegationTheoremResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReachabilityTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theorem *ReachabilityTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result              `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ReachabilityTheoremResult) Reset() {
	*x = ReachabilityTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReachabilityTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReachabilityTheoremResult) ProtoMessage() {}

// Deprecated: Use ReachabilityTheoremResult.ProtoReflect.Descriptor instead.
func (*ReachabilityTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{7}
}

func (x *ReachabilityTheoremResult) GetTheorem() *ReachabilityTheorem {
	if x != nil {
		return x.Theorem
	}
	return nil
}

func (x *ReachabilityTheoremResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AnnotatedAuthorizationTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *AuthorizationTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval             `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *AnnotatedAuthorizationTheoremResult) Reset() {
	*x = AnnotatedAuthorizationTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedAuthorizationTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedAuthorizationTheoremResult) ProtoMessage() {}

// Deprecated: Use AnnotatedAuthorizationTheoremResult.ProtoReflect.Descriptor instead.
func (*AnnotatedAuthorizationTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{8}
}

func (x *AnnotatedAuthorizationTheoremResult) GetResult() *AuthorizationTheoremResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AnnotatedAuthorizationTheoremResult) GetInterval() *BufferInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

type AnnotatedDelegationTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *DelegationTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval          `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *AnnotatedDelegationTheoremResult) Reset() {
	*x = AnnotatedDelegationTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedDelegationTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedDelegationTheoremResult) ProtoMessage() {}

// Deprecated: Use AnnotatedDelegationTheoremResult.ProtoReflect.Descriptor instead.
func (*AnnotatedDelegationTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotatedDelegationTheoremResult) GetResult() *DelegationTheoremResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AnnotatedDelegationTheoremResult) GetInterval() *BufferInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

type AnnotatedReachabilityTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *ReachabilityTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval            `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *AnnotatedReachabilityTheoremResult) Reset() {
	*x = AnnotatedReachabilityTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedReachabilityTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedReachabilityTheoremResult) ProtoMessage() {}

// Deprecated: Use AnnotatedReachabilityTheoremResult.ProtoReflect.Descriptor instead.
func (*AnnotatedReachabilityTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{10}
}

func (x *AnnotatedReachabilityTheoremResult) GetResult() *ReachabilityTheoremResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AnnotatedReachabilityTheoremResult) GetInterval() *BufferInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

type PolicyTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theorem                     *PolicyTheorem                `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	AuthorizationTheoremsResult []*AuthorizationTheoremResult `protobuf:"bytes,2,rep,name=authorization_theorems_result,json=authorizationTheoremsResult,proto3" json:"authorization_theorems_result,omitempty"`
	DelegationTheoremsResult    []*DelegationTheoremResult    `protobuf:"bytes,3,rep,name=delegation_theorems_result,json=delegationTheoremsResult,proto3" json:"delegation_theorems_result,omitempty"`
	ReachabilityTheoremsResult  []*ReachabilityTheoremResult  `protobuf:"bytes,4,rep,name=reachability_theorems_result,json=reachabilityTheoremsResult,proto3" json:"reachability_theorems_result,omitempty"`
}

func (x *PolicyTheoremResult) Reset() {
	*x = PolicyTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTheoremResult) ProtoMessage() {}

// Deprecated: Use PolicyTheoremResult.ProtoReflect.Descriptor instead.
func (*PolicyTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{11}
}

func (x *PolicyTheoremResult) GetTheorem() *PolicyTheorem {
	if x != nil {
		return x.Theorem
	}
	return nil
}

func (x *PolicyTheoremResult) GetAuthorizationTheoremsResult() []*AuthorizationTheoremResult {
	if x != nil {
		return x.AuthorizationTheoremsResult
	}
	return nil
}

func (x *PolicyTheoremResult) GetDelegationTheoremsResult() []*DelegationTheoremResult {
	if x != nil {
		return x.DelegationTheoremsResult
	}
	return nil
}

func (x *PolicyTheoremResult) GetReachabilityTheoremsResult() []*ReachabilityTheoremResult {
	if x != nil {
		return x.ReachabilityTheoremsResult
	}
	return nil
}

type AnnotatedPolicyTheoremResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theorem                     *PolicyTheorem                         `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	AuthorizationTheoremsResult []*AnnotatedAuthorizationTheoremResult `protobuf:"bytes,2,rep,name=authorization_theorems_result,json=authorizationTheoremsResult,proto3" json:"authorization_theorems_result,omitempty"`
	DelegationTheoremsResult    []*AnnotatedDelegationTheoremResult    `protobuf:"bytes,3,rep,name=delegation_theorems_result,json=delegationTheoremsResult,proto3" json:"delegation_theorems_result,omitempty"`
	ReachabilityTheoremsResult  []*AnnotatedReachabilityTheoremResult  `protobuf:"bytes,4,rep,name=reachability_theorems_result,json=reachabilityTheoremsResult,proto3" json:"reachability_theorems_result,omitempty"`
}

func (x *AnnotatedPolicyTheoremResult) Reset() {
	*x = AnnotatedPolicyTheoremResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcenetwork_acp_core_theorem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedPolicyTheoremResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedPolicyTheoremResult) ProtoMessage() {}

// Deprecated: Use AnnotatedPolicyTheoremResult.ProtoReflect.Descriptor instead.
func (*AnnotatedPolicyTheoremResult) Descriptor() ([]byte, []int) {
	return file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP(), []int{12}
}

func (x *AnnotatedPolicyTheoremResult) GetTheorem() *PolicyTheorem {
	if x != nil {
		return x.Theorem
	}
	return nil
}

func (x *AnnotatedPolicyTheoremResult) GetAuthorizationTheoremsResult() []*AnnotatedAuthorizationTheoremResult {
	if x != nil {
		return x.AuthorizationTheoremsResult
	}
	return nil
}

func (x *AnnotatedPolicyTheoremResult) GetDelegationTheoremsResult() []*AnnotatedDelegationTheoremResult {
	if x != nil {
		return x.DelegationTheoremsResult
	}
	return nil
}

func (x *AnnotatedPolicyTheoremResult) GetReachabilityTheoremsResult() []*AnnotatedReachabilityTheoremResult {
	if x != nil {
		return x.ReachabilityTheoremsResult
	}
	return nil
}

var File_sourcenetwork_acp_core_theorem_proto protoreflect.FileDescriptor

var file_sourcenetwork_acp_core_theorem_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d,
	0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x72, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x75, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65,
	0x6d, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12, 0x63, 0x0a, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6f,
	0x72, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x12,
	0x5a, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6f,
	0x72, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x14, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x22, 0x60, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46,
	0x0a, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x07, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f,
	0x72, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x23, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xaf, 0x01, 0x0a,
	0x20, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xb3,
	0x01, 0x0a, 0x22, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xb2, 0x03, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x07,
	0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12, 0x76, 0x0a,
	0x1d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1a, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x1c, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x12, 0x7f, 0x0a, 0x1d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x76, 0x0a, 0x1a,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x7c, 0x0a, 0x1c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2a, 0x31, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sourcenetwork_acp_core_theorem_proto_rawDescOnce sync.Once
	file_sourcenetwork_acp_core_theorem_proto_rawDescData = file_sourcenetwork_acp_core_theorem_proto_rawDesc
)

func file_sourcenetwork_acp_core_theorem_proto_rawDescGZIP() []byte {
	file_sourcenetwork_acp_core_theorem_proto_rawDescOnce.Do(func() {
		file_sourcenetwork_acp_core_theorem_proto_rawDescData = protoimpl.X.CompressGZIP(file_sourcenetwork_acp_core_theorem_proto_rawDescData)
	})
	return file_sourcenetwork_acp_core_theorem_proto_rawDescData
}

var file_sourcenetwork_acp_core_theorem_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sourcenetwork_acp_core_theorem_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sourcenetwork_acp_core_theorem_proto_goTypes = []interface{}{
	(ResultStatus)(0),                           // 0: sourcenetwork.acp_core.ResultStatus
	(*AuthorizationTheorem)(nil),                // 1: sourcenetwork.acp_core.AuthorizationTheorem
	(*ReachabilityTheorem)(nil),                 // 2: sourcenetwork.acp_core.ReachabilityTheorem
	(*DelegationTheorem)(nil),                   // 3: sourcenetwork.acp_core.DelegationTheorem
	(*PolicyTheorem)(nil),                       // 4: sourcenetwork.acp_core.PolicyTheorem
	(*Result)(nil),                              // 5: sourcenetwork.acp_core.Result
	(*AuthorizationTheoremResult)(nil),          // 6: sourcenetwork.acp_core.AuthorizationTheoremResult
	(*DelegationTheoremResult)(nil),             // 7: sourcenetwork.acp_core.DelegationTheoremResult
	(*ReachabilityTheoremResult)(nil),           // 8: sourcenetwork.acp_core.ReachabilityTheoremResult
	(*AnnotatedAuthorizationTheoremResult)(nil), // 9: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult
	(*AnnotatedDelegationTheoremResult)(nil),    // 10: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult
	(*AnnotatedReachabilityTheoremResult)(nil),  // 11: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult
	(*PolicyTheoremResult)(nil),                 // 12: sourcenetwork.acp_core.PolicyTheoremResult
	(*AnnotatedPolicyTheoremResult)(nil),        // 13: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult
	(*Operation)(nil),                           // 14: sourcenetwork.acp_core.Operation
	(*Actor)(nil),                               // 15: sourcenetwork.acp_core.Actor
	(*Object)(nil),                              // 16: sourcenetwork.acp_core.Object
	(*BufferInterval)(nil),                      // 17: sourcenetwork.acp_core.BufferInterval
}
var file_sourcenetwork_acp_core_theorem_proto_depIdxs = []int32{
	14, // 0: sourcenetwork.acp_core.AuthorizationTheorem.operation:type_name -> sourcenetwork.acp_core.Operation
	15, // 1: sourcenetwork.acp_core.AuthorizationTheorem.actor:type_name -> sourcenetwork.acp_core.Actor
	15, // 2: sourcenetwork.acp_core.ReachabilityTheorem.actor:type_name -> sourcenetwork.acp_core.Actor
	16, // 3: sourcenetwork.acp_core.ReachabilityTheorem.object:type_name -> sourcenetwork.acp_core.Object
	15, // 4: sourcenetwork.acp_core.DelegationTheorem.actor:type_name -> sourcenetwork.acp_core.Actor
	14, // 5: sourcenetwork.acp_core.DelegationTheorem.operation:type_name -> sourcenetwork.acp_core.Operation
	1,  // 6: sourcenetwork.acp_core.PolicyTheorem.authorization_theorems:type_name -> sourcenetwork.acp_core.AuthorizationTheorem
	3,  // 7: sourcenetwork.acp_core.PolicyTheorem.delegation_theorems:type_name -> sourcenetwork.acp_core.DelegationTheorem
	2,  // 8: sourcenetwork.acp_core.PolicyTheorem.reachability_theorems:type_name -> sourcenetwork.acp_core.ReachabilityTheorem
	0,  // 9: sourcenetwork.acp_core.Result.status:type_name -> sourcenetwork.acp_core.ResultStatus
	1,  // 10: sourcenetwork.acp_core.AuthorizationTheoremResult.theorem:type_name -> sourcenetwork.acp_core.AuthorizationTheorem
	5,  // 11: sourcenetwork.acp_core.AuthorizationTheoremResult.result:type_name -> sourcenetwork.acp_core.Result
	3,  // 12: sourcenetwork.acp_core.DelegationTheoremResult.theorem:type_name -> sourcenetwork.acp_core.DelegationTheorem
	5,  // 13: sourcenetwork.acp_core.DelegationTheoremResult.result:type_name -> sourcenetwork.acp_core.Result
	2,  // 14: sourcenetwork.acp_core.ReachabilityTheoremResult.theorem:type_name -> sourcenetwork.acp_core.ReachabilityTheorem
	5,  // 15: sourcenetwork.acp_core.ReachabilityTheoremResult.result:type_name -> sourcenetwork.acp_core.Result
	6,  // 16: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.result:type_name -> sourcenetwork.acp_core.AuthorizationTheoremResult
	17, // 17: sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult.interval:type_name -> sourcenetwork.acp_core.BufferInterval
	7,  // 18: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.result:type_name -> sourcenetwork.acp_core.DelegationTheoremResult
	17, // 19: sourcenetwork.acp_core.AnnotatedDelegationTheoremResult.interval:type_name -> sourcenetwork.acp_core.BufferInterval
	8,  // 20: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.result:type_name -> sourcenetwork.acp_core.ReachabilityTheoremResult
	17, // 21: sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult.interval:type_name -> sourcenetwork.acp_core.BufferInterval
	4,  // 22: sourcenetwork.acp_core.PolicyTheoremResult.theorem:type_name -> sourcenetwork.acp_core.PolicyTheorem
	6,  // 23: sourcenetwork.acp_core.PolicyTheoremResult.authorization_theorems_result:type_name -> sourcenetwork.acp_core.AuthorizationTheoremResult
	7,  // 24: sourcenetwork.acp_core.PolicyTheoremResult.delegation_theorems_result:type_name -> sourcenetwork.acp_core.DelegationTheoremResult
	8,  // 25: sourcenetwork.acp_core.PolicyTheoremResult.reachability_theorems_result:type_name -> sourcenetwork.acp_core.ReachabilityTheoremResult
	4,  // 26: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.theorem:type_name -> sourcenetwork.acp_core.PolicyTheorem
	9,  // 27: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.authorization_theorems_result:type_name -> sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult
	10, // 28: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.delegation_theorems_result:type_name -> sourcenetwork.acp_core.AnnotatedDelegationTheoremResult
	11, // 29: sourcenetwork.acp_core.AnnotatedPolicyTheoremResult.reachability_theorems_result:type_name -> sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_sourcenetwork_acp_core_theorem_proto_init() }
func file_sourcenetwork_acp_core_theorem_proto_init() {
	if File_sourcenetwork_acp_core_theorem_proto != nil {
		return
	}
	file_sourcenetwork_acp_core_request_proto_init()
	file_sourcenetwork_acp_core_buffer_position_proto_init()
	file_sourcenetwork_acp_core_policy_proto_init()
	file_sourcenetwork_acp_core_policy_short_proto_init()
	file_sourcenetwork_acp_core_relationship_proto_init()
	file_sourcenetwork_acp_core_relationship_selector_proto_init()
	file_sourcenetwork_acp_core_system_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationTheorem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReachabilityTheorem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationTheorem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyTheorem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReachabilityTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedAuthorizationTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedDelegationTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedReachabilityTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcenetwork_acp_core_theorem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedPolicyTheoremResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sourcenetwork_acp_core_theorem_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sourcenetwork_acp_core_theorem_proto_goTypes,
		DependencyIndexes: file_sourcenetwork_acp_core_theorem_proto_depIdxs,
		EnumInfos:         file_sourcenetwork_acp_core_theorem_proto_enumTypes,
		MessageInfos:      file_sourcenetwork_acp_core_theorem_proto_msgTypes,
	}.Build()
	File_sourcenetwork_acp_core_theorem_proto = out.File
	file_sourcenetwork_acp_core_theorem_proto_rawDesc = nil
	file_sourcenetwork_acp_core_theorem_proto_goTypes = nil
	file_sourcenetwork_acp_core_theorem_proto_depIdxs = nil
}
