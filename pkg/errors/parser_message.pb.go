// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/errors/parser_message.proto

package errors

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Severity int32

const (
	Severity_WARNING Severity = 0
	Severity_ERROR   Severity = 1
)

var Severity_name = map[int32]string{
	0: "WARNING",
	1: "ERROR",
}

var Severity_value = map[string]int32{
	"WARNING": 0,
	"ERROR":   1,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_52e7d1b8a15bd608, []int{0}
}

// ParserMessage models a message returned by a parser, which points
// to a position in the given text input
type ParserMessage struct {
	Message   string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Sevirity  Severity     `protobuf:"varint,2,opt,name=sevirity,proto3,enum=sourcenetwork.acp_core.errors.Severity" json:"sevirity,omitempty"`
	InputName string       `protobuf:"bytes,3,opt,name=input_name,json=inputName,proto3" json:"input_name,omitempty"`
	Range     *BufferRange `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *ParserMessage) Reset()         { *m = ParserMessage{} }
func (m *ParserMessage) String() string { return proto.CompactTextString(m) }
func (*ParserMessage) ProtoMessage()    {}
func (*ParserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e7d1b8a15bd608, []int{0}
}
func (m *ParserMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParserMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserMessage.Merge(m, src)
}
func (m *ParserMessage) XXX_Size() int {
	return m.Size()
}
func (m *ParserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ParserMessage proto.InternalMessageInfo

func (m *ParserMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ParserMessage) GetSevirity() Severity {
	if m != nil {
		return m.Sevirity
	}
	return Severity_WARNING
}

func (m *ParserMessage) GetInputName() string {
	if m != nil {
		return m.InputName
	}
	return ""
}

func (m *ParserMessage) GetRange() *BufferRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// ParserReport contains a set of messages
type ParserReport struct {
	Messages []*ParserMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *ParserReport) Reset()         { *m = ParserReport{} }
func (m *ParserReport) String() string { return proto.CompactTextString(m) }
func (*ParserReport) ProtoMessage()    {}
func (*ParserReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e7d1b8a15bd608, []int{1}
}
func (m *ParserReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParserReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParserReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParserReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserReport.Merge(m, src)
}
func (m *ParserReport) XXX_Size() int {
	return m.Size()
}
func (m *ParserReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserReport.DiscardUnknown(m)
}

var xxx_messageInfo_ParserReport proto.InternalMessageInfo

func (m *ParserReport) GetMessages() []*ParserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// BufferRange models a range in
// a line oriented buffer
type BufferRange struct {
	Start *BufferPosition `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *BufferPosition `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *BufferRange) Reset()         { *m = BufferRange{} }
func (m *BufferRange) String() string { return proto.CompactTextString(m) }
func (*BufferRange) ProtoMessage()    {}
func (*BufferRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e7d1b8a15bd608, []int{2}
}
func (m *BufferRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferRange.Merge(m, src)
}
func (m *BufferRange) XXX_Size() int {
	return m.Size()
}
func (m *BufferRange) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferRange.DiscardUnknown(m)
}

var xxx_messageInfo_BufferRange proto.InternalMessageInfo

func (m *BufferRange) GetStart() *BufferPosition {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BufferRange) GetEnd() *BufferPosition {
	if m != nil {
		return m.End
	}
	return nil
}

// BufferPosition models a position in
// a line oriented buffer
type BufferPosition struct {
	Line   uint64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column uint64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (m *BufferPosition) Reset()         { *m = BufferPosition{} }
func (m *BufferPosition) String() string { return proto.CompactTextString(m) }
func (*BufferPosition) ProtoMessage()    {}
func (*BufferPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e7d1b8a15bd608, []int{3}
}
func (m *BufferPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferPosition.Merge(m, src)
}
func (m *BufferPosition) XXX_Size() int {
	return m.Size()
}
func (m *BufferPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferPosition.DiscardUnknown(m)
}

var xxx_messageInfo_BufferPosition proto.InternalMessageInfo

func (m *BufferPosition) GetLine() uint64 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *BufferPosition) GetColumn() uint64 {
	if m != nil {
		return m.Column
	}
	return 0
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.errors.Severity", Severity_name, Severity_value)
	proto.RegisterType((*ParserMessage)(nil), "sourcenetwork.acp_core.errors.ParserMessage")
	proto.RegisterType((*ParserReport)(nil), "sourcenetwork.acp_core.errors.ParserReport")
	proto.RegisterType((*BufferRange)(nil), "sourcenetwork.acp_core.errors.BufferRange")
	proto.RegisterType((*BufferPosition)(nil), "sourcenetwork.acp_core.errors.BufferPosition")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/errors/parser_message.proto", fileDescriptor_52e7d1b8a15bd608)
}

var fileDescriptor_52e7d1b8a15bd608 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0xae, 0xd2, 0x40,
	0x14, 0xc6, 0x3b, 0x52, 0xee, 0x85, 0x53, 0xbd, 0xb9, 0x99, 0x85, 0xe9, 0xe6, 0x36, 0x4d, 0x37,
	0x36, 0x04, 0xdb, 0xa4, 0x6e, 0x4d, 0x54, 0x88, 0xff, 0x16, 0x22, 0x19, 0x17, 0x1a, 0x37, 0xa4,
	0xd4, 0x43, 0x6d, 0xa0, 0x33, 0xcd, 0xcc, 0x14, 0xe3, 0x5b, 0x98, 0xf8, 0x52, 0xee, 0x64, 0xe9,
	0xd2, 0xc0, 0x8b, 0x18, 0xa6, 0x85, 0xc8, 0x42, 0xd1, 0x5d, 0xcf, 0x49, 0x7f, 0xdf, 0x37, 0xe7,
	0x9c, 0x0f, 0x12, 0x25, 0x6a, 0x99, 0x21, 0x47, 0xfd, 0x49, 0xc8, 0x65, 0x9c, 0x66, 0xd5, 0x2c,
	0x13, 0x12, 0x63, 0x94, 0x52, 0x48, 0x15, 0x57, 0xa9, 0x54, 0x28, 0x67, 0x25, 0x2a, 0x95, 0xe6,
	0x18, 0x55, 0x52, 0x68, 0x41, 0x6f, 0x4e, 0x98, 0xe8, 0xc0, 0x44, 0x0d, 0x13, 0x7c, 0x27, 0x70,
	0x67, 0x6a, 0xb8, 0x57, 0x0d, 0x46, 0x5d, 0xb8, 0x6c, 0x15, 0x5c, 0xe2, 0x93, 0xb0, 0xcf, 0x0e,
	0x25, 0x1d, 0x43, 0x4f, 0xe1, 0xba, 0x90, 0x85, 0xfe, 0xec, 0xde, 0xf2, 0x49, 0x78, 0x95, 0xdc,
	0x8b, 0xfe, 0xaa, 0x1e, 0xbd, 0xc1, 0x35, 0xee, 0x7f, 0x67, 0x47, 0x90, 0xde, 0x00, 0x14, 0xbc,
	0xaa, 0xf5, 0x8c, 0xa7, 0x25, 0xba, 0x1d, 0xe3, 0xd0, 0x37, 0x9d, 0x49, 0x5a, 0x22, 0x7d, 0x0c,
	0x5d, 0x99, 0xf2, 0x1c, 0x5d, 0xdb, 0x27, 0xa1, 0x93, 0x0c, 0xce, 0x18, 0x8c, 0xea, 0xc5, 0x02,
	0x25, 0xdb, 0x13, 0xac, 0x01, 0x83, 0x77, 0x70, 0xbb, 0x19, 0x88, 0x61, 0x25, 0xa4, 0xa6, 0x2f,
	0xa0, 0xd7, 0x0e, 0xa0, 0x5c, 0xe2, 0x77, 0x42, 0x27, 0x19, 0x9e, 0x11, 0x3d, 0xd9, 0x07, 0x3b,
	0xd2, 0xc1, 0x57, 0x02, 0xce, 0x6f, 0x86, 0x74, 0x0c, 0x5d, 0xa5, 0x53, 0xa9, 0xcd, 0x9e, 0x9c,
	0xe4, 0xfe, 0x3f, 0xbd, 0x75, 0x2a, 0x54, 0xa1, 0x0b, 0xc1, 0x59, 0xc3, 0xd2, 0x47, 0xd0, 0x41,
	0xfe, 0xc1, 0xec, 0xf3, 0xbf, 0x25, 0xf6, 0x64, 0xf0, 0x10, 0xae, 0x4e, 0xdb, 0x94, 0x82, 0xbd,
	0x2a, 0x78, 0x73, 0x3e, 0x9b, 0x99, 0x6f, 0x7a, 0x17, 0x2e, 0x32, 0xb1, 0xaa, 0x4b, 0x6e, 0x9c,
	0x6c, 0xd6, 0x56, 0x83, 0x00, 0x7a, 0x87, 0x23, 0x51, 0x07, 0x2e, 0xdf, 0x3e, 0x61, 0x93, 0x97,
	0x93, 0xe7, 0xd7, 0x16, 0xed, 0x43, 0xf7, 0x29, 0x63, 0xaf, 0xd9, 0x35, 0x19, 0x3d, 0xfb, 0xb6,
	0xf5, 0xc8, 0x66, 0xeb, 0x91, 0x9f, 0x5b, 0x8f, 0x7c, 0xd9, 0x79, 0xd6, 0x66, 0xe7, 0x59, 0x3f,
	0x76, 0x9e, 0xf5, 0x7e, 0x98, 0x17, 0xfa, 0x63, 0x3d, 0x8f, 0x32, 0x51, 0xc6, 0x7f, 0xc8, 0x66,
	0xb5, 0xcc, 0xdb, 0x7c, 0xce, 0x2f, 0x4c, 0x22, 0x1f, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0x53, 0x41, 0x04, 0xc7, 0x02, 0x00, 0x00,
}

func (m *ParserMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParserMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParserMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParserMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.InputName) > 0 {
		i -= len(m.InputName)
		copy(dAtA[i:], m.InputName)
		i = encodeVarintParserMessage(dAtA, i, uint64(len(m.InputName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sevirity != 0 {
		i = encodeVarintParserMessage(dAtA, i, uint64(m.Sevirity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintParserMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParserReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParserReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParserReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParserMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BufferRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != nil {
		{
			size, err := m.End.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParserMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParserMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BufferPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Column != 0 {
		i = encodeVarintParserMessage(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x10
	}
	if m.Line != 0 {
		i = encodeVarintParserMessage(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParserMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovParserMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParserMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovParserMessage(uint64(l))
	}
	if m.Sevirity != 0 {
		n += 1 + sovParserMessage(uint64(m.Sevirity))
	}
	l = len(m.InputName)
	if l > 0 {
		n += 1 + l + sovParserMessage(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovParserMessage(uint64(l))
	}
	return n
}

func (m *ParserReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovParserMessage(uint64(l))
		}
	}
	return n
}

func (m *BufferRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovParserMessage(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovParserMessage(uint64(l))
	}
	return n
}

func (m *BufferPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != 0 {
		n += 1 + sovParserMessage(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovParserMessage(uint64(m.Column))
	}
	return n
}

func sovParserMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParserMessage(x uint64) (n int) {
	return sovParserMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParserMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParserMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParserMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sevirity", wireType)
			}
			m.Sevirity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sevirity |= Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &BufferRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParserMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParserMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParserReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParserReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParserReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ParserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParserMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParserMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &BufferPosition{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &BufferPosition{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParserMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParserMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParserMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParserMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParserMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParserMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParserMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParserMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParserMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParserMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParserMessage = fmt.Errorf("proto: unexpected end of group")
)
