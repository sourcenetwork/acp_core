// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/errors/errors.proto

package errors

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ErrorType represent families of errors which acp_core can throw.
// Concrete errors are refined with additional context data and explanatory messages
type ErrorType int32

const (
	// UNKNOWN is a catch all bucket for unspecified errors (represents an internal error)
	ErrorType_UNKNOWN ErrorType = 0
	// INTERNAL is a general base error for IO or unexpected system errors
	ErrorType_INTERNAL ErrorType = 1
	// UNAUTHENTICATED signals caller was not authenticated while it was required
	ErrorType_UNAUTHENTICATED ErrorType = 2
	// UNAUTHORIZED is a general error for operations that were
	// rejected due to insufficient permission unauthorized
	ErrorType_UNAUTHORIZED ErrorType = 3
	// BAD_INPUT is a general base error for input errors
	ErrorType_BAD_INPUT ErrorType = 4
	// OPERATION_FORBIDDEN signals that the operation was not executed
	// as that would violate part of the Access Control system
	ErrorType_OPERATION_FORBIDDEN ErrorType = 5
	// NOT_FOUND signals that the requested entity was not found in the system
	ErrorType_NOT_FOUND ErrorType = 6
)

var ErrorType_name = map[int32]string{
	0: "UNKNOWN",
	1: "INTERNAL",
	2: "UNAUTHENTICATED",
	3: "UNAUTHORIZED",
	4: "BAD_INPUT",
	5: "OPERATION_FORBIDDEN",
	6: "NOT_FOUND",
}

var ErrorType_value = map[string]int32{
	"UNKNOWN":             0,
	"INTERNAL":            1,
	"UNAUTHENTICATED":     2,
	"UNAUTHORIZED":        3,
	"BAD_INPUT":           4,
	"OPERATION_FORBIDDEN": 5,
	"NOT_FOUND":           6,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cdfeac99edeed4e, []int{0}
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.errors.ErrorType", ErrorType_name, ErrorType_value)
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/errors/errors.proto", fileDescriptor_9cdfeac99edeed4e)
}

var fileDescriptor_9cdfeac99edeed4e = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x4c, 0x2e, 0x88, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x4f, 0x2d, 0x2a, 0xca, 0x2f, 0x2a, 0x86, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0xb2, 0x28, 0x6a, 0xf5, 0x60, 0x6a, 0xf5, 0x20, 0x8a, 0xb4, 0x5a, 0x18, 0xb9, 0x38,
	0x5d, 0x41, 0xcc, 0x90, 0xca, 0x82, 0x54, 0x21, 0x6e, 0x2e, 0xf6, 0x50, 0x3f, 0x6f, 0x3f, 0xff,
	0x70, 0x3f, 0x01, 0x06, 0x21, 0x1e, 0x2e, 0x0e, 0x4f, 0xbf, 0x10, 0xd7, 0x20, 0x3f, 0x47, 0x1f,
	0x01, 0x46, 0x21, 0x61, 0x2e, 0xfe, 0x50, 0x3f, 0xc7, 0xd0, 0x10, 0x0f, 0x57, 0xbf, 0x10, 0x4f,
	0x67, 0xc7, 0x10, 0x57, 0x17, 0x01, 0x26, 0x21, 0x01, 0x2e, 0x1e, 0x88, 0xa0, 0x7f, 0x90, 0x67,
	0x94, 0xab, 0x8b, 0x00, 0xb3, 0x10, 0x2f, 0x17, 0xa7, 0x93, 0xa3, 0x4b, 0xbc, 0xa7, 0x5f, 0x40,
	0x68, 0x88, 0x00, 0x8b, 0x90, 0x38, 0x97, 0xb0, 0x7f, 0x80, 0x6b, 0x90, 0x63, 0x88, 0xa7, 0xbf,
	0x5f, 0xbc, 0x9b, 0x7f, 0x90, 0x93, 0xa7, 0x8b, 0x8b, 0xab, 0x9f, 0x00, 0x2b, 0x48, 0x9d, 0x9f,
	0x7f, 0x48, 0xbc, 0x9b, 0x7f, 0xa8, 0x9f, 0x8b, 0x00, 0x9b, 0x93, 0xdb, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72,
	0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xe9, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0xea, 0xe3, 0xf0, 0x76, 0x41, 0x76, 0x3a, 0xd4, 0xcf, 0x49, 0x6c, 0x60, 0x4f, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7d, 0x81, 0x6d, 0x22, 0x01, 0x00, 0x00,
}
