// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/access_ticket.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Represents a Capability token containing an opaque proof and a set of Operations
// the Actor is allowed to perform.
// Tickets should be verified by a Reference Monitor before granting access to the requested operations.
type AccessTicket struct {
	// identified the ticket version
	VersionDenominator string          `protobuf:"bytes,1,opt,name=version_denominator,json=versionDenominator,proto3" json:"version_denominator,omitempty"`
	DecisionId         string          `protobuf:"bytes,2,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	Decision           *AccessDecision `protobuf:"bytes,3,opt,name=decision,proto3" json:"decision,omitempty"`
	// proof of existance that the given decision exists in the chain
	// validation strategy is dependent on ticket version
	DecisionProof []byte `protobuf:"bytes,4,opt,name=decision_proof,json=decisionProof,proto3" json:"decision_proof,omitempty"`
	// signature of ticket which must match actor pkey in the access decision
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AccessTicket) Reset()         { *m = AccessTicket{} }
func (m *AccessTicket) String() string { return proto.CompactTextString(m) }
func (*AccessTicket) ProtoMessage()    {}
func (*AccessTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_d88005b8ddcf00fe, []int{0}
}
func (m *AccessTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessTicket.Merge(m, src)
}
func (m *AccessTicket) XXX_Size() int {
	return m.Size()
}
func (m *AccessTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessTicket.DiscardUnknown(m)
}

var xxx_messageInfo_AccessTicket proto.InternalMessageInfo

func (m *AccessTicket) GetVersionDenominator() string {
	if m != nil {
		return m.VersionDenominator
	}
	return ""
}

func (m *AccessTicket) GetDecisionId() string {
	if m != nil {
		return m.DecisionId
	}
	return ""
}

func (m *AccessTicket) GetDecision() *AccessDecision {
	if m != nil {
		return m.Decision
	}
	return nil
}

func (m *AccessTicket) GetDecisionProof() []byte {
	if m != nil {
		return m.DecisionProof
	}
	return nil
}

func (m *AccessTicket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessTicket)(nil), "sourcenetwork.acp_core.AccessTicket")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/access_ticket.proto", fileDescriptor_d88005b8ddcf00fe)
}

var fileDescriptor_d88005b8ddcf00fe = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x1b, 0xff, 0xb0, 0x69, 0x75, 0x11, 0x41, 0x86, 0x22, 0x69, 0x11, 0x94, 0xa2, 0x32,
	0x01, 0x7d, 0x02, 0x4b, 0x5d, 0xb8, 0x93, 0xe2, 0xca, 0xcd, 0x30, 0xcd, 0xdc, 0x8e, 0xa1, 0xce,
	0xdc, 0x90, 0x64, 0x14, 0xdf, 0xc2, 0xc7, 0x72, 0xd9, 0xa5, 0x4b, 0xe9, 0xac, 0x7c, 0x0b, 0x69,
	0xa6, 0xd3, 0x22, 0xa8, 0xcb, 0x7c, 0xe7, 0xbb, 0x39, 0xc9, 0xa5, 0x67, 0x16, 0x0b, 0x23, 0x21,
	0x07, 0xf7, 0x82, 0x66, 0x2a, 0x62, 0xa9, 0x23, 0x89, 0x06, 0x44, 0x2c, 0x25, 0x58, 0x1b, 0x39,
	0x25, 0xa7, 0xe0, 0x42, 0x6d, 0xd0, 0x21, 0x3b, 0xfc, 0xe1, 0x86, 0xb5, 0xdb, 0xe9, 0xa6, 0x88,
	0xe9, 0x13, 0x08, 0x6f, 0x8d, 0x8b, 0x89, 0x70, 0x2a, 0x03, 0xeb, 0xe2, 0x4c, 0x57, 0x83, 0x9d,
	0x8b, 0xff, 0x4b, 0x12, 0x90, 0xca, 0x2a, 0xcc, 0x2b, 0xfb, 0xf8, 0x8b, 0xd0, 0xf6, 0xb5, 0x4f,
	0xee, 0x7d, 0x3b, 0x13, 0xf4, 0xe0, 0x19, 0xcc, 0xc2, 0x88, 0x12, 0xc8, 0x31, 0x53, 0x79, 0xec,
	0xd0, 0x04, 0xa4, 0x47, 0xfa, 0xcd, 0x11, 0x5b, 0x46, 0xc3, 0x75, 0xc2, 0xba, 0xb4, 0x55, 0xdf,
	0x19, 0xa9, 0x24, 0xd8, 0xf0, 0x22, 0xad, 0xd1, 0x6d, 0xc2, 0x06, 0x74, 0xb7, 0x3e, 0x05, 0x9b,
	0x3d, 0xd2, 0x6f, 0x5d, 0x9e, 0x86, 0xbf, 0x7f, 0x2e, 0xac, 0x5e, 0x32, 0x5c, 0xda, 0xa3, 0xd5,
	0x1c, 0x3b, 0xa1, 0xfb, 0xab, 0x12, 0x6d, 0x10, 0x27, 0xc1, 0x56, 0x8f, 0xf4, 0xdb, 0xa3, 0xbd,
	0x9a, 0xde, 0x2d, 0x20, 0x3b, 0xa2, 0x4d, 0xab, 0xd2, 0x3c, 0x76, 0x85, 0x81, 0x60, 0xdb, 0x1b,
	0x6b, 0x30, 0xb8, 0x79, 0x9f, 0x73, 0x32, 0x9b, 0x73, 0xf2, 0x39, 0xe7, 0xe4, 0xad, 0xe4, 0x8d,
	0x59, 0xc9, 0x1b, 0x1f, 0x25, 0x6f, 0x3c, 0x9c, 0xa7, 0xca, 0x3d, 0x16, 0xe3, 0x50, 0x62, 0x26,
	0xfe, 0x58, 0x9f, 0x9e, 0xa6, 0xc2, 0xbd, 0x6a, 0xb0, 0xe3, 0x1d, 0xbf, 0xb9, 0xab, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x94, 0x02, 0xaf, 0x2c, 0xce, 0x01, 0x00, 0x00,
}

func (m *AccessTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAccessTicket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DecisionProof) > 0 {
		i -= len(m.DecisionProof)
		copy(dAtA[i:], m.DecisionProof)
		i = encodeVarintAccessTicket(dAtA, i, uint64(len(m.DecisionProof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Decision != nil {
		{
			size, err := m.Decision.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccessTicket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DecisionId) > 0 {
		i -= len(m.DecisionId)
		copy(dAtA[i:], m.DecisionId)
		i = encodeVarintAccessTicket(dAtA, i, uint64(len(m.DecisionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VersionDenominator) > 0 {
		i -= len(m.VersionDenominator)
		copy(dAtA[i:], m.VersionDenominator)
		i = encodeVarintAccessTicket(dAtA, i, uint64(len(m.VersionDenominator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccessTicket(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccessTicket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccessTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionDenominator)
	if l > 0 {
		n += 1 + l + sovAccessTicket(uint64(l))
	}
	l = len(m.DecisionId)
	if l > 0 {
		n += 1 + l + sovAccessTicket(uint64(l))
	}
	if m.Decision != nil {
		l = m.Decision.Size()
		n += 1 + l + sovAccessTicket(uint64(l))
	}
	l = len(m.DecisionProof)
	if l > 0 {
		n += 1 + l + sovAccessTicket(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAccessTicket(uint64(l))
	}
	return n
}

func sovAccessTicket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccessTicket(x uint64) (n int) {
	return sovAccessTicket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccessTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccessTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionDenominator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccessTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionDenominator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccessTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccessTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Decision == nil {
				m.Decision = &AccessDecision{}
			}
			if err := m.Decision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccessTicket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionProof = append(m.DecisionProof[:0], dAtA[iNdEx:postIndex]...)
			if m.DecisionProof == nil {
				m.DecisionProof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccessTicket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccessTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccessTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccessTicket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccessTicket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccessTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccessTicket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccessTicket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccessTicket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccessTicket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccessTicket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccessTicket = fmt.Errorf("proto: unexpected end of group")
)
