// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/parser_message.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LocatedMessage_MessageKind int32

const (
	LocatedMessage_UNKNOWN LocatedMessage_MessageKind = 0
	LocatedMessage_ERROR   LocatedMessage_MessageKind = 1
	LocatedMessage_INFO    LocatedMessage_MessageKind = 2
	LocatedMessage_WARNING LocatedMessage_MessageKind = 3
)

var LocatedMessage_MessageKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "ERROR",
	2: "INFO",
	3: "WARNING",
}

var LocatedMessage_MessageKind_value = map[string]int32{
	"UNKNOWN": 0,
	"ERROR":   1,
	"INFO":    2,
	"WARNING": 3,
}

func (x LocatedMessage_MessageKind) String() string {
	return proto.EnumName(LocatedMessage_MessageKind_name, int32(x))
}

func (LocatedMessage_MessageKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_725232e370f0022e, []int{0, 0}
}

// LocatedMessage models a message which points to a position in a text buffer
type LocatedMessage struct {
	Message   string                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind      LocatedMessage_MessageKind `protobuf:"varint,2,opt,name=kind,proto3,enum=sourcenetwork.acp_core.LocatedMessage_MessageKind" json:"kind,omitempty"`
	InputName string                     `protobuf:"bytes,3,opt,name=input_name,json=inputName,proto3" json:"input_name,omitempty"`
	Range     *BufferRange               `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *LocatedMessage) Reset()         { *m = LocatedMessage{} }
func (m *LocatedMessage) String() string { return proto.CompactTextString(m) }
func (*LocatedMessage) ProtoMessage()    {}
func (*LocatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_725232e370f0022e, []int{0}
}
func (m *LocatedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocatedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocatedMessage.Merge(m, src)
}
func (m *LocatedMessage) XXX_Size() int {
	return m.Size()
}
func (m *LocatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LocatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LocatedMessage proto.InternalMessageInfo

func (m *LocatedMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LocatedMessage) GetKind() LocatedMessage_MessageKind {
	if m != nil {
		return m.Kind
	}
	return LocatedMessage_UNKNOWN
}

func (m *LocatedMessage) GetInputName() string {
	if m != nil {
		return m.InputName
	}
	return ""
}

func (m *LocatedMessage) GetRange() *BufferRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.LocatedMessage_MessageKind", LocatedMessage_MessageKind_name, LocatedMessage_MessageKind_value)
	proto.RegisterType((*LocatedMessage)(nil), "sourcenetwork.acp_core.LocatedMessage")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/parser_message.proto", fileDescriptor_725232e370f0022e)
}

var fileDescriptor_725232e370f0022e = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x6b, 0xf2, 0x30,
	0x1c, 0xc7, 0x1b, 0xff, 0x3c, 0x3e, 0x46, 0x90, 0x92, 0xc3, 0x28, 0x83, 0x15, 0x71, 0x17, 0xc1,
	0xd1, 0x82, 0x3b, 0x0d, 0x76, 0x99, 0xa0, 0x43, 0xdc, 0x22, 0x04, 0x86, 0xb0, 0x4b, 0x89, 0xf5,
	0x67, 0x57, 0xa4, 0x49, 0x48, 0x52, 0xc6, 0xde, 0xc2, 0x4e, 0x7b, 0x59, 0x3b, 0x7a, 0xdc, 0x71,
	0xe8, 0x1b, 0x19, 0x56, 0x85, 0x09, 0xf3, 0x14, 0x12, 0xbe, 0xdf, 0xcf, 0x27, 0xc9, 0x0f, 0x77,
	0x8d, 0xcc, 0x75, 0x0c, 0x02, 0xec, 0xab, 0xd4, 0xcb, 0x90, 0xc7, 0x2a, 0x8a, 0xa5, 0x86, 0x50,
	0x71, 0x6d, 0x40, 0x47, 0x19, 0x18, 0xc3, 0x13, 0x08, 0x94, 0x96, 0x56, 0x92, 0xb3, 0xa3, 0x70,
	0x70, 0x08, 0x9f, 0x5f, 0x9d, 0x80, 0xcc, 0xf2, 0xc5, 0x02, 0x74, 0xa4, 0xa4, 0x49, 0x6d, 0x2a,
	0xc5, 0x8e, 0xd2, 0x7e, 0x2f, 0xe1, 0xe6, 0x83, 0x8c, 0xb9, 0x85, 0xf9, 0xe3, 0x0e, 0x4f, 0x3c,
	0x5c, 0xdb, 0x9b, 0x3c, 0xd4, 0x42, 0x9d, 0x3a, 0x3b, 0x6c, 0xc9, 0x10, 0x57, 0x96, 0xa9, 0x98,
	0x7b, 0xa5, 0x16, 0xea, 0x34, 0x7b, 0xbd, 0xe0, 0xef, 0x1b, 0x04, 0xc7, 0xbc, 0x60, 0xbf, 0x8e,
	0x53, 0x31, 0x67, 0x45, 0x9f, 0x5c, 0x60, 0x9c, 0x0a, 0x95, 0xdb, 0x48, 0xf0, 0x0c, 0xbc, 0x72,
	0x21, 0xa9, 0x17, 0x27, 0x94, 0x67, 0x40, 0x6e, 0x70, 0x55, 0x73, 0x91, 0x80, 0x57, 0x69, 0xa1,
	0x4e, 0xa3, 0x77, 0x79, 0xca, 0xd3, 0x2f, 0x5e, 0xc4, 0xb6, 0x51, 0xb6, 0x6b, 0xb4, 0x6f, 0x71,
	0xe3, 0x97, 0x8e, 0x34, 0x70, 0xed, 0x89, 0x8e, 0xe9, 0x64, 0x4a, 0x5d, 0x87, 0xd4, 0x71, 0x75,
	0xc0, 0xd8, 0x84, 0xb9, 0x88, 0xfc, 0xc7, 0x95, 0x11, 0x1d, 0x4e, 0xdc, 0xd2, 0x36, 0x31, 0xbd,
	0x63, 0x74, 0x44, 0xef, 0xdd, 0x72, 0x7f, 0xf0, 0xb9, 0xf6, 0xd1, 0x6a, 0xed, 0xa3, 0xef, 0xb5,
	0x8f, 0x3e, 0x36, 0xbe, 0xb3, 0xda, 0xf8, 0xce, 0xd7, 0xc6, 0x77, 0x9e, 0xbb, 0x49, 0x6a, 0x5f,
	0xf2, 0x59, 0x10, 0xcb, 0x2c, 0x3c, 0x35, 0xa4, 0x65, 0x12, 0xda, 0x37, 0x05, 0x66, 0xf6, 0xaf,
	0xf8, 0xda, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0xe0, 0xb8, 0x8e, 0xcf, 0x01, 0x00,
	0x00,
}

func (m *LocatedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocatedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocatedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParserMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.InputName) > 0 {
		i -= len(m.InputName)
		copy(dAtA[i:], m.InputName)
		i = encodeVarintParserMessage(dAtA, i, uint64(len(m.InputName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Kind != 0 {
		i = encodeVarintParserMessage(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintParserMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParserMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovParserMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocatedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovParserMessage(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovParserMessage(uint64(m.Kind))
	}
	l = len(m.InputName)
	if l > 0 {
		n += 1 + l + sovParserMessage(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovParserMessage(uint64(l))
	}
	return n
}

func sovParserMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParserMessage(x uint64) (n int) {
	return sovParserMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocatedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocatedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocatedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= LocatedMessage_MessageKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParserMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParserMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &BufferRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParserMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParserMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParserMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParserMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParserMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParserMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParserMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParserMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParserMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParserMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParserMessage = fmt.Errorf("proto: unexpected end of group")
)
