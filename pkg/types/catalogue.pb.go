// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/catalogue.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Catalogue struct {
	Relationships []string `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships,omitempty"`
	//repeated ObjectDetails objects = 2;
	//ActorSet actors = 3;
	ResourceCatalogue map[string]*ResourceCatalogue `protobuf:"bytes,4,rep,name=resource_catalogue,json=resourceCatalogue,proto3" json:"resource_catalogue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActorResourceName string                        `protobuf:"bytes,5,opt,name=actor_resource_name,json=actorResourceName,proto3" json:"actor_resource_name,omitempty"`
	PolicyDefinition  string                        `protobuf:"bytes,6,opt,name=policy_definition,json=policyDefinition,proto3" json:"policy_definition,omitempty"`
}

func (m *Catalogue) Reset()         { *m = Catalogue{} }
func (m *Catalogue) String() string { return proto.CompactTextString(m) }
func (*Catalogue) ProtoMessage()    {}
func (*Catalogue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5913c2b388e130, []int{0}
}
func (m *Catalogue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Catalogue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Catalogue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Catalogue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Catalogue.Merge(m, src)
}
func (m *Catalogue) XXX_Size() int {
	return m.Size()
}
func (m *Catalogue) XXX_DiscardUnknown() {
	xxx_messageInfo_Catalogue.DiscardUnknown(m)
}

var xxx_messageInfo_Catalogue proto.InternalMessageInfo

func (m *Catalogue) GetRelationships() []string {
	if m != nil {
		return m.Relationships
	}
	return nil
}

func (m *Catalogue) GetResourceCatalogue() map[string]*ResourceCatalogue {
	if m != nil {
		return m.ResourceCatalogue
	}
	return nil
}

func (m *Catalogue) GetActorResourceName() string {
	if m != nil {
		return m.ActorResourceName
	}
	return ""
}

func (m *Catalogue) GetPolicyDefinition() string {
	if m != nil {
		return m.PolicyDefinition
	}
	return ""
}

type ResourceCatalogue struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Relations   []string `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	ObjectIds   []string `protobuf:"bytes,3,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
}

func (m *ResourceCatalogue) Reset()         { *m = ResourceCatalogue{} }
func (m *ResourceCatalogue) String() string { return proto.CompactTextString(m) }
func (*ResourceCatalogue) ProtoMessage()    {}
func (*ResourceCatalogue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5913c2b388e130, []int{1}
}
func (m *ResourceCatalogue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceCatalogue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceCatalogue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceCatalogue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceCatalogue.Merge(m, src)
}
func (m *ResourceCatalogue) XXX_Size() int {
	return m.Size()
}
func (m *ResourceCatalogue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceCatalogue.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceCatalogue proto.InternalMessageInfo

func (m *ResourceCatalogue) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ResourceCatalogue) GetRelations() []string {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *ResourceCatalogue) GetObjectIds() []string {
	if m != nil {
		return m.ObjectIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Catalogue)(nil), "sourcenetwork.acp_core.Catalogue")
	proto.RegisterMapType((map[string]*ResourceCatalogue)(nil), "sourcenetwork.acp_core.Catalogue.ResourceCatalogueEntry")
	proto.RegisterType((*ResourceCatalogue)(nil), "sourcenetwork.acp_core.ResourceCatalogue")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/catalogue.proto", fileDescriptor_ba5913c2b388e130)
}

var fileDescriptor_ba5913c2b388e130 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6b, 0xe3, 0x30,
	0x14, 0xc7, 0x23, 0xfb, 0x12, 0xb0, 0xc2, 0x41, 0xac, 0x83, 0x20, 0x8e, 0x3b, 0x63, 0xc2, 0x71,
	0xf8, 0x08, 0xd8, 0x90, 0x5b, 0x42, 0x97, 0x42, 0xdb, 0x0c, 0x5d, 0x3a, 0x78, 0xec, 0x62, 0x14,
	0x45, 0x75, 0xd4, 0xd8, 0x96, 0x91, 0xe4, 0x16, 0x7f, 0x8b, 0x7e, 0xac, 0x8e, 0x19, 0x3b, 0x96,
	0x64, 0xe9, 0xc7, 0x28, 0xb1, 0x13, 0xb7, 0x69, 0x92, 0x4d, 0xfc, 0xfe, 0xff, 0xf7, 0xfe, 0x4f,
	0x8f, 0x07, 0xff, 0x2a, 0x51, 0x48, 0xca, 0x32, 0xa6, 0x1f, 0x85, 0x5c, 0x04, 0x84, 0xe6, 0x11,
	0x15, 0x92, 0x05, 0x94, 0x68, 0x92, 0x88, 0xb8, 0x60, 0x7e, 0x2e, 0x85, 0x16, 0xa8, 0xbf, 0xe7,
	0xf3, 0x77, 0xbe, 0xc1, 0x9b, 0x01, 0xad, 0xcb, 0x9d, 0x17, 0xfd, 0x81, 0xdf, 0x25, 0x4b, 0x88,
	0xe6, 0x22, 0x53, 0x73, 0x9e, 0x2b, 0x0c, 0x5c, 0xd3, 0xb3, 0xc2, 0x7d, 0x88, 0x62, 0x88, 0x24,
	0xab, 0xfb, 0x45, 0x4d, 0x0e, 0xfe, 0xe6, 0x9a, 0x5e, 0x77, 0x34, 0xf6, 0x8f, 0x07, 0xf9, 0x4d,
	0x88, 0x1f, 0x6e, 0x6b, 0x1b, 0x32, 0xc9, 0xb4, 0x2c, 0x43, 0x5b, 0x7e, 0xe5, 0xc8, 0x87, 0x3f,
	0x08, 0xd5, 0x42, 0x46, 0x4d, 0x5c, 0x46, 0x52, 0x86, 0xdb, 0x2e, 0xf0, 0xac, 0xd0, 0xae, 0xa4,
	0x5d, 0xb3, 0x1b, 0x92, 0x32, 0x34, 0x84, 0x76, 0x2e, 0x12, 0x4e, 0xcb, 0x68, 0xc6, 0xee, 0x78,
	0xc6, 0x37, 0x23, 0xe3, 0x4e, 0xe5, 0xee, 0xd5, 0xc2, 0x55, 0xc3, 0x7f, 0x0a, 0xd8, 0x3f, 0x3e,
	0x09, 0xea, 0x41, 0x73, 0xc1, 0x4a, 0x0c, 0xaa, 0xc2, 0xcd, 0x13, 0x9d, 0xc3, 0xf6, 0x03, 0x49,
	0x0a, 0x86, 0x0d, 0x17, 0x78, 0xdd, 0xd1, 0xbf, 0x53, 0x9f, 0x3c, 0x68, 0x18, 0xd6, 0x75, 0x67,
	0xc6, 0x18, 0x0c, 0x24, 0xb4, 0x0f, 0x74, 0xe4, 0xc2, 0x6e, 0xce, 0x64, 0xca, 0x95, 0xda, 0xac,
	0x77, 0xbb, 0xef, 0xcf, 0x08, 0xfd, 0x82, 0x56, 0xb3, 0x7e, 0x6c, 0x54, 0xfa, 0x07, 0x40, 0xbf,
	0x21, 0x14, 0xd3, 0x7b, 0x46, 0x75, 0xc4, 0x67, 0x0a, 0x9b, 0xb5, 0x5c, 0x93, 0xeb, 0x99, 0xba,
	0x98, 0x3c, 0xaf, 0x1c, 0xb0, 0x5c, 0x39, 0xe0, 0x75, 0xe5, 0x80, 0xa7, 0xb5, 0xd3, 0x5a, 0xae,
	0x9d, 0xd6, 0xcb, 0xda, 0x69, 0xdd, 0x0e, 0x63, 0xae, 0xe7, 0xc5, 0xd4, 0xa7, 0x22, 0x0d, 0x4e,
	0xdc, 0x50, 0xbe, 0x88, 0x03, 0x5d, 0xe6, 0x4c, 0x4d, 0x3b, 0xd5, 0x11, 0xfd, 0x7f, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0xc9, 0x8c, 0xe4, 0xfd, 0x6e, 0x02, 0x00, 0x00,
}

func (m *Catalogue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Catalogue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Catalogue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyDefinition) > 0 {
		i -= len(m.PolicyDefinition)
		copy(dAtA[i:], m.PolicyDefinition)
		i = encodeVarintCatalogue(dAtA, i, uint64(len(m.PolicyDefinition)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActorResourceName) > 0 {
		i -= len(m.ActorResourceName)
		copy(dAtA[i:], m.ActorResourceName)
		i = encodeVarintCatalogue(dAtA, i, uint64(len(m.ActorResourceName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceCatalogue) > 0 {
		for k := range m.ResourceCatalogue {
			v := m.ResourceCatalogue[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCatalogue(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCatalogue(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCatalogue(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Relationships) > 0 {
		for iNdEx := len(m.Relationships) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relationships[iNdEx])
			copy(dAtA[i:], m.Relationships[iNdEx])
			i = encodeVarintCatalogue(dAtA, i, uint64(len(m.Relationships[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceCatalogue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceCatalogue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceCatalogue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectIds) > 0 {
		for iNdEx := len(m.ObjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjectIds[iNdEx])
			copy(dAtA[i:], m.ObjectIds[iNdEx])
			i = encodeVarintCatalogue(dAtA, i, uint64(len(m.ObjectIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relations[iNdEx])
			copy(dAtA[i:], m.Relations[iNdEx])
			i = encodeVarintCatalogue(dAtA, i, uint64(len(m.Relations[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Permissions[iNdEx])
			copy(dAtA[i:], m.Permissions[iNdEx])
			i = encodeVarintCatalogue(dAtA, i, uint64(len(m.Permissions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCatalogue(dAtA []byte, offset int, v uint64) int {
	offset -= sovCatalogue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Catalogue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relationships) > 0 {
		for _, s := range m.Relationships {
			l = len(s)
			n += 1 + l + sovCatalogue(uint64(l))
		}
	}
	if len(m.ResourceCatalogue) > 0 {
		for k, v := range m.ResourceCatalogue {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCatalogue(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCatalogue(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCatalogue(uint64(mapEntrySize))
		}
	}
	l = len(m.ActorResourceName)
	if l > 0 {
		n += 1 + l + sovCatalogue(uint64(l))
	}
	l = len(m.PolicyDefinition)
	if l > 0 {
		n += 1 + l + sovCatalogue(uint64(l))
	}
	return n
}

func (m *ResourceCatalogue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			l = len(s)
			n += 1 + l + sovCatalogue(uint64(l))
		}
	}
	if len(m.Relations) > 0 {
		for _, s := range m.Relations {
			l = len(s)
			n += 1 + l + sovCatalogue(uint64(l))
		}
	}
	if len(m.ObjectIds) > 0 {
		for _, s := range m.ObjectIds {
			l = len(s)
			n += 1 + l + sovCatalogue(uint64(l))
		}
	}
	return n
}

func sovCatalogue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCatalogue(x uint64) (n int) {
	return sovCatalogue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Catalogue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalogue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Catalogue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Catalogue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationships", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relationships = append(m.Relationships, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCatalogue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceCatalogue == nil {
				m.ResourceCatalogue = make(map[string]*ResourceCatalogue)
			}
			var mapkey string
			var mapvalue *ResourceCatalogue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCatalogue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCatalogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCatalogue
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCatalogue
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCatalogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCatalogue
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCatalogue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceCatalogue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCatalogue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCatalogue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourceCatalogue[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyDefinition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyDefinition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalogue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalogue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceCatalogue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalogue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceCatalogue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceCatalogue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalogue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectIds = append(m.ObjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalogue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalogue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCatalogue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCatalogue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalogue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCatalogue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCatalogue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCatalogue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCatalogue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCatalogue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCatalogue = fmt.Errorf("proto: unexpected end of group")
)
