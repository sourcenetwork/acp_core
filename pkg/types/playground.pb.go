// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/playground.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewSandboxRequest struct {
	// user defined name for the sandbox
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// optional description for documentation
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *NewSandboxRequest) Reset()         { *m = NewSandboxRequest{} }
func (m *NewSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*NewSandboxRequest) ProtoMessage()    {}
func (*NewSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{0}
}
func (m *NewSandboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewSandboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewSandboxRequest.Merge(m, src)
}
func (m *NewSandboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewSandboxRequest proto.InternalMessageInfo

func (m *NewSandboxRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewSandboxRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type NewSandboxResponse struct {
	// record modeling the created sandbox
	Record *SandboxRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *NewSandboxResponse) Reset()         { *m = NewSandboxResponse{} }
func (m *NewSandboxResponse) String() string { return proto.CompactTextString(m) }
func (*NewSandboxResponse) ProtoMessage()    {}
func (*NewSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{1}
}
func (m *NewSandboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewSandboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewSandboxResponse.Merge(m, src)
}
func (m *NewSandboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewSandboxResponse proto.InternalMessageInfo

func (m *NewSandboxResponse) GetRecord() *SandboxRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type SetStateRequest struct {
	// handle to an existing sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// data to set in the sandbox
	Data *SandboxData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SetStateRequest) Reset()         { *m = SetStateRequest{} }
func (m *SetStateRequest) String() string { return proto.CompactTextString(m) }
func (*SetStateRequest) ProtoMessage()    {}
func (*SetStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{2}
}
func (m *SetStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStateRequest.Merge(m, src)
}
func (m *SetStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetStateRequest proto.InternalMessageInfo

func (m *SetStateRequest) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *SetStateRequest) GetData() *SandboxData {
	if m != nil {
		return m.Data
	}
	return nil
}

type SetStateResponse struct {
	// ok indicates the state updated sucessfuly
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// errors represent all recoverable errors found while parsing and setting the sandbox state
	Errors *SandboxDataErrors `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	// record contains a representation of the sandbox's new internal state
	Record *SandboxRecord `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *SetStateResponse) Reset()         { *m = SetStateResponse{} }
func (m *SetStateResponse) String() string { return proto.CompactTextString(m) }
func (*SetStateResponse) ProtoMessage()    {}
func (*SetStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{3}
}
func (m *SetStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStateResponse.Merge(m, src)
}
func (m *SetStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetStateResponse proto.InternalMessageInfo

func (m *SetStateResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetStateResponse) GetErrors() *SandboxDataErrors {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *SetStateResponse) GetRecord() *SandboxRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type GetCatalogueRequest struct {
	// handle to an existing sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *GetCatalogueRequest) Reset()         { *m = GetCatalogueRequest{} }
func (m *GetCatalogueRequest) String() string { return proto.CompactTextString(m) }
func (*GetCatalogueRequest) ProtoMessage()    {}
func (*GetCatalogueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{4}
}
func (m *GetCatalogueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCatalogueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCatalogueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCatalogueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalogueRequest.Merge(m, src)
}
func (m *GetCatalogueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCatalogueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalogueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalogueRequest proto.InternalMessageInfo

func (m *GetCatalogueRequest) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

type GetCatalogueResponse struct {
	// catalogue for the state of the given sandbox
	Catalogue *PolicyCatalogue `protobuf:"bytes,1,opt,name=catalogue,proto3" json:"catalogue,omitempty"`
}

func (m *GetCatalogueResponse) Reset()         { *m = GetCatalogueResponse{} }
func (m *GetCatalogueResponse) String() string { return proto.CompactTextString(m) }
func (*GetCatalogueResponse) ProtoMessage()    {}
func (*GetCatalogueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{5}
}
func (m *GetCatalogueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCatalogueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCatalogueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCatalogueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalogueResponse.Merge(m, src)
}
func (m *GetCatalogueResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCatalogueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalogueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalogueResponse proto.InternalMessageInfo

func (m *GetCatalogueResponse) GetCatalogue() *PolicyCatalogue {
	if m != nil {
		return m.Catalogue
	}
	return nil
}

type VerifyTheoremsRequest struct {
	// handle to an existing sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *VerifyTheoremsRequest) Reset()         { *m = VerifyTheoremsRequest{} }
func (m *VerifyTheoremsRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyTheoremsRequest) ProtoMessage()    {}
func (*VerifyTheoremsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{6}
}
func (m *VerifyTheoremsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTheoremsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTheoremsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTheoremsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTheoremsRequest.Merge(m, src)
}
func (m *VerifyTheoremsRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTheoremsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTheoremsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTheoremsRequest proto.InternalMessageInfo

func (m *VerifyTheoremsRequest) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

type VerifyTheoremsResponse struct {
	// result of the provided sandbox theorem
	Result *AnnotatedPolicyTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *VerifyTheoremsResponse) Reset()         { *m = VerifyTheoremsResponse{} }
func (m *VerifyTheoremsResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyTheoremsResponse) ProtoMessage()    {}
func (*VerifyTheoremsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{7}
}
func (m *VerifyTheoremsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTheoremsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTheoremsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTheoremsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTheoremsResponse.Merge(m, src)
}
func (m *VerifyTheoremsResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTheoremsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTheoremsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTheoremsResponse proto.InternalMessageInfo

func (m *VerifyTheoremsResponse) GetResult() *AnnotatedPolicyTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ListSandboxesRequest struct {
}

func (m *ListSandboxesRequest) Reset()         { *m = ListSandboxesRequest{} }
func (m *ListSandboxesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSandboxesRequest) ProtoMessage()    {}
func (*ListSandboxesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{8}
}
func (m *ListSandboxesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSandboxesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSandboxesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSandboxesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSandboxesRequest.Merge(m, src)
}
func (m *ListSandboxesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSandboxesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSandboxesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSandboxesRequest proto.InternalMessageInfo

type ListSandboxesResponse struct {
	// records contains all sandboxes that exist in a playground
	Records []*SandboxRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *ListSandboxesResponse) Reset()         { *m = ListSandboxesResponse{} }
func (m *ListSandboxesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSandboxesResponse) ProtoMessage()    {}
func (*ListSandboxesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{9}
}
func (m *ListSandboxesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSandboxesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSandboxesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSandboxesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSandboxesResponse.Merge(m, src)
}
func (m *ListSandboxesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSandboxesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSandboxesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSandboxesResponse proto.InternalMessageInfo

func (m *ListSandboxesResponse) GetRecords() []*SandboxRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RestoreScratchpadRequest struct {
	// handle to an existing sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *RestoreScratchpadRequest) Reset()         { *m = RestoreScratchpadRequest{} }
func (m *RestoreScratchpadRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreScratchpadRequest) ProtoMessage()    {}
func (*RestoreScratchpadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{10}
}
func (m *RestoreScratchpadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreScratchpadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreScratchpadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreScratchpadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreScratchpadRequest.Merge(m, src)
}
func (m *RestoreScratchpadRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreScratchpadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreScratchpadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreScratchpadRequest proto.InternalMessageInfo

func (m *RestoreScratchpadRequest) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

type RestoreScratchpadResponse struct {
	// scratchpad contains the data in the restored scratchpad
	Scratchpad *SandboxData `protobuf:"bytes,1,opt,name=scratchpad,proto3" json:"scratchpad,omitempty"`
}

func (m *RestoreScratchpadResponse) Reset()         { *m = RestoreScratchpadResponse{} }
func (m *RestoreScratchpadResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreScratchpadResponse) ProtoMessage()    {}
func (*RestoreScratchpadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{11}
}
func (m *RestoreScratchpadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreScratchpadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreScratchpadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreScratchpadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreScratchpadResponse.Merge(m, src)
}
func (m *RestoreScratchpadResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreScratchpadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreScratchpadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreScratchpadResponse proto.InternalMessageInfo

func (m *RestoreScratchpadResponse) GetScratchpad() *SandboxData {
	if m != nil {
		return m.Scratchpad
	}
	return nil
}

type SimulateRequest struct {
	// data to set in the sandbox
	Data *SandboxData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SimulateRequest) Reset()         { *m = SimulateRequest{} }
func (m *SimulateRequest) String() string { return proto.CompactTextString(m) }
func (*SimulateRequest) ProtoMessage()    {}
func (*SimulateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{12}
}
func (m *SimulateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateRequest.Merge(m, src)
}
func (m *SimulateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateRequest proto.InternalMessageInfo

func (m *SimulateRequest) GetData() *SandboxData {
	if m != nil {
		return m.Data
	}
	return nil
}

type SimulateReponse struct {
	// validate_data flags whether the input SandboxData was sucessfuly loaded
	ValidData bool `protobuf:"varint,1,opt,name=valid_data,json=validData,proto3" json:"valid_data,omitempty"`
	// errors represent all recoverable errors found while parsing and setting the sandbox state
	Errors *SandboxDataErrors `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	// record contains a representation of the sandbox's new internal state
	Record *SandboxRecord `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	// result of the provided sandbox theorem
	Result *AnnotatedPolicyTheoremResult `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SimulateReponse) Reset()         { *m = SimulateReponse{} }
func (m *SimulateReponse) String() string { return proto.CompactTextString(m) }
func (*SimulateReponse) ProtoMessage()    {}
func (*SimulateReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{13}
}
func (m *SimulateReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateReponse.Merge(m, src)
}
func (m *SimulateReponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulateReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateReponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateReponse proto.InternalMessageInfo

func (m *SimulateReponse) GetValidData() bool {
	if m != nil {
		return m.ValidData
	}
	return false
}

func (m *SimulateReponse) GetErrors() *SandboxDataErrors {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *SimulateReponse) GetRecord() *SandboxRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *SimulateReponse) GetResult() *AnnotatedPolicyTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetSandboxRequest struct {
	// handle to an existing sandbox
	Handle uint64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *GetSandboxRequest) Reset()         { *m = GetSandboxRequest{} }
func (m *GetSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*GetSandboxRequest) ProtoMessage()    {}
func (*GetSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{14}
}
func (m *GetSandboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSandboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSandboxRequest.Merge(m, src)
}
func (m *GetSandboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSandboxRequest proto.InternalMessageInfo

func (m *GetSandboxRequest) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

type GetSandboxResponse struct {
	// record contains a representation of the sandbox's new internal state
	Record *SandboxRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetSandboxResponse) Reset()         { *m = GetSandboxResponse{} }
func (m *GetSandboxResponse) String() string { return proto.CompactTextString(m) }
func (*GetSandboxResponse) ProtoMessage()    {}
func (*GetSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_066f4376ca35c9d5, []int{15}
}
func (m *GetSandboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSandboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSandboxResponse.Merge(m, src)
}
func (m *GetSandboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSandboxResponse proto.InternalMessageInfo

func (m *GetSandboxResponse) GetRecord() *SandboxRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*NewSandboxRequest)(nil), "sourcenetwork.acp_core.NewSandboxRequest")
	proto.RegisterType((*NewSandboxResponse)(nil), "sourcenetwork.acp_core.NewSandboxResponse")
	proto.RegisterType((*SetStateRequest)(nil), "sourcenetwork.acp_core.SetStateRequest")
	proto.RegisterType((*SetStateResponse)(nil), "sourcenetwork.acp_core.SetStateResponse")
	proto.RegisterType((*GetCatalogueRequest)(nil), "sourcenetwork.acp_core.GetCatalogueRequest")
	proto.RegisterType((*GetCatalogueResponse)(nil), "sourcenetwork.acp_core.GetCatalogueResponse")
	proto.RegisterType((*VerifyTheoremsRequest)(nil), "sourcenetwork.acp_core.VerifyTheoremsRequest")
	proto.RegisterType((*VerifyTheoremsResponse)(nil), "sourcenetwork.acp_core.VerifyTheoremsResponse")
	proto.RegisterType((*ListSandboxesRequest)(nil), "sourcenetwork.acp_core.ListSandboxesRequest")
	proto.RegisterType((*ListSandboxesResponse)(nil), "sourcenetwork.acp_core.ListSandboxesResponse")
	proto.RegisterType((*RestoreScratchpadRequest)(nil), "sourcenetwork.acp_core.RestoreScratchpadRequest")
	proto.RegisterType((*RestoreScratchpadResponse)(nil), "sourcenetwork.acp_core.RestoreScratchpadResponse")
	proto.RegisterType((*SimulateRequest)(nil), "sourcenetwork.acp_core.SimulateRequest")
	proto.RegisterType((*SimulateReponse)(nil), "sourcenetwork.acp_core.SimulateReponse")
	proto.RegisterType((*GetSandboxRequest)(nil), "sourcenetwork.acp_core.GetSandboxRequest")
	proto.RegisterType((*GetSandboxResponse)(nil), "sourcenetwork.acp_core.GetSandboxResponse")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/playground.proto", fileDescriptor_066f4376ca35c9d5)
}

var fileDescriptor_066f4376ca35c9d5 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xad, 0xd3, 0x28, 0x2f, 0xbd, 0x7d, 0xaf, 0x7d, 0x99, 0xd7, 0x46, 0x79, 0x96, 0x88, 0x2a,
	0xf3, 0xd1, 0x42, 0xdb, 0x04, 0x02, 0x12, 0x2b, 0x84, 0x4a, 0xa9, 0x2a, 0x50, 0x85, 0x2a, 0x1b,
	0x21, 0x84, 0xa8, 0xca, 0xc4, 0x9e, 0x26, 0x56, 0x1c, 0x8f, 0x99, 0x19, 0xb7, 0xcd, 0x8e, 0x9f,
	0xc0, 0x8f, 0xe0, 0xc7, 0xb0, 0xec, 0x92, 0x15, 0x42, 0xed, 0x1f, 0x41, 0xb1, 0xc7, 0x89, 0x93,
	0x66, 0x88, 0x8b, 0x2a, 0xb1, 0x6b, 0x27, 0xe7, 0x9c, 0x7b, 0x7c, 0xe7, 0xdc, 0x6b, 0xc3, 0x2a,
	0xa7, 0x21, 0xb3, 0x89, 0x4f, 0xc4, 0x09, 0x65, 0x9d, 0x3a, 0xb6, 0x83, 0x43, 0x9b, 0x32, 0x52,
	0x0f, 0x3c, 0xdc, 0x6b, 0x31, 0x1a, 0xfa, 0x4e, 0x2d, 0x60, 0x54, 0x50, 0x54, 0x1e, 0x01, 0xd6,
	0x12, 0xa0, 0x7e, 0x47, 0x21, 0x60, 0x63, 0x81, 0x3d, 0xda, 0x0a, 0x49, 0xcc, 0xd7, 0x6f, 0x29,
	0x70, 0x1c, 0xfb, 0x4e, 0x93, 0x9e, 0x4e, 0x41, 0x89, 0x36, 0xa1, 0x8c, 0x74, 0x63, 0x94, 0xf1,
	0x02, 0x4a, 0xaf, 0xc8, 0x89, 0x15, 0x33, 0x4d, 0xf2, 0x31, 0x24, 0x5c, 0x20, 0x04, 0x79, 0x1f,
	0x77, 0x49, 0x45, 0x5b, 0xd1, 0xd6, 0xe6, 0xcc, 0xe8, 0x6f, 0xb4, 0x02, 0xf3, 0x0e, 0xe1, 0x36,
	0x73, 0x03, 0xe1, 0x52, 0xbf, 0x92, 0x8b, 0x7e, 0x4a, 0x1f, 0x19, 0x16, 0xa0, 0xb4, 0x14, 0x0f,
	0xa8, 0xcf, 0x09, 0x7a, 0x02, 0x05, 0x46, 0x6c, 0xca, 0x9c, 0x48, 0x6d, 0xbe, 0x71, 0xbb, 0x36,
	0xf9, 0xe9, 0x6b, 0x03, 0x62, 0x1f, 0x6c, 0x4a, 0x92, 0xd1, 0x84, 0x45, 0x8b, 0x08, 0x4b, 0x60,
	0x41, 0x12, 0x77, 0x65, 0x28, 0xb4, 0xb1, 0xef, 0x78, 0xb1, 0xbf, 0xbc, 0x29, 0xff, 0x43, 0x8f,
	0x21, 0xef, 0x60, 0x81, 0x23, 0x6b, 0xf3, 0x8d, 0x9b, 0x53, 0xea, 0x3c, 0xc7, 0x02, 0x9b, 0x11,
	0xc1, 0xf8, 0xa2, 0xc1, 0xbf, 0xc3, 0x22, 0xd2, 0xf7, 0x02, 0xe4, 0x68, 0x27, 0xaa, 0x50, 0x34,
	0x73, 0xb4, 0x83, 0xb6, 0xa0, 0x40, 0x18, 0xa3, 0x8c, 0x4b, 0xfd, 0xbb, 0x19, 0xf4, 0x77, 0x22,
	0x82, 0x29, 0x89, 0xa9, 0x56, 0xcc, 0xfe, 0x4e, 0x2b, 0x36, 0xe1, 0xbf, 0x5d, 0x22, 0xb6, 0x93,
	0x30, 0x4c, 0x69, 0x87, 0x71, 0x00, 0x4b, 0xa3, 0x70, 0xf9, 0x60, 0x3b, 0x30, 0x37, 0x08, 0x94,
	0xbc, 0x93, 0x55, 0x95, 0x91, 0x7d, 0xea, 0xb9, 0x76, 0x6f, 0xa8, 0x31, 0x64, 0x1a, 0x75, 0x58,
	0x7e, 0x43, 0x98, 0x7b, 0xd4, 0x7b, 0x1d, 0xe7, 0x89, 0x4f, 0xf3, 0x73, 0x04, 0xe5, 0x71, 0x82,
	0x74, 0xb4, 0xd7, 0xef, 0x0b, 0x0f, 0x3d, 0x21, 0xed, 0x3c, 0x52, 0xd9, 0xd9, 0xf2, 0x7d, 0xda,
	0xbf, 0x24, 0x27, 0xf6, 0x25, 0x85, 0xcc, 0x88, 0x6b, 0x4a, 0x0d, 0xa3, 0x0c, 0x4b, 0x7b, 0x2e,
	0x17, 0xb2, 0x87, 0x24, 0xf1, 0x65, 0xbc, 0x85, 0xe5, 0xb1, 0x73, 0x59, 0xfe, 0x29, 0xfc, 0x15,
	0x77, 0x98, 0x57, 0xb4, 0x95, 0xd9, 0xec, 0xf7, 0x92, 0xb0, 0x8c, 0x06, 0x54, 0x4c, 0xc2, 0x05,
	0x65, 0xc4, 0xb2, 0x19, 0x16, 0x76, 0x3b, 0xc0, 0xce, 0xb4, 0x6e, 0x7c, 0x80, 0xff, 0x27, 0x70,
	0xa4, 0xa3, 0x6d, 0x00, 0x3e, 0x38, 0x95, 0x4d, 0xc9, 0x94, 0xe7, 0x14, 0xcd, 0x78, 0x09, 0x8b,
	0x96, 0xdb, 0x0d, 0xbd, 0xd4, 0xe4, 0x24, 0x13, 0xa2, 0x5d, 0x75, 0x42, 0x3e, 0xe5, 0xd2, 0x62,
	0xb1, 0xc9, 0x1b, 0x00, 0xc7, 0xd8, 0x73, 0x9d, 0xc3, 0x81, 0x64, 0xd1, 0x9c, 0x8b, 0x4e, 0xfa,
	0xc4, 0x3f, 0x3f, 0x2f, 0xa9, 0x58, 0xe5, 0xaf, 0x21, 0x56, 0xeb, 0x50, 0xda, 0x25, 0x62, 0x6c,
	0x51, 0xaa, 0x6e, 0xd7, 0x02, 0x94, 0x06, 0x5f, 0xcb, 0x2a, 0x6c, 0x7c, 0x2f, 0x40, 0x69, 0x7f,
	0xf0, 0x2e, 0xb1, 0x08, 0x3b, 0x76, 0x6d, 0x82, 0x6c, 0x80, 0xe1, 0xd6, 0x45, 0xca, 0x2e, 0x5f,
	0x5a, 0xf2, 0xfa, 0xbd, 0x2c, 0x50, 0xe9, 0xdc, 0x83, 0x7f, 0x46, 0x66, 0x07, 0x6d, 0xa8, 0xc8,
	0x93, 0x46, 0x4f, 0xdf, 0xcc, 0x88, 0x96, 0xd5, 0x0e, 0xa0, 0x98, 0xac, 0x63, 0xa4, 0x5c, 0x4d,
	0x63, 0x6f, 0x05, 0x7d, 0x6d, 0x3a, 0x50, 0xca, 0x9f, 0x42, 0xe9, 0xd2, 0xe8, 0xa1, 0xfb, 0x2a,
	0xba, 0x6a, 0xb2, 0xf5, 0x07, 0x57, 0x60, 0xc8, 0xca, 0x2e, 0xfc, 0x9d, 0x5e, 0xc9, 0x68, 0x5d,
	0x25, 0x31, 0x61, 0xcf, 0xeb, 0x1b, 0xd9, 0xc0, 0xb2, 0x94, 0x0d, 0x30, 0x4c, 0xa0, 0x3a, 0x16,
	0x97, 0x22, 0xad, 0x8e, 0xc5, 0x84, 0x40, 0x53, 0x58, 0x18, 0x5d, 0xe9, 0x48, 0x79, 0xd3, 0x13,
	0xdf, 0x15, 0x7a, 0x2d, 0x2b, 0x5c, 0x16, 0x7c, 0x0f, 0xc5, 0x64, 0x0d, 0xfd, 0x22, 0x19, 0xa3,
	0x5b, 0x4f, 0xcf, 0x00, 0x8c, 0xd4, 0x9f, 0xed, 0x7c, 0x3d, 0xaf, 0x6a, 0x67, 0xe7, 0x55, 0xed,
	0xc7, 0x79, 0x55, 0xfb, 0x7c, 0x51, 0x9d, 0x39, 0xbb, 0xa8, 0xce, 0x7c, 0xbb, 0xa8, 0xce, 0xbc,
	0x5b, 0x6f, 0xb9, 0xa2, 0x1d, 0x36, 0x6b, 0x36, 0xed, 0xd6, 0x55, 0x5f, 0x79, 0x9d, 0x56, 0x5d,
	0xf4, 0x02, 0xc2, 0x9b, 0x85, 0xe8, 0xcb, 0xea, 0xe1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43,
	0xd1, 0x14, 0xd6, 0x10, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlaygroundServiceClient is the client API for PlaygroundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaygroundServiceClient interface {
	// NewSandbox creates a new isolated execution environment in the Service
	// Returns a handle which references the sandbox
	NewSandbox(ctx context.Context, in *NewSandboxRequest, opts ...grpc.CallOption) (*NewSandboxResponse, error)
	// ListSandboxes returns the list of sandboxes created in the Playgruond
	ListSandboxes(ctx context.Context, in *ListSandboxesRequest, opts ...grpc.CallOption) (*ListSandboxesResponse, error)
	// SetState updates the state of a Sandbox environment with the newly provided data
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	// RestoreScratchpad restores the data in scratchpad to match the currently loaded sandbox state
	RestoreScratchpad(ctx context.Context, in *RestoreScratchpadRequest, opts ...grpc.CallOption) (*RestoreScratchpadResponse, error)
	// GetCatalogue returns the catalogue (index/LUT) of defined entities within a sandbox
	GetCatalogue(ctx context.Context, in *GetCatalogueRequest, opts ...grpc.CallOption) (*GetCatalogueResponse, error)
	// GetSandbox returns the internal sandbox state of a sandbox
	GetSandbox(ctx context.Context, in *GetSandboxRequest, opts ...grpc.CallOption) (*GetSandboxResponse, error)
	// VerifyTheorems executes the defined test suite for a sandbox
	VerifyTheorems(ctx context.Context, in *VerifyTheoremsRequest, opts ...grpc.CallOption) (*VerifyTheoremsResponse, error)
	// Simulate receives Sandbox state data and a theorem, creates an ephemeral sandbox
	// evaluates the given theorem against the sandbox's policy and returns the result
	// Simulate is a oneshot operation and persists no state in the process.
	Simulate(ctx context.Context, in *SimulateRequest, opts ...grpc.CallOption) (*SimulateReponse, error)
}

type playgroundServiceClient struct {
	cc grpc1.ClientConn
}

func NewPlaygroundServiceClient(cc grpc1.ClientConn) PlaygroundServiceClient {
	return &playgroundServiceClient{cc}
}

func (c *playgroundServiceClient) NewSandbox(ctx context.Context, in *NewSandboxRequest, opts ...grpc.CallOption) (*NewSandboxResponse, error) {
	out := new(NewSandboxResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/NewSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) ListSandboxes(ctx context.Context, in *ListSandboxesRequest, opts ...grpc.CallOption) (*ListSandboxesResponse, error) {
	out := new(ListSandboxesResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/ListSandboxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) RestoreScratchpad(ctx context.Context, in *RestoreScratchpadRequest, opts ...grpc.CallOption) (*RestoreScratchpadResponse, error) {
	out := new(RestoreScratchpadResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/RestoreScratchpad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) GetCatalogue(ctx context.Context, in *GetCatalogueRequest, opts ...grpc.CallOption) (*GetCatalogueResponse, error) {
	out := new(GetCatalogueResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/GetCatalogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) GetSandbox(ctx context.Context, in *GetSandboxRequest, opts ...grpc.CallOption) (*GetSandboxResponse, error) {
	out := new(GetSandboxResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/GetSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) VerifyTheorems(ctx context.Context, in *VerifyTheoremsRequest, opts ...grpc.CallOption) (*VerifyTheoremsResponse, error) {
	out := new(VerifyTheoremsResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/VerifyTheorems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundServiceClient) Simulate(ctx context.Context, in *SimulateRequest, opts ...grpc.CallOption) (*SimulateReponse, error) {
	out := new(SimulateReponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.PlaygroundService/Simulate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaygroundServiceServer is the server API for PlaygroundService service.
type PlaygroundServiceServer interface {
	// NewSandbox creates a new isolated execution environment in the Service
	// Returns a handle which references the sandbox
	NewSandbox(context.Context, *NewSandboxRequest) (*NewSandboxResponse, error)
	// ListSandboxes returns the list of sandboxes created in the Playgruond
	ListSandboxes(context.Context, *ListSandboxesRequest) (*ListSandboxesResponse, error)
	// SetState updates the state of a Sandbox environment with the newly provided data
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	// RestoreScratchpad restores the data in scratchpad to match the currently loaded sandbox state
	RestoreScratchpad(context.Context, *RestoreScratchpadRequest) (*RestoreScratchpadResponse, error)
	// GetCatalogue returns the catalogue (index/LUT) of defined entities within a sandbox
	GetCatalogue(context.Context, *GetCatalogueRequest) (*GetCatalogueResponse, error)
	// GetSandbox returns the internal sandbox state of a sandbox
	GetSandbox(context.Context, *GetSandboxRequest) (*GetSandboxResponse, error)
	// VerifyTheorems executes the defined test suite for a sandbox
	VerifyTheorems(context.Context, *VerifyTheoremsRequest) (*VerifyTheoremsResponse, error)
	// Simulate receives Sandbox state data and a theorem, creates an ephemeral sandbox
	// evaluates the given theorem against the sandbox's policy and returns the result
	// Simulate is a oneshot operation and persists no state in the process.
	Simulate(context.Context, *SimulateRequest) (*SimulateReponse, error)
}

// UnimplementedPlaygroundServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlaygroundServiceServer struct {
}

func (*UnimplementedPlaygroundServiceServer) NewSandbox(ctx context.Context, req *NewSandboxRequest) (*NewSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSandbox not implemented")
}
func (*UnimplementedPlaygroundServiceServer) ListSandboxes(ctx context.Context, req *ListSandboxesRequest) (*ListSandboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSandboxes not implemented")
}
func (*UnimplementedPlaygroundServiceServer) SetState(ctx context.Context, req *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (*UnimplementedPlaygroundServiceServer) RestoreScratchpad(ctx context.Context, req *RestoreScratchpadRequest) (*RestoreScratchpadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreScratchpad not implemented")
}
func (*UnimplementedPlaygroundServiceServer) GetCatalogue(ctx context.Context, req *GetCatalogueRequest) (*GetCatalogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogue not implemented")
}
func (*UnimplementedPlaygroundServiceServer) GetSandbox(ctx context.Context, req *GetSandboxRequest) (*GetSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSandbox not implemented")
}
func (*UnimplementedPlaygroundServiceServer) VerifyTheorems(ctx context.Context, req *VerifyTheoremsRequest) (*VerifyTheoremsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTheorems not implemented")
}
func (*UnimplementedPlaygroundServiceServer) Simulate(ctx context.Context, req *SimulateRequest) (*SimulateReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Simulate not implemented")
}

func RegisterPlaygroundServiceServer(s grpc1.Server, srv PlaygroundServiceServer) {
	s.RegisterService(&_PlaygroundService_serviceDesc, srv)
}

func _PlaygroundService_NewSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).NewSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/NewSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).NewSandbox(ctx, req.(*NewSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_ListSandboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSandboxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).ListSandboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/ListSandboxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).ListSandboxes(ctx, req.(*ListSandboxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_RestoreScratchpad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreScratchpadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).RestoreScratchpad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/RestoreScratchpad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).RestoreScratchpad(ctx, req.(*RestoreScratchpadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_GetCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).GetCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/GetCatalogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).GetCatalogue(ctx, req.(*GetCatalogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_GetSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).GetSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/GetSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).GetSandbox(ctx, req.(*GetSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_VerifyTheorems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTheoremsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).VerifyTheorems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/VerifyTheorems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).VerifyTheorems(ctx, req.(*VerifyTheoremsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaygroundService_Simulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServiceServer).Simulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.PlaygroundService/Simulate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServiceServer).Simulate(ctx, req.(*SimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var PlaygroundService_serviceDesc = _PlaygroundService_serviceDesc
var _PlaygroundService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sourcenetwork.acp_core.PlaygroundService",
	HandlerType: (*PlaygroundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSandbox",
			Handler:    _PlaygroundService_NewSandbox_Handler,
		},
		{
			MethodName: "ListSandboxes",
			Handler:    _PlaygroundService_ListSandboxes_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _PlaygroundService_SetState_Handler,
		},
		{
			MethodName: "RestoreScratchpad",
			Handler:    _PlaygroundService_RestoreScratchpad_Handler,
		},
		{
			MethodName: "GetCatalogue",
			Handler:    _PlaygroundService_GetCatalogue_Handler,
		},
		{
			MethodName: "GetSandbox",
			Handler:    _PlaygroundService_GetSandbox_Handler,
		},
		{
			MethodName: "VerifyTheorems",
			Handler:    _PlaygroundService_VerifyTheorems_Handler,
		},
		{
			MethodName: "Simulate",
			Handler:    _PlaygroundService_Simulate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sourcenetwork/acp_core/playground.proto",
}

func (m *NewSandboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewSandboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewSandboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPlayground(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlayground(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewSandboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewSandboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewSandboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Handle != 0 {
		i = encodeVarintPlayground(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Errors != nil {
		{
			size, err := m.Errors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCatalogueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCatalogueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCatalogueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		i = encodeVarintPlayground(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCatalogueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCatalogueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCatalogueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Catalogue != nil {
		{
			size, err := m.Catalogue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTheoremsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTheoremsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTheoremsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		i = encodeVarintPlayground(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTheoremsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTheoremsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTheoremsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSandboxesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSandboxesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSandboxesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListSandboxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSandboxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSandboxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlayground(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RestoreScratchpadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreScratchpadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreScratchpadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		i = encodeVarintPlayground(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestoreScratchpadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreScratchpadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreScratchpadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scratchpad != nil {
		{
			size, err := m.Scratchpad.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulateReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Errors != nil {
		{
			size, err := m.Errors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ValidData {
		i--
		if m.ValidData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSandboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSandboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSandboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		i = encodeVarintPlayground(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSandboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSandboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSandboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayground(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayground(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayground(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewSandboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayground(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *NewSandboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *SetStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovPlayground(uint64(m.Handle))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *SetStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.Errors != nil {
		l = m.Errors.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *GetCatalogueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovPlayground(uint64(m.Handle))
	}
	return n
}

func (m *GetCatalogueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Catalogue != nil {
		l = m.Catalogue.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *VerifyTheoremsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovPlayground(uint64(m.Handle))
	}
	return n
}

func (m *VerifyTheoremsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *ListSandboxesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListSandboxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovPlayground(uint64(l))
		}
	}
	return n
}

func (m *RestoreScratchpadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovPlayground(uint64(m.Handle))
	}
	return n
}

func (m *RestoreScratchpadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scratchpad != nil {
		l = m.Scratchpad.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *SimulateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *SimulateReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidData {
		n += 2
	}
	if m.Errors != nil {
		l = m.Errors.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func (m *GetSandboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovPlayground(uint64(m.Handle))
	}
	return n
}

func (m *GetSandboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPlayground(uint64(l))
	}
	return n
}

func sovPlayground(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayground(x uint64) (n int) {
	return sovPlayground(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewSandboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewSandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewSandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewSandboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewSandboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewSandboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &SandboxRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SandboxData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errors == nil {
				m.Errors = &SandboxDataErrors{}
			}
			if err := m.Errors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &SandboxRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCatalogueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCatalogueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCatalogueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCatalogueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCatalogueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCatalogueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Catalogue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Catalogue == nil {
				m.Catalogue = &PolicyCatalogue{}
			}
			if err := m.Catalogue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTheoremsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTheoremsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTheoremsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTheoremsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTheoremsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTheoremsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AnnotatedPolicyTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSandboxesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSandboxesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSandboxesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSandboxesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSandboxesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSandboxesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &SandboxRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreScratchpadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreScratchpadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreScratchpadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreScratchpadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreScratchpadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreScratchpadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scratchpad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scratchpad == nil {
				m.Scratchpad = &SandboxData{}
			}
			if err := m.Scratchpad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SandboxData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulateReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulateReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidData = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errors == nil {
				m.Errors = &SandboxDataErrors{}
			}
			if err := m.Errors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &SandboxRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AnnotatedPolicyTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSandboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSandboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSandboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSandboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayground
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayground
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &SandboxRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayground(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayground
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayground(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayground
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayground
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayground
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayground
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayground
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayground        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayground          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayground = fmt.Errorf("proto: unexpected end of group")
)
