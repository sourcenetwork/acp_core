// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/parsing.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Severity int32

const (
	Severity_WARNING Severity = 0
	Severity_ERROR   Severity = 1
)

var Severity_name = map[int32]string{
	0: "WARNING",
	1: "ERROR",
}

var Severity_value = map[string]int32{
	"WARNING": 0,
	"ERROR":   1,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe89de3e4b5eb608, []int{0}
}

// ParserMessage models a message returned by a parser, which points
// to a position in the given text input
type ParserMessage struct {
	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Sevirity    string `protobuf:"bytes,2,opt,name=sevirity,proto3" json:"sevirity,omitempty"`
	LineStart   uint64 `protobuf:"varint,3,opt,name=line_start,json=lineStart,proto3" json:"line_start,omitempty"`
	ColumnStart uint64 `protobuf:"varint,4,opt,name=column_start,json=columnStart,proto3" json:"column_start,omitempty"`
	LineEnd     uint64 `protobuf:"varint,5,opt,name=line_end,json=lineEnd,proto3" json:"line_end,omitempty"`
	ColumnEnd   uint64 `protobuf:"varint,6,opt,name=column_end,json=columnEnd,proto3" json:"column_end,omitempty"`
}

func (m *ParserMessage) Reset()         { *m = ParserMessage{} }
func (m *ParserMessage) String() string { return proto.CompactTextString(m) }
func (*ParserMessage) ProtoMessage()    {}
func (*ParserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe89de3e4b5eb608, []int{0}
}
func (m *ParserMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParserMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserMessage.Merge(m, src)
}
func (m *ParserMessage) XXX_Size() int {
	return m.Size()
}
func (m *ParserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ParserMessage proto.InternalMessageInfo

func (m *ParserMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ParserMessage) GetSevirity() string {
	if m != nil {
		return m.Sevirity
	}
	return ""
}

func (m *ParserMessage) GetLineStart() uint64 {
	if m != nil {
		return m.LineStart
	}
	return 0
}

func (m *ParserMessage) GetColumnStart() uint64 {
	if m != nil {
		return m.ColumnStart
	}
	return 0
}

func (m *ParserMessage) GetLineEnd() uint64 {
	if m != nil {
		return m.LineEnd
	}
	return 0
}

func (m *ParserMessage) GetColumnEnd() uint64 {
	if m != nil {
		return m.ColumnEnd
	}
	return 0
}

// ParserReport contains a set of messages returned while parsing some input
type ParserReport struct {
	ParserInput string           `protobuf:"bytes,1,opt,name=parser_input,json=parserInput,proto3" json:"parser_input,omitempty"`
	Messages    []*ParserMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *ParserReport) Reset()         { *m = ParserReport{} }
func (m *ParserReport) String() string { return proto.CompactTextString(m) }
func (*ParserReport) ProtoMessage()    {}
func (*ParserReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe89de3e4b5eb608, []int{1}
}
func (m *ParserReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParserReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParserReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParserReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserReport.Merge(m, src)
}
func (m *ParserReport) XXX_Size() int {
	return m.Size()
}
func (m *ParserReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserReport.DiscardUnknown(m)
}

var xxx_messageInfo_ParserReport proto.InternalMessageInfo

func (m *ParserReport) GetParserInput() string {
	if m != nil {
		return m.ParserInput
	}
	return ""
}

func (m *ParserReport) GetMessages() []*ParserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.Severity", Severity_name, Severity_value)
	proto.RegisterType((*ParserMessage)(nil), "sourcenetwork.acp_core.ParserMessage")
	proto.RegisterType((*ParserReport)(nil), "sourcenetwork.acp_core.ParserReport")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/parsing.proto", fileDescriptor_fe89de3e4b5eb608)
}

var fileDescriptor_fe89de3e4b5eb608 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x33, 0xfd, 0x9b, 0x4e, 0xfa, 0x41, 0xc9, 0xe2, 0x23, 0x0a, 0x86, 0x5a, 0x14, 0x8a,
	0x42, 0x02, 0xfa, 0x04, 0x15, 0x82, 0x74, 0x61, 0x95, 0xe9, 0x42, 0x70, 0x53, 0xd2, 0xf4, 0x12,
	0x43, 0xdb, 0x99, 0x61, 0x66, 0x52, 0xe9, 0x5b, 0xf8, 0x4a, 0xee, 0x5c, 0x76, 0xe9, 0x52, 0xda,
	0x17, 0x91, 0xcc, 0xa4, 0x85, 0x82, 0xee, 0xe6, 0xfc, 0xee, 0xb9, 0x77, 0x38, 0xf7, 0xe2, 0x0b,
	0xc9, 0x72, 0x91, 0x00, 0x05, 0xf5, 0xc6, 0xc4, 0x3c, 0x8c, 0x13, 0x3e, 0x49, 0x98, 0x80, 0x90,
	0xc7, 0x42, 0x66, 0x34, 0x0d, 0xb8, 0x60, 0x8a, 0xb9, 0xff, 0x8f, 0x5c, 0xc1, 0xde, 0xd5, 0xfb,
	0x40, 0xf8, 0xdf, 0x53, 0x2c, 0x24, 0x88, 0x07, 0x90, 0x32, 0x4e, 0xc1, 0xf5, 0x70, 0x73, 0x69,
	0x9e, 0x1e, 0xea, 0xa2, 0x7e, 0x8b, 0xec, 0xa5, 0x7b, 0x8a, 0x6d, 0x09, 0xab, 0x4c, 0x64, 0x6a,
	0xed, 0x55, 0x74, 0xe9, 0xa0, 0xdd, 0x33, 0x8c, 0x17, 0x19, 0x85, 0x89, 0x54, 0xb1, 0x50, 0x5e,
	0xb5, 0x8b, 0xfa, 0x35, 0xd2, 0x2a, 0xc8, 0xb8, 0x00, 0xee, 0x39, 0x6e, 0x27, 0x6c, 0x91, 0x2f,
	0x69, 0x69, 0xa8, 0x69, 0x83, 0x63, 0x98, 0xb1, 0x9c, 0x60, 0x5b, 0x4f, 0x00, 0x3a, 0xf3, 0xea,
	0xba, 0xdc, 0x2c, 0x74, 0x44, 0x67, 0xc5, 0xf0, 0xb2, 0xbb, 0x28, 0x36, 0xcc, 0x70, 0x43, 0x22,
	0x3a, 0xeb, 0x29, 0xdc, 0x36, 0x11, 0x08, 0x70, 0x66, 0x3e, 0xe3, 0x5a, 0x4f, 0x32, 0xca, 0x73,
	0x55, 0xc6, 0x70, 0x0c, 0x1b, 0x16, 0xc8, 0x1d, 0x60, 0xbb, 0x4c, 0x25, 0xbd, 0x4a, 0xb7, 0xda,
	0x77, 0x6e, 0x2e, 0x83, 0xdf, 0x37, 0x14, 0x1c, 0x6d, 0x87, 0x1c, 0xda, 0xae, 0x7a, 0xd8, 0x1e,
	0xc3, 0x0a, 0x74, 0x7a, 0x07, 0x37, 0x9f, 0x07, 0x64, 0x34, 0x1c, 0xdd, 0x77, 0x2c, 0xb7, 0x85,
	0xeb, 0x11, 0x21, 0x8f, 0xa4, 0x83, 0xee, 0xa2, 0xcf, 0xad, 0x8f, 0x36, 0x5b, 0x1f, 0x7d, 0x6f,
	0x7d, 0xf4, 0xbe, 0xf3, 0xad, 0xcd, 0xce, 0xb7, 0xbe, 0x76, 0xbe, 0xf5, 0x72, 0x9d, 0x66, 0xea,
	0x35, 0x9f, 0x06, 0x09, 0x5b, 0x86, 0x7f, 0x1d, 0x70, 0x9e, 0x86, 0x6a, 0xcd, 0x41, 0x4e, 0x1b,
	0xfa, 0x86, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x81, 0x68, 0x99, 0xeb, 0x01, 0x00,
	0x00,
}

func (m *ParserMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParserMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParserMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnEnd != 0 {
		i = encodeVarintParsing(dAtA, i, uint64(m.ColumnEnd))
		i--
		dAtA[i] = 0x30
	}
	if m.LineEnd != 0 {
		i = encodeVarintParsing(dAtA, i, uint64(m.LineEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.ColumnStart != 0 {
		i = encodeVarintParsing(dAtA, i, uint64(m.ColumnStart))
		i--
		dAtA[i] = 0x20
	}
	if m.LineStart != 0 {
		i = encodeVarintParsing(dAtA, i, uint64(m.LineStart))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sevirity) > 0 {
		i -= len(m.Sevirity)
		copy(dAtA[i:], m.Sevirity)
		i = encodeVarintParsing(dAtA, i, uint64(len(m.Sevirity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintParsing(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParserReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParserReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParserReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParsing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ParserInput) > 0 {
		i -= len(m.ParserInput)
		copy(dAtA[i:], m.ParserInput)
		i = encodeVarintParsing(dAtA, i, uint64(len(m.ParserInput)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParsing(dAtA []byte, offset int, v uint64) int {
	offset -= sovParsing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParserMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovParsing(uint64(l))
	}
	l = len(m.Sevirity)
	if l > 0 {
		n += 1 + l + sovParsing(uint64(l))
	}
	if m.LineStart != 0 {
		n += 1 + sovParsing(uint64(m.LineStart))
	}
	if m.ColumnStart != 0 {
		n += 1 + sovParsing(uint64(m.ColumnStart))
	}
	if m.LineEnd != 0 {
		n += 1 + sovParsing(uint64(m.LineEnd))
	}
	if m.ColumnEnd != 0 {
		n += 1 + sovParsing(uint64(m.ColumnEnd))
	}
	return n
}

func (m *ParserReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParserInput)
	if l > 0 {
		n += 1 + l + sovParsing(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovParsing(uint64(l))
		}
	}
	return n
}

func sovParsing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParsing(x uint64) (n int) {
	return sovParsing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParserMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParsing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParserMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParserMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParsing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParsing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sevirity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParsing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParsing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sevirity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineStart", wireType)
			}
			m.LineStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnStart", wireType)
			}
			m.ColumnStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineEnd", wireType)
			}
			m.LineEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnEnd", wireType)
			}
			m.ColumnEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParsing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParsing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParserReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParsing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParserReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParserReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParserInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParsing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParsing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParserInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParsing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParsing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ParserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParsing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParsing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParsing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParsing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParsing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParsing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParsing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParsing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParsing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParsing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParsing = fmt.Errorf("proto: unexpected end of group")
)
