// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/engine.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreatePolicyRequest struct {
	Policy      string               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	MarshalType PolicyMarshalingType `protobuf:"varint,2,opt,name=marshal_type,json=marshalType,proto3,enum=sourcenetwork.acp_core.PolicyMarshalingType" json:"marshal_type,omitempty"`
	Metadata    *SuppliedMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *CreatePolicyRequest) Reset()         { *m = CreatePolicyRequest{} }
func (m *CreatePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePolicyRequest) ProtoMessage()    {}
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{0}
}
func (m *CreatePolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePolicyRequest.Merge(m, src)
}
func (m *CreatePolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePolicyRequest proto.InternalMessageInfo

func (m *CreatePolicyRequest) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *CreatePolicyRequest) GetMarshalType() PolicyMarshalingType {
	if m != nil {
		return m.MarshalType
	}
	return PolicyMarshalingType_UNKNOWN
}

func (m *CreatePolicyRequest) GetMetadata() *SuppliedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type CreatePolicyResponse struct {
	Record *PolicyRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *CreatePolicyResponse) Reset()         { *m = CreatePolicyResponse{} }
func (m *CreatePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePolicyResponse) ProtoMessage()    {}
func (*CreatePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{1}
}
func (m *CreatePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePolicyResponse.Merge(m, src)
}
func (m *CreatePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePolicyResponse proto.InternalMessageInfo

func (m *CreatePolicyResponse) GetRecord() *PolicyRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type SetRelationshipRequest struct {
	PolicyId     string            `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *Relationship     `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	Metadata     *SuppliedMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SetRelationshipRequest) Reset()         { *m = SetRelationshipRequest{} }
func (m *SetRelationshipRequest) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipRequest) ProtoMessage()    {}
func (*SetRelationshipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{2}
}
func (m *SetRelationshipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipRequest.Merge(m, src)
}
func (m *SetRelationshipRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipRequest proto.InternalMessageInfo

func (m *SetRelationshipRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *SetRelationshipRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *SetRelationshipRequest) GetMetadata() *SuppliedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type SetRelationshipResponse struct {
	// Indicates whether the given Relationship previously existed, ie the Tx was a no op
	RecordExisted bool                `protobuf:"varint,1,opt,name=record_existed,json=recordExisted,proto3" json:"record_existed,omitempty"`
	Record        *RelationshipRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *SetRelationshipResponse) Reset()         { *m = SetRelationshipResponse{} }
func (m *SetRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipResponse) ProtoMessage()    {}
func (*SetRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{3}
}
func (m *SetRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipResponse.Merge(m, src)
}
func (m *SetRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipResponse proto.InternalMessageInfo

func (m *SetRelationshipResponse) GetRecordExisted() bool {
	if m != nil {
		return m.RecordExisted
	}
	return false
}

func (m *SetRelationshipResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type DeleteRelationshipRequest struct {
	PolicyId     string        `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *Relationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (m *DeleteRelationshipRequest) Reset()         { *m = DeleteRelationshipRequest{} }
func (m *DeleteRelationshipRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipRequest) ProtoMessage()    {}
func (*DeleteRelationshipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{4}
}
func (m *DeleteRelationshipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipRequest.Merge(m, src)
}
func (m *DeleteRelationshipRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipRequest proto.InternalMessageInfo

func (m *DeleteRelationshipRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *DeleteRelationshipRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

type DeleteRelationshipResponse struct {
	RecordFound bool `protobuf:"varint,1,opt,name=record_found,json=recordFound,proto3" json:"record_found,omitempty"`
}

func (m *DeleteRelationshipResponse) Reset()         { *m = DeleteRelationshipResponse{} }
func (m *DeleteRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipResponse) ProtoMessage()    {}
func (*DeleteRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{5}
}
func (m *DeleteRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipResponse.Merge(m, src)
}
func (m *DeleteRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipResponse proto.InternalMessageInfo

func (m *DeleteRelationshipResponse) GetRecordFound() bool {
	if m != nil {
		return m.RecordFound
	}
	return false
}

type RegisterObjectRequest struct {
	PolicyId string            `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object           `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Metadata *SuppliedMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RegisterObjectRequest) Reset()         { *m = RegisterObjectRequest{} }
func (m *RegisterObjectRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectRequest) ProtoMessage()    {}
func (*RegisterObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{6}
}
func (m *RegisterObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectRequest.Merge(m, src)
}
func (m *RegisterObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectRequest proto.InternalMessageInfo

func (m *RegisterObjectRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *RegisterObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *RegisterObjectRequest) GetMetadata() *SuppliedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type RegisterObjectResponse struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *RegisterObjectResponse) Reset()         { *m = RegisterObjectResponse{} }
func (m *RegisterObjectResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectResponse) ProtoMessage()    {}
func (*RegisterObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{7}
}
func (m *RegisterObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectResponse.Merge(m, src)
}
func (m *RegisterObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectResponse proto.InternalMessageInfo

func (m *RegisterObjectResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type ArchiveObjectRequest struct {
	PolicyId string  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *ArchiveObjectRequest) Reset()         { *m = ArchiveObjectRequest{} }
func (m *ArchiveObjectRequest) String() string { return proto.CompactTextString(m) }
func (*ArchiveObjectRequest) ProtoMessage()    {}
func (*ArchiveObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{8}
}
func (m *ArchiveObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveObjectRequest.Merge(m, src)
}
func (m *ArchiveObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveObjectRequest proto.InternalMessageInfo

func (m *ArchiveObjectRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *ArchiveObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type ArchiveObjectResponse struct {
	RelationshipsRemoved uint64 `protobuf:"varint,1,opt,name=relationships_removed,json=relationshipsRemoved,proto3" json:"relationships_removed,omitempty"`
	RecordModified       bool   `protobuf:"varint,2,opt,name=record_modified,json=recordModified,proto3" json:"record_modified,omitempty"`
}

func (m *ArchiveObjectResponse) Reset()         { *m = ArchiveObjectResponse{} }
func (m *ArchiveObjectResponse) String() string { return proto.CompactTextString(m) }
func (*ArchiveObjectResponse) ProtoMessage()    {}
func (*ArchiveObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{9}
}
func (m *ArchiveObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveObjectResponse.Merge(m, src)
}
func (m *ArchiveObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveObjectResponse proto.InternalMessageInfo

func (m *ArchiveObjectResponse) GetRelationshipsRemoved() uint64 {
	if m != nil {
		return m.RelationshipsRemoved
	}
	return 0
}

func (m *ArchiveObjectResponse) GetRecordModified() bool {
	if m != nil {
		return m.RecordModified
	}
	return false
}

type GetObjectRegistrationRequest struct {
	PolicyId string  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *GetObjectRegistrationRequest) Reset()         { *m = GetObjectRegistrationRequest{} }
func (m *GetObjectRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*GetObjectRegistrationRequest) ProtoMessage()    {}
func (*GetObjectRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{10}
}
func (m *GetObjectRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectRegistrationRequest.Merge(m, src)
}
func (m *GetObjectRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectRegistrationRequest proto.InternalMessageInfo

func (m *GetObjectRegistrationRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *GetObjectRegistrationRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type GetObjectRegistrationResponse struct {
	IsRegistered bool                `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	OwnerId      string              `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Record       *RelationshipRecord `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetObjectRegistrationResponse) Reset()         { *m = GetObjectRegistrationResponse{} }
func (m *GetObjectRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*GetObjectRegistrationResponse) ProtoMessage()    {}
func (*GetObjectRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{11}
}
func (m *GetObjectRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectRegistrationResponse.Merge(m, src)
}
func (m *GetObjectRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectRegistrationResponse proto.InternalMessageInfo

func (m *GetObjectRegistrationResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *GetObjectRegistrationResponse) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *GetObjectRegistrationResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type FilterRelationshipsRequest struct {
	PolicyId string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Selector *RelationshipSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (m *FilterRelationshipsRequest) Reset()         { *m = FilterRelationshipsRequest{} }
func (m *FilterRelationshipsRequest) String() string { return proto.CompactTextString(m) }
func (*FilterRelationshipsRequest) ProtoMessage()    {}
func (*FilterRelationshipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{12}
}
func (m *FilterRelationshipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterRelationshipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterRelationshipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterRelationshipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterRelationshipsRequest.Merge(m, src)
}
func (m *FilterRelationshipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FilterRelationshipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterRelationshipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilterRelationshipsRequest proto.InternalMessageInfo

func (m *FilterRelationshipsRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *FilterRelationshipsRequest) GetSelector() *RelationshipSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

type FilterRelationshipsResponse struct {
	Records []*RelationshipRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *FilterRelationshipsResponse) Reset()         { *m = FilterRelationshipsResponse{} }
func (m *FilterRelationshipsResponse) String() string { return proto.CompactTextString(m) }
func (*FilterRelationshipsResponse) ProtoMessage()    {}
func (*FilterRelationshipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{13}
}
func (m *FilterRelationshipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterRelationshipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterRelationshipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterRelationshipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterRelationshipsResponse.Merge(m, src)
}
func (m *FilterRelationshipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FilterRelationshipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterRelationshipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FilterRelationshipsResponse proto.InternalMessageInfo

func (m *FilterRelationshipsResponse) GetRecords() []*RelationshipRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type GetPolicyRequest struct {
	// id of the Policy to be fetched
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPolicyRequest) Reset()         { *m = GetPolicyRequest{} }
func (m *GetPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPolicyRequest) ProtoMessage()    {}
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{14}
}
func (m *GetPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyRequest.Merge(m, src)
}
func (m *GetPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyRequest proto.InternalMessageInfo

func (m *GetPolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPolicyResponse struct {
	Record *PolicyRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetPolicyResponse) Reset()         { *m = GetPolicyResponse{} }
func (m *GetPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyResponse) ProtoMessage()    {}
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{15}
}
func (m *GetPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyResponse.Merge(m, src)
}
func (m *GetPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyResponse proto.InternalMessageInfo

func (m *GetPolicyResponse) GetRecord() *PolicyRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type ListPoliciesRequest struct {
}

func (m *ListPoliciesRequest) Reset()         { *m = ListPoliciesRequest{} }
func (m *ListPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListPoliciesRequest) ProtoMessage()    {}
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{16}
}
func (m *ListPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoliciesRequest.Merge(m, src)
}
func (m *ListPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoliciesRequest proto.InternalMessageInfo

type ListPoliciesResponse struct {
	Records []*PolicyRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *ListPoliciesResponse) Reset()         { *m = ListPoliciesResponse{} }
func (m *ListPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPoliciesResponse) ProtoMessage()    {}
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{17}
}
func (m *ListPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoliciesResponse.Merge(m, src)
}
func (m *ListPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoliciesResponse proto.InternalMessageInfo

func (m *ListPoliciesResponse) GetRecords() []*PolicyRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type DeletePolicyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeletePolicyRequest) Reset()         { *m = DeletePolicyRequest{} }
func (m *DeletePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePolicyRequest) ProtoMessage()    {}
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{18}
}
func (m *DeletePolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePolicyRequest.Merge(m, src)
}
func (m *DeletePolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePolicyRequest proto.InternalMessageInfo

func (m *DeletePolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeletePolicyResponse struct {
	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *DeletePolicyResponse) Reset()         { *m = DeletePolicyResponse{} }
func (m *DeletePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePolicyResponse) ProtoMessage()    {}
func (*DeletePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{19}
}
func (m *DeletePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePolicyResponse.Merge(m, src)
}
func (m *DeletePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePolicyResponse proto.InternalMessageInfo

func (m *DeletePolicyResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type TransferObjectRequest struct {
	PolicyId string  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	NewOwner *Actor  `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *TransferObjectRequest) Reset()         { *m = TransferObjectRequest{} }
func (m *TransferObjectRequest) String() string { return proto.CompactTextString(m) }
func (*TransferObjectRequest) ProtoMessage()    {}
func (*TransferObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{20}
}
func (m *TransferObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferObjectRequest.Merge(m, src)
}
func (m *TransferObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferObjectRequest proto.InternalMessageInfo

func (m *TransferObjectRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *TransferObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *TransferObjectRequest) GetNewOwner() *Actor {
	if m != nil {
		return m.NewOwner
	}
	return nil
}

type TransferObjectResponse struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *TransferObjectResponse) Reset()         { *m = TransferObjectResponse{} }
func (m *TransferObjectResponse) String() string { return proto.CompactTextString(m) }
func (*TransferObjectResponse) ProtoMessage()    {}
func (*TransferObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{21}
}
func (m *TransferObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferObjectResponse.Merge(m, src)
}
func (m *TransferObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferObjectResponse proto.InternalMessageInfo

func (m *TransferObjectResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type ValidatePolicyRequest struct {
	Policy      string               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	MarshalType PolicyMarshalingType `protobuf:"varint,2,opt,name=marshal_type,json=marshalType,proto3,enum=sourcenetwork.acp_core.PolicyMarshalingType" json:"marshal_type,omitempty"`
}

func (m *ValidatePolicyRequest) Reset()         { *m = ValidatePolicyRequest{} }
func (m *ValidatePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatePolicyRequest) ProtoMessage()    {}
func (*ValidatePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{22}
}
func (m *ValidatePolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatePolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatePolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatePolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatePolicyRequest.Merge(m, src)
}
func (m *ValidatePolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatePolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatePolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatePolicyRequest proto.InternalMessageInfo

func (m *ValidatePolicyRequest) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *ValidatePolicyRequest) GetMarshalType() PolicyMarshalingType {
	if m != nil {
		return m.MarshalType
	}
	return PolicyMarshalingType_UNKNOWN
}

type ValidatePolicyResponse struct {
	Valid    bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (m *ValidatePolicyResponse) Reset()         { *m = ValidatePolicyResponse{} }
func (m *ValidatePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatePolicyResponse) ProtoMessage()    {}
func (*ValidatePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{23}
}
func (m *ValidatePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatePolicyResponse.Merge(m, src)
}
func (m *ValidatePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatePolicyResponse proto.InternalMessageInfo

func (m *ValidatePolicyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ValidatePolicyResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type SetParamsRequest struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *SetParamsRequest) Reset()         { *m = SetParamsRequest{} }
func (m *SetParamsRequest) String() string { return proto.CompactTextString(m) }
func (*SetParamsRequest) ProtoMessage()    {}
func (*SetParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{24}
}
func (m *SetParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetParamsRequest.Merge(m, src)
}
func (m *SetParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetParamsRequest proto.InternalMessageInfo

func (m *SetParamsRequest) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type SetParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *SetParamsResponse) Reset()         { *m = SetParamsResponse{} }
func (m *SetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*SetParamsResponse) ProtoMessage()    {}
func (*SetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{25}
}
func (m *SetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetParamsResponse.Merge(m, src)
}
func (m *SetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetParamsResponse proto.InternalMessageInfo

func (m *SetParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type GetParamsRequest struct {
}

func (m *GetParamsRequest) Reset()         { *m = GetParamsRequest{} }
func (m *GetParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetParamsRequest) ProtoMessage()    {}
func (*GetParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{26}
}
func (m *GetParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetParamsRequest.Merge(m, src)
}
func (m *GetParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetParamsRequest proto.InternalMessageInfo

type GetParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *GetParamsResponse) Reset()         { *m = GetParamsResponse{} }
func (m *GetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetParamsResponse) ProtoMessage()    {}
func (*GetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{27}
}
func (m *GetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetParamsResponse.Merge(m, src)
}
func (m *GetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetParamsResponse proto.InternalMessageInfo

func (m *GetParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type VerifyAccessRequestRequest struct {
	PolicyId      string         `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	AccessRequest *AccessRequest `protobuf:"bytes,2,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
}

func (m *VerifyAccessRequestRequest) Reset()         { *m = VerifyAccessRequestRequest{} }
func (m *VerifyAccessRequestRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyAccessRequestRequest) ProtoMessage()    {}
func (*VerifyAccessRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{28}
}
func (m *VerifyAccessRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyAccessRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyAccessRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyAccessRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyAccessRequestRequest.Merge(m, src)
}
func (m *VerifyAccessRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyAccessRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyAccessRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyAccessRequestRequest proto.InternalMessageInfo

func (m *VerifyAccessRequestRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *VerifyAccessRequestRequest) GetAccessRequest() *AccessRequest {
	if m != nil {
		return m.AccessRequest
	}
	return nil
}

type VerifyAccessRequestResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *VerifyAccessRequestResponse) Reset()         { *m = VerifyAccessRequestResponse{} }
func (m *VerifyAccessRequestResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyAccessRequestResponse) ProtoMessage()    {}
func (*VerifyAccessRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{29}
}
func (m *VerifyAccessRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyAccessRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyAccessRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyAccessRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyAccessRequestResponse.Merge(m, src)
}
func (m *VerifyAccessRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyAccessRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyAccessRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyAccessRequestResponse proto.InternalMessageInfo

func (m *VerifyAccessRequestResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type GetPolicyCatalogueRequest struct {
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (m *GetPolicyCatalogueRequest) Reset()         { *m = GetPolicyCatalogueRequest{} }
func (m *GetPolicyCatalogueRequest) String() string { return proto.CompactTextString(m) }
func (*GetPolicyCatalogueRequest) ProtoMessage()    {}
func (*GetPolicyCatalogueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{30}
}
func (m *GetPolicyCatalogueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyCatalogueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyCatalogueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyCatalogueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyCatalogueRequest.Merge(m, src)
}
func (m *GetPolicyCatalogueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyCatalogueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyCatalogueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyCatalogueRequest proto.InternalMessageInfo

func (m *GetPolicyCatalogueRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

type GetPolicyCatalogueResponse struct {
	Catalogue *PolicyCatalogue `protobuf:"bytes,1,opt,name=catalogue,proto3" json:"catalogue,omitempty"`
}

func (m *GetPolicyCatalogueResponse) Reset()         { *m = GetPolicyCatalogueResponse{} }
func (m *GetPolicyCatalogueResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyCatalogueResponse) ProtoMessage()    {}
func (*GetPolicyCatalogueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{31}
}
func (m *GetPolicyCatalogueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyCatalogueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyCatalogueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyCatalogueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyCatalogueResponse.Merge(m, src)
}
func (m *GetPolicyCatalogueResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyCatalogueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyCatalogueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyCatalogueResponse proto.InternalMessageInfo

func (m *GetPolicyCatalogueResponse) GetCatalogue() *PolicyCatalogue {
	if m != nil {
		return m.Catalogue
	}
	return nil
}

type EvaluateTheoremRequest struct {
	// policy_id is the id of the policy against which the theorem is evaluated
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// policy_theorem defines a PolicyTheorem using the DSL specified in the theorem grammar
	PolicyTheorem string `protobuf:"bytes,2,opt,name=policy_theorem,json=policyTheorem,proto3" json:"policy_theorem,omitempty"`
}

func (m *EvaluateTheoremRequest) Reset()         { *m = EvaluateTheoremRequest{} }
func (m *EvaluateTheoremRequest) String() string { return proto.CompactTextString(m) }
func (*EvaluateTheoremRequest) ProtoMessage()    {}
func (*EvaluateTheoremRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{32}
}
func (m *EvaluateTheoremRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateTheoremRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateTheoremRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateTheoremRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateTheoremRequest.Merge(m, src)
}
func (m *EvaluateTheoremRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateTheoremRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateTheoremRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateTheoremRequest proto.InternalMessageInfo

func (m *EvaluateTheoremRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EvaluateTheoremRequest) GetPolicyTheorem() string {
	if m != nil {
		return m.PolicyTheorem
	}
	return ""
}

type EvaluateTheoremResponse struct {
	// result of theorem verification
	Result *AnnotatedPolicyTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EvaluateTheoremResponse) Reset()         { *m = EvaluateTheoremResponse{} }
func (m *EvaluateTheoremResponse) String() string { return proto.CompactTextString(m) }
func (*EvaluateTheoremResponse) ProtoMessage()    {}
func (*EvaluateTheoremResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{33}
}
func (m *EvaluateTheoremResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateTheoremResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateTheoremResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateTheoremResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateTheoremResponse.Merge(m, src)
}
func (m *EvaluateTheoremResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateTheoremResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateTheoremResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateTheoremResponse proto.InternalMessageInfo

func (m *EvaluateTheoremResponse) GetResult() *AnnotatedPolicyTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type AmendRegistrationRequest struct {
	PolicyId      string            `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object        *Object           `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	NewOwner      *Actor            `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	NewCreationTs *types.Timestamp  `protobuf:"bytes,4,opt,name=new_creation_ts,json=newCreationTs,proto3" json:"new_creation_ts,omitempty"`
	Metadata      *SuppliedMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *AmendRegistrationRequest) Reset()         { *m = AmendRegistrationRequest{} }
func (m *AmendRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*AmendRegistrationRequest) ProtoMessage()    {}
func (*AmendRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{34}
}
func (m *AmendRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmendRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmendRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmendRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmendRegistrationRequest.Merge(m, src)
}
func (m *AmendRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AmendRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AmendRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AmendRegistrationRequest proto.InternalMessageInfo

func (m *AmendRegistrationRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *AmendRegistrationRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *AmendRegistrationRequest) GetNewOwner() *Actor {
	if m != nil {
		return m.NewOwner
	}
	return nil
}

func (m *AmendRegistrationRequest) GetNewCreationTs() *types.Timestamp {
	if m != nil {
		return m.NewCreationTs
	}
	return nil
}

func (m *AmendRegistrationRequest) GetMetadata() *SuppliedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AmendRegistrationResponse struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *AmendRegistrationResponse) Reset()         { *m = AmendRegistrationResponse{} }
func (m *AmendRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*AmendRegistrationResponse) ProtoMessage()    {}
func (*AmendRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{35}
}
func (m *AmendRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmendRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmendRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmendRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmendRegistrationResponse.Merge(m, src)
}
func (m *AmendRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AmendRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AmendRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AmendRegistrationResponse proto.InternalMessageInfo

func (m *AmendRegistrationResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type UnarchiveObjectRequest struct {
	PolicyId string  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *UnarchiveObjectRequest) Reset()         { *m = UnarchiveObjectRequest{} }
func (m *UnarchiveObjectRequest) String() string { return proto.CompactTextString(m) }
func (*UnarchiveObjectRequest) ProtoMessage()    {}
func (*UnarchiveObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{36}
}
func (m *UnarchiveObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnarchiveObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnarchiveObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnarchiveObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnarchiveObjectRequest.Merge(m, src)
}
func (m *UnarchiveObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnarchiveObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnarchiveObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnarchiveObjectRequest proto.InternalMessageInfo

func (m *UnarchiveObjectRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *UnarchiveObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type UnarchiveObjectResponse struct {
	Record         *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	RecordModified bool                `protobuf:"varint,2,opt,name=record_modified,json=recordModified,proto3" json:"record_modified,omitempty"`
}

func (m *UnarchiveObjectResponse) Reset()         { *m = UnarchiveObjectResponse{} }
func (m *UnarchiveObjectResponse) String() string { return proto.CompactTextString(m) }
func (*UnarchiveObjectResponse) ProtoMessage()    {}
func (*UnarchiveObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{37}
}
func (m *UnarchiveObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnarchiveObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnarchiveObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnarchiveObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnarchiveObjectResponse.Merge(m, src)
}
func (m *UnarchiveObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnarchiveObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnarchiveObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnarchiveObjectResponse proto.InternalMessageInfo

func (m *UnarchiveObjectResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *UnarchiveObjectResponse) GetRecordModified() bool {
	if m != nil {
		return m.RecordModified
	}
	return false
}

type RevealRegistrationRequest struct {
	PolicyId   string            `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object     *Object           `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	CreationTs *types.Timestamp  `protobuf:"bytes,4,opt,name=creation_ts,json=creationTs,proto3" json:"creation_ts,omitempty"`
	Metadata   *SuppliedMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RevealRegistrationRequest) Reset()         { *m = RevealRegistrationRequest{} }
func (m *RevealRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*RevealRegistrationRequest) ProtoMessage()    {}
func (*RevealRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{38}
}
func (m *RevealRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealRegistrationRequest.Merge(m, src)
}
func (m *RevealRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RevealRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevealRegistrationRequest proto.InternalMessageInfo

func (m *RevealRegistrationRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *RevealRegistrationRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *RevealRegistrationRequest) GetCreationTs() *types.Timestamp {
	if m != nil {
		return m.CreationTs
	}
	return nil
}

func (m *RevealRegistrationRequest) GetMetadata() *SuppliedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type RevealRegistrationResponse struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *RevealRegistrationResponse) Reset()         { *m = RevealRegistrationResponse{} }
func (m *RevealRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RevealRegistrationResponse) ProtoMessage()    {}
func (*RevealRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57413e5d6b87f68c, []int{39}
}
func (m *RevealRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealRegistrationResponse.Merge(m, src)
}
func (m *RevealRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RevealRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevealRegistrationResponse proto.InternalMessageInfo

func (m *RevealRegistrationResponse) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*CreatePolicyRequest)(nil), "sourcenetwork.acp_core.CreatePolicyRequest")
	proto.RegisterType((*CreatePolicyResponse)(nil), "sourcenetwork.acp_core.CreatePolicyResponse")
	proto.RegisterType((*SetRelationshipRequest)(nil), "sourcenetwork.acp_core.SetRelationshipRequest")
	proto.RegisterType((*SetRelationshipResponse)(nil), "sourcenetwork.acp_core.SetRelationshipResponse")
	proto.RegisterType((*DeleteRelationshipRequest)(nil), "sourcenetwork.acp_core.DeleteRelationshipRequest")
	proto.RegisterType((*DeleteRelationshipResponse)(nil), "sourcenetwork.acp_core.DeleteRelationshipResponse")
	proto.RegisterType((*RegisterObjectRequest)(nil), "sourcenetwork.acp_core.RegisterObjectRequest")
	proto.RegisterType((*RegisterObjectResponse)(nil), "sourcenetwork.acp_core.RegisterObjectResponse")
	proto.RegisterType((*ArchiveObjectRequest)(nil), "sourcenetwork.acp_core.ArchiveObjectRequest")
	proto.RegisterType((*ArchiveObjectResponse)(nil), "sourcenetwork.acp_core.ArchiveObjectResponse")
	proto.RegisterType((*GetObjectRegistrationRequest)(nil), "sourcenetwork.acp_core.GetObjectRegistrationRequest")
	proto.RegisterType((*GetObjectRegistrationResponse)(nil), "sourcenetwork.acp_core.GetObjectRegistrationResponse")
	proto.RegisterType((*FilterRelationshipsRequest)(nil), "sourcenetwork.acp_core.FilterRelationshipsRequest")
	proto.RegisterType((*FilterRelationshipsResponse)(nil), "sourcenetwork.acp_core.FilterRelationshipsResponse")
	proto.RegisterType((*GetPolicyRequest)(nil), "sourcenetwork.acp_core.GetPolicyRequest")
	proto.RegisterType((*GetPolicyResponse)(nil), "sourcenetwork.acp_core.GetPolicyResponse")
	proto.RegisterType((*ListPoliciesRequest)(nil), "sourcenetwork.acp_core.ListPoliciesRequest")
	proto.RegisterType((*ListPoliciesResponse)(nil), "sourcenetwork.acp_core.ListPoliciesResponse")
	proto.RegisterType((*DeletePolicyRequest)(nil), "sourcenetwork.acp_core.DeletePolicyRequest")
	proto.RegisterType((*DeletePolicyResponse)(nil), "sourcenetwork.acp_core.DeletePolicyResponse")
	proto.RegisterType((*TransferObjectRequest)(nil), "sourcenetwork.acp_core.TransferObjectRequest")
	proto.RegisterType((*TransferObjectResponse)(nil), "sourcenetwork.acp_core.TransferObjectResponse")
	proto.RegisterType((*ValidatePolicyRequest)(nil), "sourcenetwork.acp_core.ValidatePolicyRequest")
	proto.RegisterType((*ValidatePolicyResponse)(nil), "sourcenetwork.acp_core.ValidatePolicyResponse")
	proto.RegisterType((*SetParamsRequest)(nil), "sourcenetwork.acp_core.SetParamsRequest")
	proto.RegisterType((*SetParamsResponse)(nil), "sourcenetwork.acp_core.SetParamsResponse")
	proto.RegisterType((*GetParamsRequest)(nil), "sourcenetwork.acp_core.GetParamsRequest")
	proto.RegisterType((*GetParamsResponse)(nil), "sourcenetwork.acp_core.GetParamsResponse")
	proto.RegisterType((*VerifyAccessRequestRequest)(nil), "sourcenetwork.acp_core.VerifyAccessRequestRequest")
	proto.RegisterType((*VerifyAccessRequestResponse)(nil), "sourcenetwork.acp_core.VerifyAccessRequestResponse")
	proto.RegisterType((*GetPolicyCatalogueRequest)(nil), "sourcenetwork.acp_core.GetPolicyCatalogueRequest")
	proto.RegisterType((*GetPolicyCatalogueResponse)(nil), "sourcenetwork.acp_core.GetPolicyCatalogueResponse")
	proto.RegisterType((*EvaluateTheoremRequest)(nil), "sourcenetwork.acp_core.EvaluateTheoremRequest")
	proto.RegisterType((*EvaluateTheoremResponse)(nil), "sourcenetwork.acp_core.EvaluateTheoremResponse")
	proto.RegisterType((*AmendRegistrationRequest)(nil), "sourcenetwork.acp_core.AmendRegistrationRequest")
	proto.RegisterType((*AmendRegistrationResponse)(nil), "sourcenetwork.acp_core.AmendRegistrationResponse")
	proto.RegisterType((*UnarchiveObjectRequest)(nil), "sourcenetwork.acp_core.UnarchiveObjectRequest")
	proto.RegisterType((*UnarchiveObjectResponse)(nil), "sourcenetwork.acp_core.UnarchiveObjectResponse")
	proto.RegisterType((*RevealRegistrationRequest)(nil), "sourcenetwork.acp_core.RevealRegistrationRequest")
	proto.RegisterType((*RevealRegistrationResponse)(nil), "sourcenetwork.acp_core.RevealRegistrationResponse")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/engine.proto", fileDescriptor_57413e5d6b87f68c)
}

var fileDescriptor_57413e5d6b87f68c = []byte{
	// 1546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5f, 0x6f, 0xd3, 0x56,
	0x1b, 0xc7, 0x05, 0x4a, 0xf3, 0xf4, 0x1f, 0xb8, 0x4d, 0x69, 0xcd, 0x4b, 0xde, 0xbe, 0x86, 0xbe,
	0x14, 0x28, 0xc9, 0x68, 0x19, 0x9a, 0xb6, 0x69, 0x53, 0x5b, 0x4a, 0xc7, 0xa0, 0xa2, 0x73, 0x3b,
	0x2e, 0xa6, 0x49, 0xc1, 0x75, 0x9e, 0xa6, 0x67, 0x38, 0x76, 0x76, 0x7c, 0xd2, 0x52, 0x4d, 0x42,
	0xd3, 0x86, 0xc6, 0xed, 0xbe, 0xc3, 0x6e, 0x76, 0x3d, 0x69, 0xdf, 0x60, 0x93, 0x76, 0xc9, 0xe5,
	0x2e, 0x27, 0xf8, 0x08, 0xfb, 0x02, 0x93, 0xed, 0xc7, 0x89, 0x9d, 0xf8, 0xa4, 0x6e, 0x17, 0xca,
	0xa5, 0x4f, 0x9e, 0xbf, 0xbf, 0xe7, 0x39, 0xe7, 0xf9, 0x13, 0xb8, 0xe4, 0xb9, 0x0d, 0x6e, 0xa1,
	0x83, 0x62, 0xcf, 0xe5, 0x4f, 0x4a, 0xa6, 0x55, 0x2f, 0x5b, 0x2e, 0xc7, 0x12, 0x3a, 0x55, 0xe6,
	0x60, 0xb1, 0xce, 0x5d, 0xe1, 0xaa, 0x13, 0x09, 0xa2, 0x62, 0x44, 0xa4, 0xfd, 0xb7, 0xea, 0xba,
	0x55, 0x1b, 0x4b, 0x01, 0xd5, 0x56, 0x63, 0xbb, 0x24, 0x58, 0x0d, 0x3d, 0x61, 0xd6, 0xea, 0x21,
	0xa3, 0x76, 0x59, 0x22, 0x9d, 0xe3, 0xd7, 0x0d, 0xf4, 0x04, 0x51, 0xfd, 0x5f, 0x42, 0x65, 0x99,
	0xc2, 0xb4, 0xdd, 0x6a, 0x83, 0xcc, 0xd0, 0x66, 0x24, 0x74, 0x35, 0x14, 0x66, 0xc5, 0x14, 0x26,
	0x91, 0xc9, 0x5c, 0xaa, 0xbb, 0x36, 0xb3, 0xf6, 0x89, 0xe8, 0x9a, 0x84, 0xc8, 0xab, 0xa3, 0xc5,
	0xb6, 0x99, 0x65, 0x0a, 0xe6, 0x3a, 0x07, 0xd0, 0x86, 0x02, 0xcb, 0x1c, 0x2d, 0x97, 0x57, 0x88,
	0xf6, 0x6a, 0x77, 0x5a, 0x6f, 0xc7, 0xe5, 0xe2, 0x00, 0x52, 0x8e, 0x76, 0xa0, 0xdd, 0xdb, 0x61,
	0x11, 0x8e, 0xf3, 0x19, 0x48, 0xcb, 0x1e, 0xda, 0x68, 0x09, 0x97, 0x1f, 0x00, 0x83, 0xb7, 0xef,
	0x09, 0xac, 0x1d, 0x10, 0x20, 0xb1, 0x83, 0x2e, 0x8f, 0xa8, 0xf4, 0xdf, 0x14, 0x18, 0x5b, 0xe6,
	0x68, 0x0a, 0x5c, 0x0f, 0xdc, 0x30, 0xc2, 0xf0, 0xa9, 0x13, 0xd0, 0x1f, 0xfa, 0x35, 0xa9, 0x4c,
	0x2b, 0xb3, 0x39, 0x83, 0xbe, 0xd4, 0x87, 0x30, 0x54, 0x33, 0xb9, 0xb7, 0x63, 0xda, 0x65, 0xb1,
	0x5f, 0xc7, 0xc9, 0xbe, 0x69, 0x65, 0x76, 0x64, 0x7e, 0xae, 0x98, 0x9e, 0x46, 0xc5, 0x50, 0xe8,
	0x5a, 0xc8, 0xc1, 0x9c, 0xea, 0xe6, 0x7e, 0x1d, 0x8d, 0x41, 0x92, 0xe0, 0x7f, 0xa8, 0x77, 0x60,
	0x20, 0x0a, 0xf2, 0xe4, 0xc9, 0x69, 0x65, 0x76, 0x70, 0x7e, 0x56, 0x26, 0x6c, 0xa3, 0x51, 0xaf,
	0xdb, 0x0c, 0x2b, 0x6b, 0x44, 0x6f, 0x34, 0x39, 0xf5, 0x4d, 0x18, 0x4f, 0x7a, 0xe1, 0xd5, 0x5d,
	0xc7, 0x43, 0xf5, 0x43, 0xe8, 0x0f, 0x63, 0x18, 0xb8, 0x31, 0x38, 0x7f, 0xb9, 0xbb, 0xa1, 0x46,
	0x40, 0x6b, 0x10, 0x8f, 0xfe, 0xbb, 0x02, 0x13, 0x1b, 0x28, 0x8c, 0x58, 0x28, 0x22, 0x7c, 0x2e,
	0x40, 0x8e, 0xe2, 0xce, 0x2a, 0x04, 0xd1, 0x40, 0x78, 0x70, 0xaf, 0xa2, 0x7e, 0x02, 0x43, 0xf1,
	0xf0, 0x05, 0x20, 0x75, 0xd1, 0x9d, 0x90, 0x9f, 0xe0, 0xec, 0x11, 0x3a, 0xcf, 0x15, 0x38, 0xdf,
	0xe1, 0x07, 0x21, 0x34, 0x03, 0x23, 0xa1, 0xb7, 0x65, 0x7c, 0xca, 0x3c, 0x81, 0xa1, 0x37, 0x03,
	0xc6, 0x70, 0x78, 0xba, 0x12, 0x1e, 0xaa, 0x4b, 0x4d, 0x20, 0x43, 0x67, 0xae, 0x65, 0x72, 0x26,
	0x09, 0xe7, 0x77, 0x0a, 0x4c, 0xdd, 0x41, 0x1b, 0x05, 0xbe, 0x3d, 0x44, 0xf5, 0x8f, 0x41, 0x4b,
	0xb3, 0x81, 0xd0, 0xf8, 0x9f, 0xaf, 0x27, 0x40, 0x63, 0xdb, 0x6d, 0x38, 0x11, 0x16, 0x83, 0xe1,
	0xd9, 0x5d, 0xff, 0x48, 0xff, 0x45, 0x81, 0xbc, 0x81, 0x55, 0x1f, 0x16, 0xfe, 0x70, 0xeb, 0x2b,
	0xb4, 0x44, 0x26, 0x0f, 0x6e, 0x43, 0xbf, 0x1b, 0x50, 0x93, 0xed, 0x05, 0x99, 0xed, 0x24, 0x93,
	0xa8, 0x7b, 0x94, 0x01, 0x5f, 0xc2, 0x44, 0xbb, 0xcd, 0xe4, 0xf1, 0x52, 0xdb, 0x0d, 0x39, 0x4a,
	0x60, 0x9f, 0xc0, 0xf8, 0x22, 0xb7, 0x76, 0xd8, 0x2e, 0xbe, 0x79, 0x40, 0xf4, 0x06, 0xe4, 0xdb,
	0x94, 0x91, 0x27, 0x0b, 0x90, 0x8f, 0x47, 0xda, 0x2b, 0x73, 0xac, 0xb9, 0xbb, 0x94, 0xd0, 0xa7,
	0x8c, 0xf1, 0xc4, 0x8f, 0x46, 0xf8, 0x9b, 0x7a, 0x05, 0x46, 0x29, 0xe0, 0x35, 0xb7, 0xc2, 0xb6,
	0x19, 0x86, 0x09, 0x3e, 0x60, 0xd0, 0xad, 0x58, 0xa3, 0x53, 0xdd, 0x83, 0xff, 0xac, 0xa2, 0x88,
	0x54, 0xfa, 0x50, 0xf2, 0x40, 0xda, 0x1b, 0xf5, 0xf5, 0x27, 0x05, 0x2e, 0x4a, 0xb4, 0x92, 0xd3,
	0x97, 0x60, 0x98, 0xf9, 0x9e, 0x86, 0xb1, 0x6d, 0xde, 0xde, 0x21, 0xe6, 0x19, 0xcd, 0x33, 0x75,
	0x0a, 0x06, 0xdc, 0x3d, 0x07, 0xb9, 0x6f, 0x5a, 0x5f, 0x60, 0xda, 0x99, 0xe0, 0xfb, 0x5e, 0xfc,
	0x5e, 0x9f, 0x3c, 0x72, 0xf8, 0xbf, 0x57, 0x40, 0xbb, 0xcb, 0x6c, 0x81, 0xdc, 0x48, 0x42, 0x9c,
	0xe9, 0x62, 0x0f, 0x44, 0xc5, 0x8d, 0xb0, 0x99, 0xcb, 0x62, 0xc1, 0x06, 0xf1, 0x18, 0x4d, 0x6e,
	0xdd, 0x82, 0x0b, 0xa9, 0x46, 0x10, 0x50, 0x77, 0xe0, 0x4c, 0x68, 0xae, 0x37, 0xa9, 0x4c, 0x9f,
	0x3c, 0xa4, 0xa7, 0x11, 0xab, 0xae, 0xc3, 0xd9, 0x55, 0x14, 0xc9, 0x52, 0x39, 0x02, 0x7d, 0x4d,
	0xc7, 0xfa, 0x58, 0x45, 0xff, 0x0c, 0xce, 0xc5, 0x68, 0x7a, 0x52, 0x88, 0xf2, 0x30, 0xf6, 0x80,
	0x79, 0xa1, 0x4c, 0x86, 0x11, 0xb2, 0xfa, 0x23, 0x18, 0x4f, 0x1e, 0x93, 0xb2, 0x8f, 0xda, 0x7d,
	0xcd, 0xa6, 0xad, 0xe9, 0xe5, 0x0c, 0x8c, 0x85, 0x6f, 0x64, 0x77, 0x47, 0xe7, 0x60, 0x3c, 0x49,
	0x46, 0xea, 0xc7, 0xe1, 0x74, 0xfc, 0xf5, 0x0c, 0x3f, 0xf4, 0x9f, 0x15, 0xc8, 0x6f, 0x72, 0xd3,
	0xf1, 0xb6, 0x8f, 0xe5, 0xdd, 0x7c, 0x1f, 0x72, 0x0e, 0xee, 0x95, 0x83, 0x3c, 0xa7, 0xdc, 0xbe,
	0x28, 0x63, 0x5d, 0x0c, 0x53, 0xc9, 0xc1, 0xbd, 0x87, 0x3e, 0xb9, 0xff, 0x5a, 0xb6, 0x5b, 0xda,
	0xc3, 0xd7, 0xf2, 0x5b, 0x05, 0xf2, 0x8f, 0x4c, 0x9b, 0x55, 0xde, 0x5a, 0xd3, 0xa5, 0xdf, 0x87,
	0x89, 0x76, 0x0b, 0x5a, 0xb1, 0xdb, 0xf5, 0x7f, 0x89, 0x62, 0x17, 0x7c, 0xf8, 0x11, 0x42, 0xce,
	0x5d, 0x5e, 0xae, 0x79, 0x55, 0x7a, 0x41, 0x06, 0x82, 0x83, 0x35, 0xaf, 0xaa, 0x7f, 0x0a, 0x67,
	0x37, 0x50, 0xac, 0x9b, 0xdc, 0xac, 0x35, 0xef, 0xfc, 0x6d, 0xe8, 0xaf, 0x07, 0x07, 0x84, 0x93,
	0x34, 0x6a, 0xc4, 0x46, 0xd4, 0xfa, 0x7d, 0x38, 0x17, 0x93, 0x45, 0x36, 0x1d, 0x55, 0x98, 0x1a,
	0x5e, 0xd6, 0xb8, 0x61, 0xbe, 0x82, 0xd5, 0x9e, 0x29, 0x78, 0xa1, 0x80, 0xf6, 0x08, 0x39, 0xdb,
	0xde, 0x5f, 0xb4, 0x2c, 0xf4, 0x22, 0x25, 0x99, 0xf2, 0xfa, 0x01, 0x8c, 0x98, 0x01, 0x53, 0x99,
	0x26, 0x26, 0xca, 0xef, 0x19, 0x79, 0x92, 0xc6, 0x55, 0x0c, 0x9b, 0xf1, 0x4f, 0x7d, 0x01, 0x2e,
	0xa4, 0x1a, 0xd2, 0x2d, 0xaa, 0xfa, 0x7b, 0x30, 0xd5, 0x7c, 0xa8, 0x96, 0xa3, 0x81, 0x2c, 0x8b,
	0xf1, 0xba, 0x05, 0x5a, 0x1a, 0x27, 0x69, 0x5b, 0x81, 0x5c, 0x73, 0xbe, 0x23, 0x44, 0xaf, 0x74,
	0xcf, 0xd5, 0x96, 0x8c, 0x16, 0xa7, 0x7f, 0x0b, 0x57, 0x76, 0x4d, 0xbb, 0x61, 0x0a, 0xdc, 0x0c,
	0x67, 0x96, 0x4c, 0xc0, 0xce, 0xc0, 0x08, 0xfd, 0x48, 0x93, 0x0e, 0x25, 0xec, 0x70, 0x78, 0x4a,
	0xa2, 0xf4, 0x2a, 0x9c, 0xef, 0x90, 0x4e, 0xf6, 0x3f, 0xf0, 0x2f, 0xb9, 0xd7, 0xb0, 0x05, 0x19,
	0x7f, 0x4b, 0x1a, 0x12, 0xc7, 0x71, 0x85, 0x29, 0xb0, 0xb2, 0x1e, 0x17, 0x6d, 0x04, 0xbc, 0x06,
	0xc9, 0xd0, 0x7f, 0xed, 0x83, 0xc9, 0xc5, 0x1a, 0x3a, 0x95, 0xe3, 0xea, 0x1a, 0xfe, 0xcd, 0xd3,
	0xa7, 0x2e, 0xc1, 0xa8, 0xcf, 0x6b, 0xf9, 0xc3, 0x14, 0x73, 0x9d, 0xb2, 0xf0, 0x26, 0x4f, 0x05,
	0x12, 0xb4, 0x62, 0xb8, 0x11, 0x28, 0x46, 0x1b, 0x81, 0xe2, 0x66, 0xb4, 0x11, 0x30, 0x86, 0x1d,
	0xdc, 0x5b, 0x26, 0x8e, 0x4d, 0x2f, 0xd1, 0xb2, 0x9e, 0x3e, 0x72, 0xcb, 0x5a, 0x86, 0xa9, 0x14,
	0xd8, 0x7a, 0xf8, 0x0e, 0xd7, 0x60, 0xe2, 0x73, 0xc7, 0x3c, 0xb6, 0xbe, 0xf5, 0x07, 0x05, 0xce,
	0x77, 0xe8, 0xeb, 0x9d, 0x3b, 0xd9, 0x3b, 0xd9, 0xbf, 0x15, 0x98, 0x32, 0x70, 0x17, 0x4d, 0xfb,
	0xd8, 0x32, 0xf2, 0x03, 0x18, 0x3c, 0x5c, 0x46, 0x81, 0xd5, 0xeb, 0x74, 0x7a, 0x0c, 0x5a, 0x9a,
	0xd3, 0xbd, 0x0b, 0xc0, 0xfc, 0x0b, 0x15, 0x72, 0x8b, 0xcb, 0xeb, 0x2b, 0xc1, 0x7a, 0x4d, 0x65,
	0x30, 0x14, 0xdf, 0x48, 0xa8, 0xd7, 0x65, 0x12, 0x53, 0xb6, 0x2f, 0xda, 0x5c, 0x36, 0x62, 0x32,
	0xfe, 0x31, 0xe4, 0x9a, 0xaf, 0xb1, 0x2a, 0xc5, 0xa6, 0xbd, 0x6f, 0xd5, 0xae, 0x66, 0xa0, 0x24,
	0x0d, 0xdf, 0x80, 0xda, 0xf9, 0xde, 0xab, 0x37, 0x0f, 0x14, 0xd0, 0x5e, 0x55, 0xb4, 0xf9, 0xc3,
	0xb0, 0x90, 0x72, 0x06, 0x43, 0xf1, 0x2e, 0x57, 0x8e, 0x64, 0x4a, 0x8b, 0x2c, 0x47, 0x32, 0xb5,
	0x71, 0x66, 0x30, 0x14, 0xef, 0x68, 0xe5, 0xaa, 0x52, 0xda, 0x63, 0xb9, 0xaa, 0xd4, 0x26, 0x99,
	0xc3, 0x68, 0xdb, 0x4a, 0x46, 0x2d, 0x4a, 0xd3, 0x3a, 0x75, 0x07, 0xa5, 0x95, 0x32, 0xd3, 0xb7,
	0xc2, 0xd8, 0xb9, 0xfb, 0x90, 0x87, 0x51, 0xba, 0xab, 0x91, 0x87, 0xb1, 0xcb, 0x6a, 0xc5, 0x85,
	0x91, 0xe4, 0x0a, 0x42, 0xbd, 0x21, 0xbf, 0x64, 0x29, 0xeb, 0x15, 0xad, 0x98, 0x95, 0x9c, 0x14,
	0xda, 0x30, 0x9c, 0x58, 0x14, 0xa8, 0xd2, 0x00, 0xa5, 0x2d, 0x2f, 0xb4, 0x1b, 0x19, 0xa9, 0x5b,
	0xee, 0x25, 0x67, 0x06, 0xb9, 0x7b, 0xa9, 0x53, 0x90, 0xdc, 0x3d, 0xc9, 0x28, 0xc2, 0x61, 0xb4,
	0xad, 0x9c, 0xc8, 0x13, 0x28, 0xbd, 0xce, 0xc9, 0x13, 0x48, 0x56, 0xa7, 0x9e, 0xc2, 0xb9, 0x8e,
	0x9a, 0xac, 0xbe, 0x23, 0x05, 0x4a, 0xd2, 0xf5, 0x68, 0x37, 0x0f, 0xc1, 0xd1, 0x4a, 0xdd, 0xce,
	0xe7, 0x5b, 0x9e, 0xba, 0xd2, 0xfa, 0x26, 0x4f, 0xdd, 0x2e, 0xd5, 0x81, 0xc3, 0x68, 0x5b, 0xaf,
	0x28, 0x87, 0x3a, 0xbd, 0x65, 0x95, 0x43, 0x2d, 0x6b, 0x42, 0x9f, 0x2b, 0x90, 0x4f, 0x5d, 0xfd,
	0xa8, 0xb7, 0xba, 0xbc, 0xa1, 0xd2, 0xfd, 0x94, 0xf6, 0xee, 0x21, 0xb9, 0xc8, 0x8c, 0x67, 0x30,
	0x96, 0xb2, 0x55, 0x51, 0xa5, 0x28, 0xca, 0xf7, 0x40, 0xda, 0xc2, 0xa1, 0x78, 0x5a, 0xd7, 0x2a,
	0x39, 0xa9, 0xca, 0xaf, 0x55, 0xea, 0x4c, 0x2d, 0xbf, 0x56, 0x92, 0x01, 0xf8, 0x31, 0xe4, 0x9a,
	0x13, 0xa8, 0xbc, 0x98, 0xb6, 0x0f, 0xbc, 0xf2, 0x62, 0xda, 0x39, 0xce, 0x52, 0xb9, 0x3e, 0x40,
	0xc3, 0x6a, 0x66, 0x0d, 0x9d, 0xf3, 0xec, 0x33, 0x18, 0x4b, 0x99, 0x06, 0xe5, 0x41, 0x93, 0xcf,
	0xb0, 0xf2, 0xa0, 0x75, 0x19, 0x37, 0x97, 0x56, 0xfe, 0x78, 0x55, 0x50, 0x5e, 0xbe, 0x2a, 0x28,
	0x7f, 0xbd, 0x2a, 0x28, 0x3f, 0xbe, 0x2e, 0x9c, 0x78, 0xf9, 0xba, 0x70, 0xe2, 0xcf, 0xd7, 0x85,
	0x13, 0x5f, 0x5c, 0xaf, 0x32, 0xb1, 0xd3, 0xd8, 0x2a, 0x5a, 0x6e, 0xad, 0x24, 0xfb, 0x3b, 0xed,
	0x49, 0xb5, 0x24, 0xf6, 0xeb, 0xe8, 0x6d, 0xf5, 0x07, 0x8d, 0xe1, 0xc2, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x84, 0x94, 0x97, 0x96, 0xc9, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ACPEngineClient is the client API for ACPEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACPEngineClient interface {
	// CreatePolicy adds a new Policy to the engine.
	// The Policy models an aplication's high level access control rules.
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// GetPolicy returns a Policy with the given ID
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// GetPolicyCatalogue builds and return a Policy's Catalogue
	GetPolicyCatalogue(ctx context.Context, in *GetPolicyCatalogueRequest, opts ...grpc.CallOption) (*GetPolicyCatalogueResponse, error)
	// ListPolicies returns a set of Policies registered in the system
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// DeletePolicy removes a Policy and all relationships and objects registered within it.
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// SetRelationship creates or updates a Relationship within a Policy
	// A Relationship is a statement which ties together an object and a subject with a "relation",
	// which means the set of high level rules defined in the Policy will apply to these entities.
	SetRelationship(ctx context.Context, in *SetRelationshipRequest, opts ...grpc.CallOption) (*SetRelationshipResponse, error)
	// DelereRelationship removes a Relationship from a Policy.
	// If the Relationship was not found in a Policy, this Cmd is a no-op.
	DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
	// RegisterObject creates a special kind of Relationship within a Policy which ties
	// the msg's Actor as the owner of the msg's Object.
	// The Owner has complete control over the set of subjects that are related to their Object,
	// giving them autonomy to share the object and revoke acces to the object,
	// much like owners in a Discretionary Access Control model.
	//
	// Attempting to register a previously registered Object - whether active or archived -
	// is an error, Object IDs are therefore assumed to be unique within a Policy.
	RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error)
	// ArchiveObject sets an Object's state as "archived"
	//
	// Archiving an object removes all relationships and effectively disables it.
	// No relationships can be created for it and no checks can be executed against it.
	// Note that the original owner record is preserved for security reasons.
	//
	// Attempting to archive an already archived object is a noop.
	// Archiving an object that isn't registered is an error
	// Only the owner can archive an object
	//
	// Note: ownership records aren't removed since doing so could lead to an ownership hijack attack.
	// In order to pass ownership to another owner, use the TransferObject method.
	//
	// Hijack attacks look like the following:
	// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
	// Eve wants to access Foo but was not given permission to it.
	// Eve could "hijack" Bob's object by waiting for Bob to delete its ownership record for Foo,
	// then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
	// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
	// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
	// is an "ownership hijack".
	ArchiveObject(ctx context.Context, in *ArchiveObjectRequest, opts ...grpc.CallOption) (*ArchiveObjectResponse, error)
	// TransferObject updates an Object's Owner to some other actor in the system, after which the original owner
	// loses autonomy over the object and cannot create or modify relationships.
	//
	// Transfering object cannot be reversed, unless another Transfer is initiated by the new owner.
	//
	// Transfering an archived or unregistered object is an error.
	// Only the owner can transfer an object.
	TransferObject(ctx context.Context, in *TransferObjectRequest, opts ...grpc.CallOption) (*TransferObjectResponse, error)
	// UnarchiveObject returns a previously archived object to active status,
	// such that the owner is able to create relationships and share that object again.
	//
	// Only the original owner of the object can unarchive it, returns an authorization error otherwise.
	// Attempting to unarchive an active or unregistered object is an error.
	UnarchiveObject(ctx context.Context, in *UnarchiveObjectRequest, opts ...grpc.CallOption) (*UnarchiveObjectResponse, error)
	// AmendRegistration transfer an object's ownership between two users
	// This operation can only be executed by the root principal.
	//
	// Amending the registration of an archived or unregistered object is an error.
	AmendRegistration(ctx context.Context, in *AmendRegistrationRequest, opts ...grpc.CallOption) (*AmendRegistrationResponse, error)
	// RevealRegistration registers an object at a specific time stamp.
	//
	// This command can be paired with an external commitment protocol to reserve an object without exposing it.
	RevealRegistration(ctx context.Context, in *RevealRegistrationRequest, opts ...grpc.CallOption) (*RevealRegistrationResponse, error)
	// EvaluateTheorem executes the given theorem against a stored policy.
	//
	// Returns an error if the policy does not exist.
	EvaluateTheorem(ctx context.Context, in *EvaluateTheoremRequest, opts ...grpc.CallOption) (*EvaluateTheoremResponse, error)
	// GetObjectRegistration returns the registration status of an Object
	GetObjectRegistration(ctx context.Context, in *GetObjectRegistrationRequest, opts ...grpc.CallOption) (*GetObjectRegistrationResponse, error)
	// FilterRelationships returns filtered set of Relationships in a Policy.
	FilterRelationships(ctx context.Context, in *FilterRelationshipsRequest, opts ...grpc.CallOption) (*FilterRelationshipsResponse, error)
	// ValidatePolicy verifies whether a policy payload is valid and would be accepted
	// by the engine, without creating it.
	//
	// Returns ok or validation errors found within the policy construction
	ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error)
	// SetParams tunes the parameters of the ACP Engine.
	// This operation can only be done by the root principal
	SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error)
	// GetParams returns the current params set in the ACP Engine.
	GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error)
	// VerifyAccessRequest evaluates an AccessRequest
	// Returns true if the authenticated actor is allowed to perform the operations they are requesting.
	// FIXME: there is no need to bind the authenticated principal to the AccessRequest,
	// the verification is often done by someone else
	VerifyAccessRequest(ctx context.Context, in *VerifyAccessRequestRequest, opts ...grpc.CallOption) (*VerifyAccessRequestResponse, error)
}

type aCPEngineClient struct {
	cc grpc1.ClientConn
}

func NewACPEngineClient(cc grpc1.ClientConn) ACPEngineClient {
	return &aCPEngineClient{cc}
}

func (c *aCPEngineClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetPolicyCatalogue(ctx context.Context, in *GetPolicyCatalogueRequest, opts ...grpc.CallOption) (*GetPolicyCatalogueResponse, error) {
	out := new(GetPolicyCatalogueResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/GetPolicyCatalogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) SetRelationship(ctx context.Context, in *SetRelationshipRequest, opts ...grpc.CallOption) (*SetRelationshipResponse, error) {
	out := new(SetRelationshipResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/SetRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/DeleteRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error) {
	out := new(RegisterObjectResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/RegisterObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) ArchiveObject(ctx context.Context, in *ArchiveObjectRequest, opts ...grpc.CallOption) (*ArchiveObjectResponse, error) {
	out := new(ArchiveObjectResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/ArchiveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) TransferObject(ctx context.Context, in *TransferObjectRequest, opts ...grpc.CallOption) (*TransferObjectResponse, error) {
	out := new(TransferObjectResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/TransferObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) UnarchiveObject(ctx context.Context, in *UnarchiveObjectRequest, opts ...grpc.CallOption) (*UnarchiveObjectResponse, error) {
	out := new(UnarchiveObjectResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/UnarchiveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) AmendRegistration(ctx context.Context, in *AmendRegistrationRequest, opts ...grpc.CallOption) (*AmendRegistrationResponse, error) {
	out := new(AmendRegistrationResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/AmendRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) RevealRegistration(ctx context.Context, in *RevealRegistrationRequest, opts ...grpc.CallOption) (*RevealRegistrationResponse, error) {
	out := new(RevealRegistrationResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/RevealRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) EvaluateTheorem(ctx context.Context, in *EvaluateTheoremRequest, opts ...grpc.CallOption) (*EvaluateTheoremResponse, error) {
	out := new(EvaluateTheoremResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/EvaluateTheorem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetObjectRegistration(ctx context.Context, in *GetObjectRegistrationRequest, opts ...grpc.CallOption) (*GetObjectRegistrationResponse, error) {
	out := new(GetObjectRegistrationResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/GetObjectRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) FilterRelationships(ctx context.Context, in *FilterRelationshipsRequest, opts ...grpc.CallOption) (*FilterRelationshipsResponse, error) {
	out := new(FilterRelationshipsResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/FilterRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error) {
	out := new(ValidatePolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/ValidatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error) {
	out := new(SetParamsResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/SetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error) {
	out := new(GetParamsResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) VerifyAccessRequest(ctx context.Context, in *VerifyAccessRequestRequest, opts ...grpc.CallOption) (*VerifyAccessRequestResponse, error) {
	out := new(VerifyAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/sourcenetwork.acp_core.ACPEngine/VerifyAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACPEngineServer is the server API for ACPEngine service.
type ACPEngineServer interface {
	// CreatePolicy adds a new Policy to the engine.
	// The Policy models an aplication's high level access control rules.
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// GetPolicy returns a Policy with the given ID
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// GetPolicyCatalogue builds and return a Policy's Catalogue
	GetPolicyCatalogue(context.Context, *GetPolicyCatalogueRequest) (*GetPolicyCatalogueResponse, error)
	// ListPolicies returns a set of Policies registered in the system
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// DeletePolicy removes a Policy and all relationships and objects registered within it.
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// SetRelationship creates or updates a Relationship within a Policy
	// A Relationship is a statement which ties together an object and a subject with a "relation",
	// which means the set of high level rules defined in the Policy will apply to these entities.
	SetRelationship(context.Context, *SetRelationshipRequest) (*SetRelationshipResponse, error)
	// DelereRelationship removes a Relationship from a Policy.
	// If the Relationship was not found in a Policy, this Cmd is a no-op.
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	// RegisterObject creates a special kind of Relationship within a Policy which ties
	// the msg's Actor as the owner of the msg's Object.
	// The Owner has complete control over the set of subjects that are related to their Object,
	// giving them autonomy to share the object and revoke acces to the object,
	// much like owners in a Discretionary Access Control model.
	//
	// Attempting to register a previously registered Object - whether active or archived -
	// is an error, Object IDs are therefore assumed to be unique within a Policy.
	RegisterObject(context.Context, *RegisterObjectRequest) (*RegisterObjectResponse, error)
	// ArchiveObject sets an Object's state as "archived"
	//
	// Archiving an object removes all relationships and effectively disables it.
	// No relationships can be created for it and no checks can be executed against it.
	// Note that the original owner record is preserved for security reasons.
	//
	// Attempting to archive an already archived object is a noop.
	// Archiving an object that isn't registered is an error
	// Only the owner can archive an object
	//
	// Note: ownership records aren't removed since doing so could lead to an ownership hijack attack.
	// In order to pass ownership to another owner, use the TransferObject method.
	//
	// Hijack attacks look like the following:
	// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
	// Eve wants to access Foo but was not given permission to it.
	// Eve could "hijack" Bob's object by waiting for Bob to delete its ownership record for Foo,
	// then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
	// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
	// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
	// is an "ownership hijack".
	ArchiveObject(context.Context, *ArchiveObjectRequest) (*ArchiveObjectResponse, error)
	// TransferObject updates an Object's Owner to some other actor in the system, after which the original owner
	// loses autonomy over the object and cannot create or modify relationships.
	//
	// Transfering object cannot be reversed, unless another Transfer is initiated by the new owner.
	//
	// Transfering an archived or unregistered object is an error.
	// Only the owner can transfer an object.
	TransferObject(context.Context, *TransferObjectRequest) (*TransferObjectResponse, error)
	// UnarchiveObject returns a previously archived object to active status,
	// such that the owner is able to create relationships and share that object again.
	//
	// Only the original owner of the object can unarchive it, returns an authorization error otherwise.
	// Attempting to unarchive an active or unregistered object is an error.
	UnarchiveObject(context.Context, *UnarchiveObjectRequest) (*UnarchiveObjectResponse, error)
	// AmendRegistration transfer an object's ownership between two users
	// This operation can only be executed by the root principal.
	//
	// Amending the registration of an archived or unregistered object is an error.
	AmendRegistration(context.Context, *AmendRegistrationRequest) (*AmendRegistrationResponse, error)
	// RevealRegistration registers an object at a specific time stamp.
	//
	// This command can be paired with an external commitment protocol to reserve an object without exposing it.
	RevealRegistration(context.Context, *RevealRegistrationRequest) (*RevealRegistrationResponse, error)
	// EvaluateTheorem executes the given theorem against a stored policy.
	//
	// Returns an error if the policy does not exist.
	EvaluateTheorem(context.Context, *EvaluateTheoremRequest) (*EvaluateTheoremResponse, error)
	// GetObjectRegistration returns the registration status of an Object
	GetObjectRegistration(context.Context, *GetObjectRegistrationRequest) (*GetObjectRegistrationResponse, error)
	// FilterRelationships returns filtered set of Relationships in a Policy.
	FilterRelationships(context.Context, *FilterRelationshipsRequest) (*FilterRelationshipsResponse, error)
	// ValidatePolicy verifies whether a policy payload is valid and would be accepted
	// by the engine, without creating it.
	//
	// Returns ok or validation errors found within the policy construction
	ValidatePolicy(context.Context, *ValidatePolicyRequest) (*ValidatePolicyResponse, error)
	// SetParams tunes the parameters of the ACP Engine.
	// This operation can only be done by the root principal
	SetParams(context.Context, *SetParamsRequest) (*SetParamsResponse, error)
	// GetParams returns the current params set in the ACP Engine.
	GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error)
	// VerifyAccessRequest evaluates an AccessRequest
	// Returns true if the authenticated actor is allowed to perform the operations they are requesting.
	// FIXME: there is no need to bind the authenticated principal to the AccessRequest,
	// the verification is often done by someone else
	VerifyAccessRequest(context.Context, *VerifyAccessRequestRequest) (*VerifyAccessRequestResponse, error)
}

// UnimplementedACPEngineServer can be embedded to have forward compatible implementations.
type UnimplementedACPEngineServer struct {
}

func (*UnimplementedACPEngineServer) CreatePolicy(ctx context.Context, req *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedACPEngineServer) GetPolicy(ctx context.Context, req *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedACPEngineServer) GetPolicyCatalogue(ctx context.Context, req *GetPolicyCatalogueRequest) (*GetPolicyCatalogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCatalogue not implemented")
}
func (*UnimplementedACPEngineServer) ListPolicies(ctx context.Context, req *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedACPEngineServer) DeletePolicy(ctx context.Context, req *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedACPEngineServer) SetRelationship(ctx context.Context, req *SetRelationshipRequest) (*SetRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelationship not implemented")
}
func (*UnimplementedACPEngineServer) DeleteRelationship(ctx context.Context, req *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (*UnimplementedACPEngineServer) RegisterObject(ctx context.Context, req *RegisterObjectRequest) (*RegisterObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterObject not implemented")
}
func (*UnimplementedACPEngineServer) ArchiveObject(ctx context.Context, req *ArchiveObjectRequest) (*ArchiveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveObject not implemented")
}
func (*UnimplementedACPEngineServer) TransferObject(ctx context.Context, req *TransferObjectRequest) (*TransferObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferObject not implemented")
}
func (*UnimplementedACPEngineServer) UnarchiveObject(ctx context.Context, req *UnarchiveObjectRequest) (*UnarchiveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveObject not implemented")
}
func (*UnimplementedACPEngineServer) AmendRegistration(ctx context.Context, req *AmendRegistrationRequest) (*AmendRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendRegistration not implemented")
}
func (*UnimplementedACPEngineServer) RevealRegistration(ctx context.Context, req *RevealRegistrationRequest) (*RevealRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealRegistration not implemented")
}
func (*UnimplementedACPEngineServer) EvaluateTheorem(ctx context.Context, req *EvaluateTheoremRequest) (*EvaluateTheoremResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateTheorem not implemented")
}
func (*UnimplementedACPEngineServer) GetObjectRegistration(ctx context.Context, req *GetObjectRegistrationRequest) (*GetObjectRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectRegistration not implemented")
}
func (*UnimplementedACPEngineServer) FilterRelationships(ctx context.Context, req *FilterRelationshipsRequest) (*FilterRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterRelationships not implemented")
}
func (*UnimplementedACPEngineServer) ValidatePolicy(ctx context.Context, req *ValidatePolicyRequest) (*ValidatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePolicy not implemented")
}
func (*UnimplementedACPEngineServer) SetParams(ctx context.Context, req *SetParamsRequest) (*SetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParams not implemented")
}
func (*UnimplementedACPEngineServer) GetParams(ctx context.Context, req *GetParamsRequest) (*GetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (*UnimplementedACPEngineServer) VerifyAccessRequest(ctx context.Context, req *VerifyAccessRequestRequest) (*VerifyAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessRequest not implemented")
}

func RegisterACPEngineServer(s grpc1.Server, srv ACPEngineServer) {
	s.RegisterService(&_ACPEngine_serviceDesc, srv)
}

func _ACPEngine_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetPolicyCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyCatalogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetPolicyCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/GetPolicyCatalogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetPolicyCatalogue(ctx, req.(*GetPolicyCatalogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_SetRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).SetRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/SetRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).SetRelationship(ctx, req.(*SetRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/DeleteRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_RegisterObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).RegisterObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/RegisterObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).RegisterObject(ctx, req.(*RegisterObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_ArchiveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).ArchiveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/ArchiveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).ArchiveObject(ctx, req.(*ArchiveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_TransferObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).TransferObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/TransferObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).TransferObject(ctx, req.(*TransferObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_UnarchiveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).UnarchiveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/UnarchiveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).UnarchiveObject(ctx, req.(*UnarchiveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_AmendRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).AmendRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/AmendRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).AmendRegistration(ctx, req.(*AmendRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_RevealRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).RevealRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/RevealRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).RevealRegistration(ctx, req.(*RevealRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_EvaluateTheorem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateTheoremRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).EvaluateTheorem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/EvaluateTheorem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).EvaluateTheorem(ctx, req.(*EvaluateTheoremRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetObjectRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetObjectRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/GetObjectRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetObjectRegistration(ctx, req.(*GetObjectRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_FilterRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).FilterRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/FilterRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).FilterRelationships(ctx, req.(*FilterRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_ValidatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).ValidatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/ValidatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).ValidatePolicy(ctx, req.(*ValidatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_SetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).SetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/SetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).SetParams(ctx, req.(*SetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetParams(ctx, req.(*GetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_VerifyAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).VerifyAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcenetwork.acp_core.ACPEngine/VerifyAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).VerifyAccessRequest(ctx, req.(*VerifyAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var ACPEngine_serviceDesc = _ACPEngine_serviceDesc
var _ACPEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sourcenetwork.acp_core.ACPEngine",
	HandlerType: (*ACPEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _ACPEngine_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ACPEngine_GetPolicy_Handler,
		},
		{
			MethodName: "GetPolicyCatalogue",
			Handler:    _ACPEngine_GetPolicyCatalogue_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _ACPEngine_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _ACPEngine_DeletePolicy_Handler,
		},
		{
			MethodName: "SetRelationship",
			Handler:    _ACPEngine_SetRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _ACPEngine_DeleteRelationship_Handler,
		},
		{
			MethodName: "RegisterObject",
			Handler:    _ACPEngine_RegisterObject_Handler,
		},
		{
			MethodName: "ArchiveObject",
			Handler:    _ACPEngine_ArchiveObject_Handler,
		},
		{
			MethodName: "TransferObject",
			Handler:    _ACPEngine_TransferObject_Handler,
		},
		{
			MethodName: "UnarchiveObject",
			Handler:    _ACPEngine_UnarchiveObject_Handler,
		},
		{
			MethodName: "AmendRegistration",
			Handler:    _ACPEngine_AmendRegistration_Handler,
		},
		{
			MethodName: "RevealRegistration",
			Handler:    _ACPEngine_RevealRegistration_Handler,
		},
		{
			MethodName: "EvaluateTheorem",
			Handler:    _ACPEngine_EvaluateTheorem_Handler,
		},
		{
			MethodName: "GetObjectRegistration",
			Handler:    _ACPEngine_GetObjectRegistration_Handler,
		},
		{
			MethodName: "FilterRelationships",
			Handler:    _ACPEngine_FilterRelationships_Handler,
		},
		{
			MethodName: "ValidatePolicy",
			Handler:    _ACPEngine_ValidatePolicy_Handler,
		},
		{
			MethodName: "SetParams",
			Handler:    _ACPEngine_SetParams_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _ACPEngine_GetParams_Handler,
		},
		{
			MethodName: "VerifyAccessRequest",
			Handler:    _ACPEngine_VerifyAccessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sourcenetwork/acp_core/engine.proto",
}

func (m *CreatePolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MarshalType != 0 {
		i = encodeVarintEngine(dAtA, i, uint64(m.MarshalType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetRelationshipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RecordExisted {
		i--
		if m.RecordExisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordFound {
		i--
		if m.RecordFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordModified {
		i--
		if m.RecordModified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RelationshipsRemoved != 0 {
		i = encodeVarintEngine(dAtA, i, uint64(m.RelationshipsRemoved))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetObjectRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetObjectRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FilterRelationshipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterRelationshipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterRelationshipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterRelationshipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterRelationshipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterRelationshipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEngine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEngine(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeletePolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewOwner != nil {
		{
			size, err := m.NewOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatePolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatePolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatePolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarshalType != 0 {
		i = encodeVarintEngine(dAtA, i, uint64(m.MarshalType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyAccessRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccessRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyAccessRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessRequest != nil {
		{
			size, err := m.AccessRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyAccessRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccessRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyAccessRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyCatalogueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyCatalogueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyCatalogueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyCatalogueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyCatalogueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyCatalogueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Catalogue != nil {
		{
			size, err := m.Catalogue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateTheoremRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateTheoremRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateTheoremRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyTheorem) > 0 {
		i -= len(m.PolicyTheorem)
		copy(dAtA[i:], m.PolicyTheorem)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyTheorem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateTheoremResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateTheoremResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateTheoremResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AmendRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmendRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmendRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.NewCreationTs != nil {
		{
			size, err := m.NewCreationTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NewOwner != nil {
		{
			size, err := m.NewOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AmendRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmendRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmendRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnarchiveObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnarchiveObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnarchiveObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnarchiveObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnarchiveObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnarchiveObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordModified {
		i--
		if m.RecordModified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreationTs != nil {
		{
			size, err := m.CreationTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEngine(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEngine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEngine(dAtA []byte, offset int, v uint64) int {
	offset -= sovEngine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreatePolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.MarshalType != 0 {
		n += 1 + sovEngine(uint64(m.MarshalType))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *CreatePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *SetRelationshipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *SetRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordExisted {
		n += 2
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordFound {
		n += 2
	}
	return n
}

func (m *RegisterObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *RegisterObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *ArchiveObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *ArchiveObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelationshipsRemoved != 0 {
		n += 1 + sovEngine(uint64(m.RelationshipsRemoved))
	}
	if m.RecordModified {
		n += 2
	}
	return n
}

func (m *GetObjectRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *GetObjectRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *FilterRelationshipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *FilterRelationshipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovEngine(uint64(l))
		}
	}
	return n
}

func (m *GetPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *GetPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *ListPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovEngine(uint64(l))
		}
	}
	return n
}

func (m *DeletePolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *DeletePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Found {
		n += 2
	}
	return n
}

func (m *TransferObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.NewOwner != nil {
		l = m.NewOwner.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *TransferObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *ValidatePolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.MarshalType != 0 {
		n += 1 + sovEngine(uint64(m.MarshalType))
	}
	return n
}

func (m *ValidatePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *SetParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *SetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *GetParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *VerifyAccessRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.AccessRequest != nil {
		l = m.AccessRequest.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *VerifyAccessRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *GetPolicyCatalogueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *GetPolicyCatalogueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Catalogue != nil {
		l = m.Catalogue.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EvaluateTheoremRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.PolicyTheorem)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EvaluateTheoremResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *AmendRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.NewOwner != nil {
		l = m.NewOwner.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.NewCreationTs != nil {
		l = m.NewCreationTs.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *AmendRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *UnarchiveObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *UnarchiveObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.RecordModified {
		n += 2
	}
	return n
}

func (m *RevealRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.CreationTs != nil {
		l = m.CreationTs.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *RevealRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func sovEngine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEngine(x uint64) (n int) {
	return sovEngine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshalType", wireType)
			}
			m.MarshalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarshalType |= PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SuppliedMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &PolicyRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SuppliedMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordExisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordExisted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SuppliedMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipsRemoved", wireType)
			}
			m.RelationshipsRemoved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationshipsRemoved |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordModified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordModified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterRelationshipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterRelationshipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterRelationshipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &RelationshipSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterRelationshipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterRelationshipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterRelationshipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RelationshipRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &PolicyRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &PolicyRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewOwner == nil {
				m.NewOwner = &Actor{}
			}
			if err := m.NewOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatePolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatePolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatePolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshalType", wireType)
			}
			m.MarshalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarshalType |= PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccessRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccessRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccessRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessRequest == nil {
				m.AccessRequest = &AccessRequest{}
			}
			if err := m.AccessRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccessRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccessRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccessRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyCatalogueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyCatalogueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyCatalogueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyCatalogueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyCatalogueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyCatalogueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Catalogue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Catalogue == nil {
				m.Catalogue = &PolicyCatalogue{}
			}
			if err := m.Catalogue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateTheoremRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateTheoremRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateTheoremRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTheorem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyTheorem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateTheoremResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateTheoremResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateTheoremResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AnnotatedPolicyTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmendRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmendRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmendRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewOwner == nil {
				m.NewOwner = &Actor{}
			}
			if err := m.NewOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCreationTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewCreationTs == nil {
				m.NewCreationTs = &types.Timestamp{}
			}
			if err := m.NewCreationTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SuppliedMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmendRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmendRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmendRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnarchiveObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnarchiveObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnarchiveObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnarchiveObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnarchiveObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnarchiveObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordModified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordModified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTs == nil {
				m.CreationTs = &types.Timestamp{}
			}
			if err := m.CreationTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SuppliedMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEngine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEngine
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEngine
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEngine
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEngine        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngine          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEngine = fmt.Errorf("proto: unexpected end of group")
)
