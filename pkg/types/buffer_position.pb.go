// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/buffer_position.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BufferInterval models a range in
// a line oriented buffer
type BufferInterval struct {
	Start *BufferPosition `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *BufferPosition `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *BufferInterval) Reset()         { *m = BufferInterval{} }
func (m *BufferInterval) String() string { return proto.CompactTextString(m) }
func (*BufferInterval) ProtoMessage()    {}
func (*BufferInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d168eec00eae16, []int{0}
}
func (m *BufferInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferInterval.Merge(m, src)
}
func (m *BufferInterval) XXX_Size() int {
	return m.Size()
}
func (m *BufferInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferInterval.DiscardUnknown(m)
}

var xxx_messageInfo_BufferInterval proto.InternalMessageInfo

func (m *BufferInterval) GetStart() *BufferPosition {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BufferInterval) GetEnd() *BufferPosition {
	if m != nil {
		return m.End
	}
	return nil
}

// BufferPosition models a position in
// a line oriented buffer
type BufferPosition struct {
	Line   uint64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column uint64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (m *BufferPosition) Reset()         { *m = BufferPosition{} }
func (m *BufferPosition) String() string { return proto.CompactTextString(m) }
func (*BufferPosition) ProtoMessage()    {}
func (*BufferPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7d168eec00eae16, []int{1}
}
func (m *BufferPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferPosition.Merge(m, src)
}
func (m *BufferPosition) XXX_Size() int {
	return m.Size()
}
func (m *BufferPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferPosition.DiscardUnknown(m)
}

var xxx_messageInfo_BufferPosition proto.InternalMessageInfo

func (m *BufferPosition) GetLine() uint64 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *BufferPosition) GetColumn() uint64 {
	if m != nil {
		return m.Column
	}
	return 0
}

func init() {
	proto.RegisterType((*BufferInterval)(nil), "sourcenetwork.acp_core.BufferInterval")
	proto.RegisterType((*BufferPosition)(nil), "sourcenetwork.acp_core.BufferPosition")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/buffer_position.proto", fileDescriptor_f7d168eec00eae16)
}

var fileDescriptor_f7d168eec00eae16 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x4c, 0x2e, 0x88, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x4f, 0x2a, 0x4d, 0x4b, 0x4b, 0x2d, 0x8a, 0x2f, 0xc8, 0x2f, 0xce, 0x2c, 0xc9,
	0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x43, 0x51, 0xad, 0x07, 0x53, 0xad,
	0xd4, 0xc1, 0xc8, 0xc5, 0xe7, 0x04, 0xd6, 0xe1, 0x99, 0x57, 0x92, 0x5a, 0x54, 0x96, 0x98, 0x23,
	0x64, 0xc3, 0xc5, 0x5a, 0x5c, 0x92, 0x58, 0x54, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4,
	0xa6, 0x87, 0x5d, 0xab, 0x1e, 0x44, 0x5b, 0x00, 0xd4, 0x9e, 0x20, 0x88, 0x26, 0x21, 0x0b, 0x2e,
	0xe6, 0xd4, 0xbc, 0x14, 0x09, 0x26, 0x92, 0xf4, 0x82, 0xb4, 0x28, 0xd9, 0xc0, 0x5c, 0x02, 0x13,
	0x16, 0x12, 0xe2, 0x62, 0xc9, 0xc9, 0xcc, 0x4b, 0x05, 0x3b, 0x84, 0x25, 0x08, 0xcc, 0x16, 0x12,
	0xe3, 0x62, 0x4b, 0xce, 0xcf, 0x29, 0xcd, 0xcd, 0x03, 0x5b, 0xc1, 0x12, 0x04, 0xe5, 0x39, 0xb9,
	0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x76, 0x7a, 0x66, 0x49, 0x46,
	0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x8e, 0x30, 0x2b, 0xc8, 0x4e, 0xd7, 0x2f, 0xa9, 0x2c,
	0x48, 0x2d, 0x4e, 0x62, 0x03, 0x07, 0x97, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xcf, 0x87,
	0x1f, 0x5e, 0x01, 0x00, 0x00,
}

func (m *BufferInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != nil {
		{
			size, err := m.End.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBufferPosition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBufferPosition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BufferPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Column != 0 {
		i = encodeVarintBufferPosition(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x10
	}
	if m.Line != 0 {
		i = encodeVarintBufferPosition(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBufferPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovBufferPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BufferInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovBufferPosition(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovBufferPosition(uint64(l))
	}
	return n
}

func (m *BufferPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != 0 {
		n += 1 + sovBufferPosition(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovBufferPosition(uint64(m.Column))
	}
	return n
}

func sovBufferPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBufferPosition(x uint64) (n int) {
	return sovBufferPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BufferInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBufferPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBufferPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBufferPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &BufferPosition{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBufferPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBufferPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &BufferPosition{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBufferPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBufferPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBufferPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBufferPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBufferPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBufferPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBufferPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBufferPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBufferPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBufferPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBufferPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBufferPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBufferPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBufferPosition = fmt.Errorf("proto: unexpected end of group")
)
