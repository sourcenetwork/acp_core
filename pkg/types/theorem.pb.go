// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/theorem.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuthorizationTheorem states that the given AccessRequest request is valid (or not) in the context of a certain Policy
type AuthorizationTheorem struct {
	Operation  *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Actor      *Actor     `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *AuthorizationTheorem) Reset()         { *m = AuthorizationTheorem{} }
func (m *AuthorizationTheorem) String() string { return proto.CompactTextString(m) }
func (*AuthorizationTheorem) ProtoMessage()    {}
func (*AuthorizationTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{0}
}
func (m *AuthorizationTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationTheorem.Merge(m, src)
}
func (m *AuthorizationTheorem) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationTheorem proto.InternalMessageInfo

func (m *AuthorizationTheorem) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *AuthorizationTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *AuthorizationTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

type ReachabilityTheorem struct {
	Actor      *Actor  `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  string  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Object     *Object `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	AssertTrue bool    `protobuf:"varint,4,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *ReachabilityTheorem) Reset()         { *m = ReachabilityTheorem{} }
func (m *ReachabilityTheorem) String() string { return proto.CompactTextString(m) }
func (*ReachabilityTheorem) ProtoMessage()    {}
func (*ReachabilityTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{1}
}
func (m *ReachabilityTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReachabilityTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReachabilityTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReachabilityTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReachabilityTheorem.Merge(m, src)
}
func (m *ReachabilityTheorem) XXX_Size() int {
	return m.Size()
}
func (m *ReachabilityTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReachabilityTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_ReachabilityTheorem proto.InternalMessageInfo

func (m *ReachabilityTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *ReachabilityTheorem) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ReachabilityTheorem) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ReachabilityTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

// DelegationTheorem models a statement declaring that actor can create and delete relationships
// with `relation` for the given `object`
type DelegationTheorem struct {
	Actor      *Actor     `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  *Operation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *DelegationTheorem) Reset()         { *m = DelegationTheorem{} }
func (m *DelegationTheorem) String() string { return proto.CompactTextString(m) }
func (*DelegationTheorem) ProtoMessage()    {}
func (*DelegationTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{2}
}
func (m *DelegationTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTheorem.Merge(m, src)
}
func (m *DelegationTheorem) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTheorem proto.InternalMessageInfo

func (m *DelegationTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *DelegationTheorem) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *DelegationTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

type PolicyTheorem struct {
	AuthorizationThereoms []*AuthorizationTheorem `protobuf:"bytes,1,rep,name=authorization_thereoms,json=authorizationThereoms,proto3" json:"authorization_thereoms,omitempty"`
	DelegationTheorems    []*DelegationTheorem    `protobuf:"bytes,2,rep,name=delegation_theorems,json=delegationTheorems,proto3" json:"delegation_theorems,omitempty"`
	ReachabilityTheorems  []*ReachabilityTheorem  `protobuf:"bytes,3,rep,name=reachability_theorems,json=reachabilityTheorems,proto3" json:"reachability_theorems,omitempty"`
}

func (m *PolicyTheorem) Reset()         { *m = PolicyTheorem{} }
func (m *PolicyTheorem) String() string { return proto.CompactTextString(m) }
func (*PolicyTheorem) ProtoMessage()    {}
func (*PolicyTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{3}
}
func (m *PolicyTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyTheorem.Merge(m, src)
}
func (m *PolicyTheorem) XXX_Size() int {
	return m.Size()
}
func (m *PolicyTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyTheorem proto.InternalMessageInfo

func (m *PolicyTheorem) GetAuthorizationThereoms() []*AuthorizationTheorem {
	if m != nil {
		return m.AuthorizationThereoms
	}
	return nil
}

func (m *PolicyTheorem) GetDelegationTheorems() []*DelegationTheorem {
	if m != nil {
		return m.DelegationTheorems
	}
	return nil
}

func (m *PolicyTheorem) GetReachabilityTheorems() []*ReachabilityTheorem {
	if m != nil {
		return m.ReachabilityTheorems
	}
	return nil
}

// Result models the result of evaluating a theorem
type Result struct {
	// Valid indicates whether the Theorem is valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Message explains the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{4}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PolicyTheoremResult struct {
	AuthorizationTheoremsResult []*Result `protobuf:"bytes,1,rep,name=authorization_theorems_result,json=authorizationTheoremsResult,proto3" json:"authorization_theorems_result,omitempty"`
	DelegationTheoremsResult    []*Result `protobuf:"bytes,2,rep,name=delegation_theorems_result,json=delegationTheoremsResult,proto3" json:"delegation_theorems_result,omitempty"`
	ReachabilityTheoremsResult  []*Result `protobuf:"bytes,3,rep,name=reachability_theorems_result,json=reachabilityTheoremsResult,proto3" json:"reachability_theorems_result,omitempty"`
}

func (m *PolicyTheoremResult) Reset()         { *m = PolicyTheoremResult{} }
func (m *PolicyTheoremResult) String() string { return proto.CompactTextString(m) }
func (*PolicyTheoremResult) ProtoMessage()    {}
func (*PolicyTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{5}
}
func (m *PolicyTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyTheoremResult.Merge(m, src)
}
func (m *PolicyTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *PolicyTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyTheoremResult proto.InternalMessageInfo

func (m *PolicyTheoremResult) GetAuthorizationTheoremsResult() []*Result {
	if m != nil {
		return m.AuthorizationTheoremsResult
	}
	return nil
}

func (m *PolicyTheoremResult) GetDelegationTheoremsResult() []*Result {
	if m != nil {
		return m.DelegationTheoremsResult
	}
	return nil
}

func (m *PolicyTheoremResult) GetReachabilityTheoremsResult() []*Result {
	if m != nil {
		return m.ReachabilityTheoremsResult
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthorizationTheorem)(nil), "sourcenetwork.acp_core.AuthorizationTheorem")
	proto.RegisterType((*ReachabilityTheorem)(nil), "sourcenetwork.acp_core.ReachabilityTheorem")
	proto.RegisterType((*DelegationTheorem)(nil), "sourcenetwork.acp_core.DelegationTheorem")
	proto.RegisterType((*PolicyTheorem)(nil), "sourcenetwork.acp_core.PolicyTheorem")
	proto.RegisterType((*Result)(nil), "sourcenetwork.acp_core.Result")
	proto.RegisterType((*PolicyTheoremResult)(nil), "sourcenetwork.acp_core.PolicyTheoremResult")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/theorem.proto", fileDescriptor_0a37058f4cb4907c)
}

var fileDescriptor_0a37058f4cb4907c = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xe3, 0xe4, 0x6b, 0xbe, 0x76, 0x22, 0x16, 0x38, 0x69, 0x65, 0x85, 0xd6, 0x0d, 0x81,
	0x45, 0xaa, 0x56, 0xb1, 0x94, 0x4a, 0x88, 0x5d, 0x55, 0x04, 0x6b, 0xd0, 0xa8, 0xab, 0x0a, 0xc9,
	0x1d, 0x4f, 0x2e, 0xf6, 0x50, 0x3b, 0x63, 0xcd, 0x8c, 0x41, 0xe1, 0x29, 0x78, 0x0e, 0x24, 0x36,
	0xec, 0x58, 0xb2, 0x63, 0xd9, 0x25, 0x4b, 0x94, 0xbc, 0x08, 0xca, 0xd8, 0x6e, 0xf3, 0xc7, 0x26,
	0x29, 0x4b, 0xdf, 0xfc, 0xe6, 0xdc, 0x73, 0xcf, 0xdc, 0x0c, 0x7a, 0x2a, 0x79, 0x22, 0x28, 0x8c,
	0x40, 0x7d, 0xe4, 0xe2, 0xda, 0x21, 0x34, 0x76, 0x29, 0x17, 0xe0, 0xa8, 0x00, 0xb8, 0x80, 0xa8,
	0x1f, 0x0b, 0xae, 0xb8, 0xb9, 0xb7, 0x40, 0xf5, 0x73, 0xaa, 0x7d, 0xe8, 0x73, 0xee, 0x87, 0xe0,
	0x68, 0xca, 0x4b, 0xde, 0x39, 0x8a, 0x45, 0x20, 0x15, 0x89, 0xe2, 0xf4, 0x60, 0xfb, 0xa4, 0x44,
	0x9e, 0x50, 0x0a, 0x52, 0xba, 0x43, 0xa0, 0x4c, 0x32, 0x3e, 0xca, 0xe8, 0x27, 0x25, 0x74, 0xcc,
	0x43, 0x46, 0xc7, 0x19, 0x74, 0xf4, 0x57, 0xc8, 0x95, 0x01, 0x17, 0x6a, 0x0d, 0x2a, 0x20, 0x24,
	0x8a, 0xf1, 0x91, 0x0c, 0x58, 0x6e, 0x74, 0xb0, 0x01, 0xea, 0x4a, 0x08, 0x81, 0x2a, 0x2e, 0xd6,
	0xd8, 0x95, 0x63, 0xa9, 0xf2, 0xe8, 0xba, 0x5f, 0x0d, 0xd4, 0x3a, 0x4f, 0x54, 0xc0, 0x05, 0xfb,
	0xa4, 0x95, 0x2e, 0xd2, 0x64, 0xcd, 0x33, 0xb4, 0xc3, 0x63, 0x10, 0xba, 0x66, 0x19, 0x1d, 0xa3,
	0xd7, 0x18, 0x3c, 0xee, 0x17, 0xe7, 0xdc, 0x7f, 0x9d, 0x83, 0xf8, 0xee, 0x8c, 0x79, 0x8a, 0xb6,
	0xc8, 0xcc, 0x8d, 0x55, 0xd5, 0x87, 0x0f, 0xca, 0x0e, 0x9f, 0xcf, 0x20, 0x9c, 0xb2, 0xe6, 0x21,
	0x6a, 0x10, 0x29, 0x41, 0x28, 0x57, 0x89, 0x04, 0xac, 0x5a, 0xc7, 0xe8, 0x6d, 0x63, 0x94, 0x96,
	0x2e, 0x44, 0x02, 0xdd, 0x1f, 0x06, 0x6a, 0x62, 0x20, 0x34, 0x20, 0x1e, 0x0b, 0x99, 0x1a, 0xe7,
	0x76, 0x6f, 0xbb, 0x19, 0xf7, 0xe8, 0xb6, 0x3f, 0x3f, 0xe3, 0xcc, 0xe6, 0xce, 0xfc, 0x00, 0xcf,
	0x50, 0x9d, 0x7b, 0xef, 0x81, 0x2a, 0x6d, 0xa3, 0x31, 0xb0, 0x4b, 0xc7, 0xd7, 0x14, 0xce, 0xe8,
	0xe5, 0x19, 0xfe, 0x5b, 0x99, 0xe1, 0x8b, 0x81, 0x1e, 0xbe, 0x84, 0x10, 0xfc, 0x85, 0xc0, 0xff,
	0x69, 0x82, 0xb3, 0xe5, 0x09, 0xee, 0x7b, 0x4b, 0x6b, 0x03, 0xff, 0x56, 0x45, 0x0f, 0xde, 0xe8,
	0xdd, 0xcd, 0x8d, 0x52, 0xb4, 0x47, 0xe6, 0x37, 0xc6, 0x55, 0x01, 0x08, 0xe0, 0x91, 0xb4, 0x8c,
	0x4e, 0xad, 0xd7, 0x18, 0x9c, 0x94, 0x3a, 0x2f, 0xd8, 0x33, 0xbc, 0x4b, 0x96, 0xaa, 0x5a, 0xca,
	0xbc, 0x44, 0xcd, 0xe1, 0x6d, 0x44, 0x6e, 0xf6, 0x77, 0x97, 0x56, 0x55, 0x77, 0x38, 0x2a, 0xeb,
	0xb0, 0x92, 0x2a, 0x36, 0x87, 0xcb, 0x25, 0x69, 0x5e, 0xa1, 0x5d, 0x31, 0xb7, 0x42, 0x77, 0xea,
	0x35, 0xad, 0x7e, 0x5c, 0xa6, 0x5e, 0xb0, 0x77, 0xb8, 0x25, 0x56, 0x8b, 0xb2, 0xfb, 0x1c, 0xd5,
	0x31, 0xc8, 0x24, 0x54, 0x66, 0x0b, 0x6d, 0x7d, 0x20, 0x21, 0x1b, 0xea, 0x5b, 0xdd, 0xc6, 0xe9,
	0x87, 0x69, 0xa1, 0xff, 0x23, 0x90, 0x92, 0xf8, 0x90, 0xad, 0x5d, 0xfe, 0xd9, 0xfd, 0x5e, 0x45,
	0xcd, 0x85, 0xb8, 0x33, 0x1d, 0x0f, 0x1d, 0xac, 0x84, 0xae, 0x7b, 0xb9, 0x42, 0x03, 0x59, 0xf6,
	0x76, 0xb9, 0xf7, 0x19, 0x85, 0x1f, 0x91, 0x82, 0x3b, 0x90, 0x59, 0x8f, 0xb7, 0xa8, 0x5d, 0x90,
	0x79, 0xde, 0xa0, 0xba, 0x51, 0x03, 0x6b, 0x35, 0xef, 0x4c, 0xfd, 0x0a, 0xed, 0x17, 0xa6, 0x9e,
	0xeb, 0xd7, 0x36, 0xd2, 0x6f, 0x17, 0xe5, 0x9d, 0xfe, 0xf6, 0xe2, 0xd5, 0xcf, 0x89, 0x6d, 0xdc,
	0x4c, 0x6c, 0xe3, 0xf7, 0xc4, 0x36, 0x3e, 0x4f, 0xed, 0xca, 0xcd, 0xd4, 0xae, 0xfc, 0x9a, 0xda,
	0x95, 0xcb, 0x63, 0x9f, 0xa9, 0x20, 0xf1, 0xfa, 0x94, 0x47, 0x4e, 0xd9, 0xfb, 0x7c, 0xed, 0x3b,
	0x6a, 0x1c, 0x83, 0xf4, 0xea, 0xfa, 0x65, 0x3c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x2f,
	0xe7, 0x1b, 0x7c, 0x06, 0x00, 0x00,
}

func (m *AuthorizationTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReachabilityTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReachabilityTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReachabilityTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintTheorem(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReachabilityTheorems) > 0 {
		for iNdEx := len(m.ReachabilityTheorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReachabilityTheorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegationTheorems) > 0 {
		for iNdEx := len(m.DelegationTheorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTheorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AuthorizationThereoms) > 0 {
		for iNdEx := len(m.AuthorizationThereoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizationThereoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTheorem(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReachabilityTheoremsResult) > 0 {
		for iNdEx := len(m.ReachabilityTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReachabilityTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for iNdEx := len(m.DelegationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AuthorizationTheoremsResult) > 0 {
		for iNdEx := len(m.AuthorizationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTheorem(dAtA []byte, offset int, v uint64) int {
	offset -= sovTheorem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizationTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *ReachabilityTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *DelegationTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *PolicyTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthorizationThereoms) > 0 {
		for _, e := range m.AuthorizationThereoms {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.DelegationTheorems) > 0 {
		for _, e := range m.DelegationTheorems {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.ReachabilityTheorems) > 0 {
		for _, e := range m.ReachabilityTheorems {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *PolicyTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthorizationTheoremsResult) > 0 {
		for _, e := range m.AuthorizationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for _, e := range m.DelegationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.ReachabilityTheoremsResult) > 0 {
		for _, e := range m.ReachabilityTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	return n
}

func sovTheorem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTheorem(x uint64) (n int) {
	return sovTheorem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizationTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReachabilityTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReachabilityTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReachabilityTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationThereoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationThereoms = append(m.AuthorizationThereoms, &AuthorizationTheorem{})
			if err := m.AuthorizationThereoms[len(m.AuthorizationThereoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTheorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTheorems = append(m.DelegationTheorems, &DelegationTheorem{})
			if err := m.DelegationTheorems[len(m.DelegationTheorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReachabilityTheorems = append(m.ReachabilityTheorems, &ReachabilityTheorem{})
			if err := m.ReachabilityTheorems[len(m.ReachabilityTheorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationTheoremsResult = append(m.AuthorizationTheoremsResult, &Result{})
			if err := m.AuthorizationTheoremsResult[len(m.AuthorizationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTheoremsResult = append(m.DelegationTheoremsResult, &Result{})
			if err := m.DelegationTheoremsResult[len(m.DelegationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReachabilityTheoremsResult = append(m.ReachabilityTheoremsResult, &Result{})
			if err := m.ReachabilityTheoremsResult[len(m.ReachabilityTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTheorem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTheorem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTheorem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTheorem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTheorem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTheorem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTheorem = fmt.Errorf("proto: unexpected end of group")
)
