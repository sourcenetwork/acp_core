// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/theorem.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ResultStatus models the possible results from executing a Theorem
type ResultStatus int32

const (
	ResultStatus_Reject ResultStatus = 0
	ResultStatus_Accept ResultStatus = 1
	ResultStatus_Error  ResultStatus = 2
)

var ResultStatus_name = map[int32]string{
	0: "Reject",
	1: "Accept",
	2: "Error",
}

var ResultStatus_value = map[string]int32{
	"Reject": 0,
	"Accept": 1,
	"Error":  2,
}

func (x ResultStatus) String() string {
	return proto.EnumName(ResultStatus_name, int32(x))
}

func (ResultStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{0}
}

// AuthorizationTheorem states that the given AccessRequest request is valid (or not) in the context of a certain Policy
type AuthorizationTheorem struct {
	Operation  *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Actor      *Actor     `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *AuthorizationTheorem) Reset()         { *m = AuthorizationTheorem{} }
func (m *AuthorizationTheorem) String() string { return proto.CompactTextString(m) }
func (*AuthorizationTheorem) ProtoMessage()    {}
func (*AuthorizationTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{0}
}
func (m *AuthorizationTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationTheorem.Merge(m, src)
}
func (m *AuthorizationTheorem) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationTheorem proto.InternalMessageInfo

func (m *AuthorizationTheorem) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *AuthorizationTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *AuthorizationTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

type ReachabilityTheorem struct {
	Actor      *Actor  `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  string  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Object     *Object `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	AssertTrue bool    `protobuf:"varint,4,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *ReachabilityTheorem) Reset()         { *m = ReachabilityTheorem{} }
func (m *ReachabilityTheorem) String() string { return proto.CompactTextString(m) }
func (*ReachabilityTheorem) ProtoMessage()    {}
func (*ReachabilityTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{1}
}
func (m *ReachabilityTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReachabilityTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReachabilityTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReachabilityTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReachabilityTheorem.Merge(m, src)
}
func (m *ReachabilityTheorem) XXX_Size() int {
	return m.Size()
}
func (m *ReachabilityTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReachabilityTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_ReachabilityTheorem proto.InternalMessageInfo

func (m *ReachabilityTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *ReachabilityTheorem) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ReachabilityTheorem) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ReachabilityTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

// DelegationTheorem models a statement declaring that actor can create and delete relationships
// with `relation` for the given `object`
type DelegationTheorem struct {
	Actor      *Actor     `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Operation  *Operation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	AssertTrue bool       `protobuf:"varint,3,opt,name=assert_true,json=assertTrue,proto3" json:"assert_true,omitempty"`
}

func (m *DelegationTheorem) Reset()         { *m = DelegationTheorem{} }
func (m *DelegationTheorem) String() string { return proto.CompactTextString(m) }
func (*DelegationTheorem) ProtoMessage()    {}
func (*DelegationTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{2}
}
func (m *DelegationTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTheorem.Merge(m, src)
}
func (m *DelegationTheorem) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTheorem proto.InternalMessageInfo

func (m *DelegationTheorem) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *DelegationTheorem) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *DelegationTheorem) GetAssertTrue() bool {
	if m != nil {
		return m.AssertTrue
	}
	return false
}

// PolicyTheorem models a set of theorems about a Policy
type PolicyTheorem struct {
	AuthorizationTheorems []*AuthorizationTheorem `protobuf:"bytes,1,rep,name=authorization_theorems,json=authorizationTheorems,proto3" json:"authorization_theorems,omitempty"`
	DelegationTheorems    []*DelegationTheorem    `protobuf:"bytes,2,rep,name=delegation_theorems,json=delegationTheorems,proto3" json:"delegation_theorems,omitempty"`
	ReachabilityTheorems  []*ReachabilityTheorem  `protobuf:"bytes,3,rep,name=reachability_theorems,json=reachabilityTheorems,proto3" json:"reachability_theorems,omitempty"`
}

func (m *PolicyTheorem) Reset()         { *m = PolicyTheorem{} }
func (m *PolicyTheorem) String() string { return proto.CompactTextString(m) }
func (*PolicyTheorem) ProtoMessage()    {}
func (*PolicyTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{3}
}
func (m *PolicyTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyTheorem.Merge(m, src)
}
func (m *PolicyTheorem) XXX_Size() int {
	return m.Size()
}
func (m *PolicyTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyTheorem proto.InternalMessageInfo

func (m *PolicyTheorem) GetAuthorizationTheorems() []*AuthorizationTheorem {
	if m != nil {
		return m.AuthorizationTheorems
	}
	return nil
}

func (m *PolicyTheorem) GetDelegationTheorems() []*DelegationTheorem {
	if m != nil {
		return m.DelegationTheorems
	}
	return nil
}

func (m *PolicyTheorem) GetReachabilityTheorems() []*ReachabilityTheorem {
	if m != nil {
		return m.ReachabilityTheorems
	}
	return nil
}

// Result models the result of evaluating a theorem
type Result struct {
	// status indicates whether the theorem was accepted, rejected or an error happened
	Status ResultStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sourcenetwork.acp_core.ResultStatus" json:"status,omitempty"`
	// Message explains the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{4}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() ResultStatus {
	if m != nil {
		return m.Status
	}
	return ResultStatus_Reject
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AuthorizationTheoremResult struct {
	Theorem *AuthorizationTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AuthorizationTheoremResult) Reset()         { *m = AuthorizationTheoremResult{} }
func (m *AuthorizationTheoremResult) String() string { return proto.CompactTextString(m) }
func (*AuthorizationTheoremResult) ProtoMessage()    {}
func (*AuthorizationTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{5}
}
func (m *AuthorizationTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationTheoremResult.Merge(m, src)
}
func (m *AuthorizationTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationTheoremResult proto.InternalMessageInfo

func (m *AuthorizationTheoremResult) GetTheorem() *AuthorizationTheorem {
	if m != nil {
		return m.Theorem
	}
	return nil
}

func (m *AuthorizationTheoremResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type DelegationTheoremResult struct {
	Theorem *DelegationTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result            `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *DelegationTheoremResult) Reset()         { *m = DelegationTheoremResult{} }
func (m *DelegationTheoremResult) String() string { return proto.CompactTextString(m) }
func (*DelegationTheoremResult) ProtoMessage()    {}
func (*DelegationTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{6}
}
func (m *DelegationTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTheoremResult.Merge(m, src)
}
func (m *DelegationTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTheoremResult proto.InternalMessageInfo

func (m *DelegationTheoremResult) GetTheorem() *DelegationTheorem {
	if m != nil {
		return m.Theorem
	}
	return nil
}

func (m *DelegationTheoremResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReachabilityTheoremResult struct {
	Theorem *ReachabilityTheorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	Result  *Result              `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ReachabilityTheoremResult) Reset()         { *m = ReachabilityTheoremResult{} }
func (m *ReachabilityTheoremResult) String() string { return proto.CompactTextString(m) }
func (*ReachabilityTheoremResult) ProtoMessage()    {}
func (*ReachabilityTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{7}
}
func (m *ReachabilityTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReachabilityTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReachabilityTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReachabilityTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReachabilityTheoremResult.Merge(m, src)
}
func (m *ReachabilityTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *ReachabilityTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReachabilityTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReachabilityTheoremResult proto.InternalMessageInfo

func (m *ReachabilityTheoremResult) GetTheorem() *ReachabilityTheorem {
	if m != nil {
		return m.Theorem
	}
	return nil
}

func (m *ReachabilityTheoremResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type AnnotatedAuthorizationTheoremResult struct {
	Result   *AuthorizationTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval             `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *AnnotatedAuthorizationTheoremResult) Reset()         { *m = AnnotatedAuthorizationTheoremResult{} }
func (m *AnnotatedAuthorizationTheoremResult) String() string { return proto.CompactTextString(m) }
func (*AnnotatedAuthorizationTheoremResult) ProtoMessage()    {}
func (*AnnotatedAuthorizationTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{8}
}
func (m *AnnotatedAuthorizationTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotatedAuthorizationTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotatedAuthorizationTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotatedAuthorizationTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotatedAuthorizationTheoremResult.Merge(m, src)
}
func (m *AnnotatedAuthorizationTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *AnnotatedAuthorizationTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotatedAuthorizationTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotatedAuthorizationTheoremResult proto.InternalMessageInfo

func (m *AnnotatedAuthorizationTheoremResult) GetResult() *AuthorizationTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AnnotatedAuthorizationTheoremResult) GetInterval() *BufferInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

type AnnotatedDelegationTheoremResult struct {
	Result   *DelegationTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval          `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *AnnotatedDelegationTheoremResult) Reset()         { *m = AnnotatedDelegationTheoremResult{} }
func (m *AnnotatedDelegationTheoremResult) String() string { return proto.CompactTextString(m) }
func (*AnnotatedDelegationTheoremResult) ProtoMessage()    {}
func (*AnnotatedDelegationTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{9}
}
func (m *AnnotatedDelegationTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotatedDelegationTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotatedDelegationTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotatedDelegationTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotatedDelegationTheoremResult.Merge(m, src)
}
func (m *AnnotatedDelegationTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *AnnotatedDelegationTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotatedDelegationTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotatedDelegationTheoremResult proto.InternalMessageInfo

func (m *AnnotatedDelegationTheoremResult) GetResult() *DelegationTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AnnotatedDelegationTheoremResult) GetInterval() *BufferInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

type AnnotatedReachabilityTheoremResult struct {
	Result   *ReachabilityTheoremResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Interval *BufferInterval            `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *AnnotatedReachabilityTheoremResult) Reset()         { *m = AnnotatedReachabilityTheoremResult{} }
func (m *AnnotatedReachabilityTheoremResult) String() string { return proto.CompactTextString(m) }
func (*AnnotatedReachabilityTheoremResult) ProtoMessage()    {}
func (*AnnotatedReachabilityTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{10}
}
func (m *AnnotatedReachabilityTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotatedReachabilityTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotatedReachabilityTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotatedReachabilityTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotatedReachabilityTheoremResult.Merge(m, src)
}
func (m *AnnotatedReachabilityTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *AnnotatedReachabilityTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotatedReachabilityTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotatedReachabilityTheoremResult proto.InternalMessageInfo

func (m *AnnotatedReachabilityTheoremResult) GetResult() *ReachabilityTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AnnotatedReachabilityTheoremResult) GetInterval() *BufferInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

type PolicyTheoremResult struct {
	Theorem                     *PolicyTheorem                `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	AuthorizationTheoremsResult []*AuthorizationTheoremResult `protobuf:"bytes,2,rep,name=authorization_theorems_result,json=authorizationTheoremsResult,proto3" json:"authorization_theorems_result,omitempty"`
	DelegationTheoremsResult    []*DelegationTheoremResult    `protobuf:"bytes,3,rep,name=delegation_theorems_result,json=delegationTheoremsResult,proto3" json:"delegation_theorems_result,omitempty"`
	ReachabilityTheoremsResult  []*ReachabilityTheoremResult  `protobuf:"bytes,4,rep,name=reachability_theorems_result,json=reachabilityTheoremsResult,proto3" json:"reachability_theorems_result,omitempty"`
}

func (m *PolicyTheoremResult) Reset()         { *m = PolicyTheoremResult{} }
func (m *PolicyTheoremResult) String() string { return proto.CompactTextString(m) }
func (*PolicyTheoremResult) ProtoMessage()    {}
func (*PolicyTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{11}
}
func (m *PolicyTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyTheoremResult.Merge(m, src)
}
func (m *PolicyTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *PolicyTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyTheoremResult proto.InternalMessageInfo

func (m *PolicyTheoremResult) GetTheorem() *PolicyTheorem {
	if m != nil {
		return m.Theorem
	}
	return nil
}

func (m *PolicyTheoremResult) GetAuthorizationTheoremsResult() []*AuthorizationTheoremResult {
	if m != nil {
		return m.AuthorizationTheoremsResult
	}
	return nil
}

func (m *PolicyTheoremResult) GetDelegationTheoremsResult() []*DelegationTheoremResult {
	if m != nil {
		return m.DelegationTheoremsResult
	}
	return nil
}

func (m *PolicyTheoremResult) GetReachabilityTheoremsResult() []*ReachabilityTheoremResult {
	if m != nil {
		return m.ReachabilityTheoremsResult
	}
	return nil
}

type AnnotatedPolicyTheoremResult struct {
	Theorem                     *PolicyTheorem                         `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem,omitempty"`
	AuthorizationTheoremsResult []*AnnotatedAuthorizationTheoremResult `protobuf:"bytes,2,rep,name=authorization_theorems_result,json=authorizationTheoremsResult,proto3" json:"authorization_theorems_result,omitempty"`
	DelegationTheoremsResult    []*AnnotatedDelegationTheoremResult    `protobuf:"bytes,3,rep,name=delegation_theorems_result,json=delegationTheoremsResult,proto3" json:"delegation_theorems_result,omitempty"`
	ReachabilityTheoremsResult  []*AnnotatedReachabilityTheoremResult  `protobuf:"bytes,4,rep,name=reachability_theorems_result,json=reachabilityTheoremsResult,proto3" json:"reachability_theorems_result,omitempty"`
}

func (m *AnnotatedPolicyTheoremResult) Reset()         { *m = AnnotatedPolicyTheoremResult{} }
func (m *AnnotatedPolicyTheoremResult) String() string { return proto.CompactTextString(m) }
func (*AnnotatedPolicyTheoremResult) ProtoMessage()    {}
func (*AnnotatedPolicyTheoremResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a37058f4cb4907c, []int{12}
}
func (m *AnnotatedPolicyTheoremResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotatedPolicyTheoremResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotatedPolicyTheoremResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotatedPolicyTheoremResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotatedPolicyTheoremResult.Merge(m, src)
}
func (m *AnnotatedPolicyTheoremResult) XXX_Size() int {
	return m.Size()
}
func (m *AnnotatedPolicyTheoremResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotatedPolicyTheoremResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotatedPolicyTheoremResult proto.InternalMessageInfo

func (m *AnnotatedPolicyTheoremResult) GetTheorem() *PolicyTheorem {
	if m != nil {
		return m.Theorem
	}
	return nil
}

func (m *AnnotatedPolicyTheoremResult) GetAuthorizationTheoremsResult() []*AnnotatedAuthorizationTheoremResult {
	if m != nil {
		return m.AuthorizationTheoremsResult
	}
	return nil
}

func (m *AnnotatedPolicyTheoremResult) GetDelegationTheoremsResult() []*AnnotatedDelegationTheoremResult {
	if m != nil {
		return m.DelegationTheoremsResult
	}
	return nil
}

func (m *AnnotatedPolicyTheoremResult) GetReachabilityTheoremsResult() []*AnnotatedReachabilityTheoremResult {
	if m != nil {
		return m.ReachabilityTheoremsResult
	}
	return nil
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.ResultStatus", ResultStatus_name, ResultStatus_value)
	proto.RegisterType((*AuthorizationTheorem)(nil), "sourcenetwork.acp_core.AuthorizationTheorem")
	proto.RegisterType((*ReachabilityTheorem)(nil), "sourcenetwork.acp_core.ReachabilityTheorem")
	proto.RegisterType((*DelegationTheorem)(nil), "sourcenetwork.acp_core.DelegationTheorem")
	proto.RegisterType((*PolicyTheorem)(nil), "sourcenetwork.acp_core.PolicyTheorem")
	proto.RegisterType((*Result)(nil), "sourcenetwork.acp_core.Result")
	proto.RegisterType((*AuthorizationTheoremResult)(nil), "sourcenetwork.acp_core.AuthorizationTheoremResult")
	proto.RegisterType((*DelegationTheoremResult)(nil), "sourcenetwork.acp_core.DelegationTheoremResult")
	proto.RegisterType((*ReachabilityTheoremResult)(nil), "sourcenetwork.acp_core.ReachabilityTheoremResult")
	proto.RegisterType((*AnnotatedAuthorizationTheoremResult)(nil), "sourcenetwork.acp_core.AnnotatedAuthorizationTheoremResult")
	proto.RegisterType((*AnnotatedDelegationTheoremResult)(nil), "sourcenetwork.acp_core.AnnotatedDelegationTheoremResult")
	proto.RegisterType((*AnnotatedReachabilityTheoremResult)(nil), "sourcenetwork.acp_core.AnnotatedReachabilityTheoremResult")
	proto.RegisterType((*PolicyTheoremResult)(nil), "sourcenetwork.acp_core.PolicyTheoremResult")
	proto.RegisterType((*AnnotatedPolicyTheoremResult)(nil), "sourcenetwork.acp_core.AnnotatedPolicyTheoremResult")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/theorem.proto", fileDescriptor_0a37058f4cb4907c)
}

var fileDescriptor_0a37058f4cb4907c = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x4f, 0xdb, 0x56,
	0x14, 0xcf, 0x4d, 0x20, 0xc0, 0xc9, 0x36, 0x31, 0xf3, 0x67, 0x59, 0x06, 0x26, 0x33, 0x6c, 0x82,
	0x81, 0x12, 0x11, 0xa4, 0x69, 0xda, 0x26, 0xa1, 0xb0, 0xb1, 0x89, 0xbd, 0x6c, 0xf2, 0x78, 0xe2,
	0x25, 0x38, 0xe6, 0x92, 0xb8, 0x38, 0xb9, 0xee, 0xbd, 0xd7, 0x54, 0xa9, 0x2a, 0xf5, 0x2b, 0xf4,
	0xa9, 0x0f, 0x55, 0x3f, 0x41, 0xa5, 0xaa, 0x12, 0x55, 0x3f, 0x40, 0xdf, 0xfa, 0xc8, 0x53, 0xd5,
	0xc7, 0x0a, 0xbe, 0x48, 0x65, 0xfb, 0xda, 0x24, 0x8e, 0x9d, 0xc4, 0x81, 0xbe, 0x25, 0x37, 0xbf,
	0x73, 0xce, 0xef, 0x9c, 0xdf, 0xcf, 0xe7, 0x3a, 0xb0, 0xc6, 0x88, 0x4d, 0x75, 0xdc, 0xc6, 0xfc,
	0x01, 0xa1, 0x67, 0x65, 0x4d, 0xb7, 0x6a, 0x3a, 0xa1, 0xb8, 0xcc, 0x9b, 0x98, 0x50, 0xdc, 0x2a,
	0x59, 0x94, 0x70, 0x22, 0x2d, 0xf6, 0xa0, 0x4a, 0x3e, 0xaa, 0xb0, 0xd2, 0x20, 0xa4, 0x61, 0xe2,
	0xb2, 0x8b, 0xaa, 0xdb, 0xa7, 0x65, 0x6e, 0xb4, 0x30, 0xe3, 0x5a, 0xcb, 0xf2, 0x02, 0x0b, 0x71,
	0xe9, 0x29, 0xbe, 0x6f, 0x63, 0xc6, 0x05, 0x6a, 0x2b, 0x06, 0x55, 0xb7, 0x4f, 0x4f, 0x31, 0xad,
	0x59, 0x84, 0x19, 0xdc, 0x20, 0x6d, 0x81, 0x5e, 0x8d, 0x41, 0x5b, 0xc4, 0x34, 0xf4, 0x8e, 0x00,
	0x6d, 0x0c, 0x04, 0xd5, 0x58, 0x93, 0x50, 0x3e, 0x04, 0x4a, 0xb1, 0xa9, 0x39, 0x65, 0x59, 0xd3,
	0xf0, 0xdb, 0xa9, 0x8c, 0x00, 0xad, 0x31, 0x6c, 0x62, 0x9d, 0x13, 0x3a, 0x84, 0x2e, 0xeb, 0x30,
	0xee, 0x0f, 0x58, 0x79, 0x89, 0x60, 0xbe, 0x6a, 0xf3, 0x26, 0xa1, 0xc6, 0x43, 0x37, 0xd3, 0xa1,
	0x37, 0x7f, 0x69, 0x17, 0x66, 0x88, 0x85, 0xa9, 0x7b, 0x96, 0x47, 0x45, 0xb4, 0x9e, 0xab, 0x7c,
	0x5f, 0x8a, 0x56, 0xa3, 0xf4, 0xaf, 0x0f, 0x54, 0x6f, 0x62, 0xa4, 0x1d, 0x98, 0xd4, 0x1c, 0x36,
	0xf9, 0xb4, 0x1b, 0xbc, 0x1c, 0x17, 0x5c, 0x75, 0x40, 0xaa, 0x87, 0x95, 0x56, 0x20, 0xa7, 0x31,
	0x86, 0x29, 0xaf, 0x71, 0x6a, 0xe3, 0x7c, 0xa6, 0x88, 0xd6, 0xa7, 0x55, 0xf0, 0x8e, 0x0e, 0xa9,
	0x8d, 0x95, 0xb7, 0x08, 0xe6, 0x54, 0xac, 0xe9, 0x4d, 0xad, 0x6e, 0x98, 0x06, 0xef, 0xf8, 0x74,
	0x83, 0x6a, 0x28, 0x41, 0xb5, 0xa5, 0xee, 0x1e, 0x1d, 0x9a, 0x33, 0xdd, 0x0d, 0xfc, 0x0c, 0x59,
	0x52, 0xbf, 0x87, 0x75, 0xee, 0xd2, 0xc8, 0x55, 0xe4, 0xd8, 0xf6, 0x5d, 0x94, 0x2a, 0xd0, 0xe1,
	0x1e, 0x26, 0xfa, 0x7a, 0x78, 0x81, 0xe0, 0xeb, 0x3f, 0xb1, 0x89, 0x1b, 0x3d, 0x03, 0x1f, 0xab,
	0x83, 0xdd, 0x70, 0x07, 0x49, 0x55, 0x1a, 0x3a, 0xf0, 0x8b, 0x34, 0x7c, 0xf9, 0x9f, 0xeb, 0x5d,
	0x9f, 0xa8, 0x0e, 0x8b, 0x5a, 0xb7, 0x63, 0x6a, 0xe2, 0x91, 0x65, 0x79, 0x54, 0xcc, 0xac, 0xe7,
	0x2a, 0x5b, 0xb1, 0xcc, 0x23, 0x7c, 0xa6, 0x2e, 0x68, 0x11, 0xa7, 0x4c, 0x3a, 0x82, 0xb9, 0x93,
	0x60, 0x44, 0x37, 0x15, 0xd2, 0x6e, 0x85, 0x8d, 0xb8, 0x0a, 0x7d, 0x53, 0x55, 0xa5, 0x93, 0xf0,
	0x11, 0x93, 0x8e, 0x61, 0x81, 0x76, 0x59, 0xe8, 0x26, 0x7b, 0xc6, 0xcd, 0xbe, 0x19, 0x97, 0x3d,
	0xc2, 0x77, 0xea, 0x3c, 0xed, 0x3f, 0x64, 0xca, 0x31, 0x64, 0x55, 0xcc, 0x6c, 0x93, 0x4b, 0xbf,
	0x43, 0x96, 0x71, 0x8d, 0xdb, 0xcc, 0x95, 0xf5, 0xab, 0xca, 0x5a, 0x7c, 0x72, 0x07, 0xff, 0xbf,
	0x8b, 0x55, 0x45, 0x8c, 0x94, 0x87, 0xa9, 0x16, 0x66, 0x4c, 0x6b, 0x60, 0x61, 0x4f, 0xff, 0xab,
	0xf2, 0x1c, 0x41, 0x21, 0x72, 0x9e, 0x5e, 0xd9, 0xbf, 0x60, 0x4a, 0x74, 0x25, 0xec, 0x94, 0x4c,
	0x14, 0x3f, 0xd8, 0x79, 0x06, 0xa8, 0x9b, 0x51, 0x98, 0x4b, 0x1e, 0x4c, 0x5f, 0x15, 0x68, 0xe5,
	0x29, 0x82, 0x6f, 0xfa, 0xc5, 0xf0, 0xb8, 0xfd, 0x11, 0xe6, 0x96, 0x40, 0xce, 0x5b, 0x13, 0x7b,
	0x86, 0xe0, 0xdb, 0x28, 0x1d, 0x3d, 0x6a, 0xfb, 0x61, 0x6a, 0x89, 0xbc, 0x70, 0x6b, 0x72, 0x6f,
	0x10, 0xac, 0x56, 0xdb, 0x6d, 0xc2, 0x35, 0x8e, 0x4f, 0x06, 0xa8, 0xfb, 0x4f, 0x90, 0xdf, 0x63,
	0x59, 0x49, 0x24, 0x6e, 0x4f, 0x4d, 0x69, 0x0f, 0xa6, 0x8d, 0x36, 0xc7, 0xf4, 0x5c, 0x33, 0x05,
	0xdb, 0x1f, 0xe3, 0xb2, 0xed, 0xb9, 0xb7, 0xe2, 0x81, 0x40, 0xab, 0x41, 0x9c, 0xf2, 0x0a, 0x41,
	0x31, 0xe0, 0x1d, 0x27, 0xfb, 0xdf, 0x21, 0xd2, 0xe5, 0xd1, 0x55, 0xbf, 0x7b, 0xc6, 0xaf, 0x11,
	0x28, 0x01, 0xe3, 0x78, 0x3f, 0x1c, 0x84, 0x38, 0x6f, 0x27, 0xb1, 0xc3, 0xdd, 0xb3, 0xbe, 0xc8,
	0xc0, 0x5c, 0xcf, 0x2e, 0x16, 0x34, 0x77, 0xc3, 0xb6, 0xfd, 0x21, 0x2e, 0x75, 0x6f, 0x74, 0x60,
	0xd8, 0x73, 0x58, 0x8e, 0x5e, 0xe9, 0xb5, 0xc0, 0xc7, 0x99, 0x31, 0x7d, 0xf6, 0x5d, 0xe4, 0x7e,
	0x17, 0xc4, 0x5b, 0x50, 0x88, 0xd8, 0xf2, 0x7e, 0x51, 0x6f, 0x1d, 0x27, 0xf6, 0x49, 0xbe, 0x7f,
	0xe5, 0x8b, 0x72, 0x0c, 0x96, 0x22, 0x17, 0xbf, 0x5f, 0x70, 0xc2, 0x2d, 0x38, 0x86, 0xc8, 0x85,
	0xa8, 0x5b, 0xc0, 0xfb, 0x4d, 0x79, 0x9f, 0x81, 0xa5, 0xc0, 0x6a, 0x9f, 0x45, 0xbd, 0xc7, 0xa3,
	0xa9, 0xf7, 0x5b, 0xac, 0x7a, 0xc3, 0x57, 0xce, 0x60, 0x19, 0xcf, 0x47, 0x90, 0xf1, 0x97, 0xa1,
	0xd5, 0x93, 0xeb, 0xf9, 0x68, 0x24, 0x3d, 0x7f, 0x1d, 0x5a, 0x79, 0x2c, 0x61, 0x7f, 0xda, 0x86,
	0x2f, 0xba, 0x2f, 0x6d, 0x09, 0x9c, 0x4b, 0xdf, 0x79, 0x03, 0x9c, 0x4d, 0x39, 0x9f, 0xab, 0xba,
	0x8e, 0x2d, 0x3e, 0x8b, 0xa4, 0x19, 0x98, 0xdc, 0xa7, 0x94, 0xd0, 0xd9, 0xf4, 0xde, 0xfe, 0xbb,
	0x2b, 0x19, 0x5d, 0x5e, 0xc9, 0xe8, 0xe3, 0x95, 0x8c, 0x9e, 0x5c, 0xcb, 0xa9, 0xcb, 0x6b, 0x39,
	0xf5, 0xe1, 0x5a, 0x4e, 0x1d, 0x6d, 0x36, 0x0c, 0xde, 0xb4, 0xeb, 0x25, 0x9d, 0xb4, 0xca, 0x71,
	0xff, 0x20, 0xce, 0x1a, 0x65, 0xde, 0xb1, 0x30, 0xab, 0x67, 0xdd, 0x77, 0xf7, 0x9d, 0x4f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x19, 0xd1, 0x51, 0xcb, 0x44, 0x0d, 0x00, 0x00,
}

func (m *AuthorizationTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReachabilityTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReachabilityTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReachabilityTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintTheorem(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssertTrue {
		i--
		if m.AssertTrue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReachabilityTheorems) > 0 {
		for iNdEx := len(m.ReachabilityTheorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReachabilityTheorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegationTheorems) > 0 {
		for iNdEx := len(m.DelegationTheorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTheorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AuthorizationTheorems) > 0 {
		for iNdEx := len(m.AuthorizationTheorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizationTheorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTheorem(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTheorem(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizationTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Theorem != nil {
		{
			size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Theorem != nil {
		{
			size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReachabilityTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReachabilityTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReachabilityTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Theorem != nil {
		{
			size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnnotatedAuthorizationTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedAuthorizationTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotatedAuthorizationTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnnotatedDelegationTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedDelegationTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotatedDelegationTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnnotatedReachabilityTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedReachabilityTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotatedReachabilityTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReachabilityTheoremsResult) > 0 {
		for iNdEx := len(m.ReachabilityTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReachabilityTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for iNdEx := len(m.DelegationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuthorizationTheoremsResult) > 0 {
		for iNdEx := len(m.AuthorizationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Theorem != nil {
		{
			size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnnotatedPolicyTheoremResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedPolicyTheoremResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotatedPolicyTheoremResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReachabilityTheoremsResult) > 0 {
		for iNdEx := len(m.ReachabilityTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReachabilityTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for iNdEx := len(m.DelegationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuthorizationTheoremsResult) > 0 {
		for iNdEx := len(m.AuthorizationTheoremsResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizationTheoremsResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTheorem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Theorem != nil {
		{
			size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTheorem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTheorem(dAtA []byte, offset int, v uint64) int {
	offset -= sovTheorem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizationTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *ReachabilityTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *DelegationTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.AssertTrue {
		n += 2
	}
	return n
}

func (m *PolicyTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthorizationTheorems) > 0 {
		for _, e := range m.AuthorizationTheorems {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.DelegationTheorems) > 0 {
		for _, e := range m.DelegationTheorems {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.ReachabilityTheorems) > 0 {
		for _, e := range m.ReachabilityTheorems {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTheorem(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *AuthorizationTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theorem != nil {
		l = m.Theorem.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *DelegationTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theorem != nil {
		l = m.Theorem.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *ReachabilityTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theorem != nil {
		l = m.Theorem.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *AnnotatedAuthorizationTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *AnnotatedDelegationTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *AnnotatedReachabilityTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	return n
}

func (m *PolicyTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theorem != nil {
		l = m.Theorem.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if len(m.AuthorizationTheoremsResult) > 0 {
		for _, e := range m.AuthorizationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for _, e := range m.DelegationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.ReachabilityTheoremsResult) > 0 {
		for _, e := range m.ReachabilityTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	return n
}

func (m *AnnotatedPolicyTheoremResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theorem != nil {
		l = m.Theorem.Size()
		n += 1 + l + sovTheorem(uint64(l))
	}
	if len(m.AuthorizationTheoremsResult) > 0 {
		for _, e := range m.AuthorizationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.DelegationTheoremsResult) > 0 {
		for _, e := range m.DelegationTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	if len(m.ReachabilityTheoremsResult) > 0 {
		for _, e := range m.ReachabilityTheoremsResult {
			l = e.Size()
			n += 1 + l + sovTheorem(uint64(l))
		}
	}
	return n
}

func sovTheorem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTheorem(x uint64) (n int) {
	return sovTheorem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizationTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReachabilityTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReachabilityTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReachabilityTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertTrue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssertTrue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationTheorems = append(m.AuthorizationTheorems, &AuthorizationTheorem{})
			if err := m.AuthorizationTheorems[len(m.AuthorizationTheorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTheorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTheorems = append(m.DelegationTheorems, &DelegationTheorem{})
			if err := m.DelegationTheorems[len(m.DelegationTheorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReachabilityTheorems = append(m.ReachabilityTheorems, &ReachabilityTheorem{})
			if err := m.ReachabilityTheorems[len(m.ReachabilityTheorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ResultStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizationTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theorem == nil {
				m.Theorem = &AuthorizationTheorem{}
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theorem == nil {
				m.Theorem = &DelegationTheorem{}
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReachabilityTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReachabilityTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReachabilityTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theorem == nil {
				m.Theorem = &ReachabilityTheorem{}
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedAuthorizationTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedAuthorizationTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedAuthorizationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AuthorizationTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &BufferInterval{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedDelegationTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedDelegationTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedDelegationTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DelegationTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &BufferInterval{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedReachabilityTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedReachabilityTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedReachabilityTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ReachabilityTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &BufferInterval{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theorem == nil {
				m.Theorem = &PolicyTheorem{}
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationTheoremsResult = append(m.AuthorizationTheoremsResult, &AuthorizationTheoremResult{})
			if err := m.AuthorizationTheoremsResult[len(m.AuthorizationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTheoremsResult = append(m.DelegationTheoremsResult, &DelegationTheoremResult{})
			if err := m.DelegationTheoremsResult[len(m.DelegationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReachabilityTheoremsResult = append(m.ReachabilityTheoremsResult, &ReachabilityTheoremResult{})
			if err := m.ReachabilityTheoremsResult[len(m.ReachabilityTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedPolicyTheoremResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedPolicyTheoremResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedPolicyTheoremResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theorem == nil {
				m.Theorem = &PolicyTheorem{}
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationTheoremsResult = append(m.AuthorizationTheoremsResult, &AnnotatedAuthorizationTheoremResult{})
			if err := m.AuthorizationTheoremsResult[len(m.AuthorizationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTheoremsResult = append(m.DelegationTheoremsResult, &AnnotatedDelegationTheoremResult{})
			if err := m.DelegationTheoremsResult[len(m.DelegationTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachabilityTheoremsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTheorem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTheorem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReachabilityTheoremsResult = append(m.ReachabilityTheoremsResult, &AnnotatedReachabilityTheoremResult{})
			if err := m.ReachabilityTheoremsResult[len(m.ReachabilityTheoremsResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTheorem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTheorem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTheorem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTheorem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTheorem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTheorem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTheorem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTheorem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTheorem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTheorem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTheorem = fmt.Errorf("proto: unexpected end of group")
)
