// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/simulation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	errors "github.com/sourcenetwork/acp_core/pkg/errors"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SimulationCtx encapsulated all context data
// to execute an isolated theorem execution simulation
type SimulationCtx struct {
	Policy        *Policy         `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Relationships []*Relationship `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
	PolicyTheorem *PolicyTheorem  `protobuf:"bytes,3,opt,name=policy_theorem,json=policyTheorem,proto3" json:"policy_theorem,omitempty"`
}

func (m *SimulationCtx) Reset()         { *m = SimulationCtx{} }
func (m *SimulationCtx) String() string { return proto.CompactTextString(m) }
func (*SimulationCtx) ProtoMessage()    {}
func (*SimulationCtx) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9156bb8b1fe973, []int{0}
}
func (m *SimulationCtx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationCtx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationCtx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationCtx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationCtx.Merge(m, src)
}
func (m *SimulationCtx) XXX_Size() int {
	return m.Size()
}
func (m *SimulationCtx) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationCtx.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationCtx proto.InternalMessageInfo

func (m *SimulationCtx) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *SimulationCtx) GetRelationships() []*Relationship {
	if m != nil {
		return m.Relationships
	}
	return nil
}

func (m *SimulationCtx) GetPolicyTheorem() *PolicyTheorem {
	if m != nil {
		return m.PolicyTheorem
	}
	return nil
}

type SimulationResult struct {
	Ctx    *SimulationCtx       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Result *PolicyTheoremResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SimulationResult) Reset()         { *m = SimulationResult{} }
func (m *SimulationResult) String() string { return proto.CompactTextString(m) }
func (*SimulationResult) ProtoMessage()    {}
func (*SimulationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9156bb8b1fe973, []int{1}
}
func (m *SimulationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationResult.Merge(m, src)
}
func (m *SimulationResult) XXX_Size() int {
	return m.Size()
}
func (m *SimulationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationResult.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationResult proto.InternalMessageInfo

func (m *SimulationResult) GetCtx() *SimulationCtx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *SimulationResult) GetResult() *PolicyTheoremResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// SimulationCtxDeclaration declares a SimulationCtx
// through text elements using the Theorem's DSL
type SimulationCtxDeclaration struct {
	Policy          string               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	MarshalType     PolicyMarshalingType `protobuf:"varint,2,opt,name=marshal_type,json=marshalType,proto3,enum=sourcenetwork.acp_core.PolicyMarshalingType" json:"marshal_type,omitempty"`
	RelationshipSet string               `protobuf:"bytes,3,opt,name=relationship_set,json=relationshipSet,proto3" json:"relationship_set,omitempty"`
	PolicyTheorem   string               `protobuf:"bytes,4,opt,name=policy_theorem,json=policyTheorem,proto3" json:"policy_theorem,omitempty"`
}

func (m *SimulationCtxDeclaration) Reset()         { *m = SimulationCtxDeclaration{} }
func (m *SimulationCtxDeclaration) String() string { return proto.CompactTextString(m) }
func (*SimulationCtxDeclaration) ProtoMessage()    {}
func (*SimulationCtxDeclaration) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9156bb8b1fe973, []int{2}
}
func (m *SimulationCtxDeclaration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationCtxDeclaration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationCtxDeclaration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationCtxDeclaration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationCtxDeclaration.Merge(m, src)
}
func (m *SimulationCtxDeclaration) XXX_Size() int {
	return m.Size()
}
func (m *SimulationCtxDeclaration) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationCtxDeclaration.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationCtxDeclaration proto.InternalMessageInfo

func (m *SimulationCtxDeclaration) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *SimulationCtxDeclaration) GetMarshalType() PolicyMarshalingType {
	if m != nil {
		return m.MarshalType
	}
	return PolicyMarshalingType_UNKNOWN
}

func (m *SimulationCtxDeclaration) GetRelationshipSet() string {
	if m != nil {
		return m.RelationshipSet
	}
	return ""
}

func (m *SimulationCtxDeclaration) GetPolicyTheorem() string {
	if m != nil {
		return m.PolicyTheorem
	}
	return ""
}

type DeclarationErrors struct {
	// policy_errors contains all errors encountered while
	// processing the given policy
	PolicyErrors []*errors.ParserMessage `protobuf:"bytes,1,rep,name=policy_errors,json=policyErrors,proto3" json:"policy_errors,omitempty"`
	// policy_errors contains all errors encountered while
	// processing the relationship set
	RelationshipsErrors []*errors.ParserMessage `protobuf:"bytes,2,rep,name=relationships_errors,json=relationshipsErrors,proto3" json:"relationships_errors,omitempty"`
	// policy_errors contains all errors encountered while
	// parsing the theorems
	TheoremsErrrors []*errors.ParserMessage `protobuf:"bytes,3,rep,name=theorems_errrors,json=theoremsErrrors,proto3" json:"theorems_errrors,omitempty"`
}

func (m *DeclarationErrors) Reset()         { *m = DeclarationErrors{} }
func (m *DeclarationErrors) String() string { return proto.CompactTextString(m) }
func (*DeclarationErrors) ProtoMessage()    {}
func (*DeclarationErrors) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9156bb8b1fe973, []int{3}
}
func (m *DeclarationErrors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeclarationErrors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeclarationErrors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeclarationErrors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeclarationErrors.Merge(m, src)
}
func (m *DeclarationErrors) XXX_Size() int {
	return m.Size()
}
func (m *DeclarationErrors) XXX_DiscardUnknown() {
	xxx_messageInfo_DeclarationErrors.DiscardUnknown(m)
}

var xxx_messageInfo_DeclarationErrors proto.InternalMessageInfo

func (m *DeclarationErrors) GetPolicyErrors() []*errors.ParserMessage {
	if m != nil {
		return m.PolicyErrors
	}
	return nil
}

func (m *DeclarationErrors) GetRelationshipsErrors() []*errors.ParserMessage {
	if m != nil {
		return m.RelationshipsErrors
	}
	return nil
}

func (m *DeclarationErrors) GetTheoremsErrrors() []*errors.ParserMessage {
	if m != nil {
		return m.TheoremsErrrors
	}
	return nil
}

// AnnotatedSimulationResult contains the result
// of the executed simulation, the parsed objects and
// all errors found
type AnnotatedSimulationResult struct {
	Declaration         *SimulationCtxDeclaration     `protobuf:"bytes,1,opt,name=declaration,proto3" json:"declaration,omitempty"`
	Ctx                 *SimulationCtx                `protobuf:"bytes,2,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Errors              *DeclarationErrors            `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	PolicyTheoremResult *AnnotatedPolicyTheoremResult `protobuf:"bytes,4,opt,name=policy_theorem_result,json=policyTheoremResult,proto3" json:"policy_theorem_result,omitempty"`
}

func (m *AnnotatedSimulationResult) Reset()         { *m = AnnotatedSimulationResult{} }
func (m *AnnotatedSimulationResult) String() string { return proto.CompactTextString(m) }
func (*AnnotatedSimulationResult) ProtoMessage()    {}
func (*AnnotatedSimulationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9156bb8b1fe973, []int{4}
}
func (m *AnnotatedSimulationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnotatedSimulationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnotatedSimulationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnotatedSimulationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnotatedSimulationResult.Merge(m, src)
}
func (m *AnnotatedSimulationResult) XXX_Size() int {
	return m.Size()
}
func (m *AnnotatedSimulationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnotatedSimulationResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnnotatedSimulationResult proto.InternalMessageInfo

func (m *AnnotatedSimulationResult) GetDeclaration() *SimulationCtxDeclaration {
	if m != nil {
		return m.Declaration
	}
	return nil
}

func (m *AnnotatedSimulationResult) GetCtx() *SimulationCtx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *AnnotatedSimulationResult) GetErrors() *DeclarationErrors {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *AnnotatedSimulationResult) GetPolicyTheoremResult() *AnnotatedPolicyTheoremResult {
	if m != nil {
		return m.PolicyTheoremResult
	}
	return nil
}

func init() {
	proto.RegisterType((*SimulationCtx)(nil), "sourcenetwork.acp_core.SimulationCtx")
	proto.RegisterType((*SimulationResult)(nil), "sourcenetwork.acp_core.SimulationResult")
	proto.RegisterType((*SimulationCtxDeclaration)(nil), "sourcenetwork.acp_core.SimulationCtxDeclaration")
	proto.RegisterType((*DeclarationErrors)(nil), "sourcenetwork.acp_core.DeclarationErrors")
	proto.RegisterType((*AnnotatedSimulationResult)(nil), "sourcenetwork.acp_core.AnnotatedSimulationResult")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/simulation.proto", fileDescriptor_5a9156bb8b1fe973)
}

var fileDescriptor_5a9156bb8b1fe973 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x4e, 0xdb, 0x4c,
	0x14, 0x85, 0xb1, 0x83, 0x22, 0x31, 0x21, 0x90, 0xdf, 0xfc, 0x45, 0x6e, 0x16, 0x2e, 0x4a, 0x41,
	0x25, 0x02, 0xd9, 0x55, 0x5a, 0xb5, 0x6b, 0x4a, 0xb3, 0xa9, 0x8a, 0x4a, 0x07, 0xa4, 0x4a, 0xdd,
	0x58, 0xce, 0xe4, 0xd6, 0xb6, 0xb0, 0x33, 0xd6, 0xcc, 0x44, 0x25, 0x6f, 0xc1, 0x23, 0xf4, 0x71,
	0xba, 0x64, 0x83, 0xd4, 0x65, 0x9b, 0xbc, 0x48, 0x95, 0xf1, 0x38, 0xd8, 0x04, 0x27, 0x94, 0xe5,
	0x58, 0xe7, 0x7c, 0x33, 0xf7, 0xdc, 0x7b, 0x8d, 0x5e, 0x70, 0x3a, 0x64, 0x04, 0x06, 0x20, 0xbe,
	0x53, 0x76, 0xe1, 0x78, 0x24, 0x71, 0x09, 0x65, 0xe0, 0xf0, 0x30, 0x1e, 0x46, 0x9e, 0x08, 0xe9,
	0xc0, 0x4e, 0x18, 0x15, 0xd4, 0xd8, 0x2e, 0x08, 0xed, 0x4c, 0xd8, 0x7c, 0xe6, 0x53, 0xea, 0x47,
	0xe0, 0x48, 0x55, 0x6f, 0xf8, 0xcd, 0x11, 0x61, 0x0c, 0x5c, 0x78, 0x71, 0x92, 0x1a, 0x9b, 0x87,
	0x25, 0x37, 0x78, 0x84, 0x00, 0xe7, 0x6e, 0x1f, 0x48, 0xc8, 0x67, 0xd7, 0x34, 0x9f, 0x97, 0xa8,
	0x13, 0x1a, 0x85, 0x64, 0xa4, 0x44, 0xed, 0x85, 0x22, 0x97, 0x07, 0x94, 0x09, 0x25, 0xed, 0x94,
	0x48, 0x81, 0x31, 0xca, 0xb8, 0x93, 0x78, 0x8c, 0x03, 0x73, 0x63, 0xe0, 0xdc, 0xf3, 0x61, 0x09,
	0x9e, 0x41, 0x9a, 0x08, 0x0f, 0xc2, 0xac, 0xb8, 0xdd, 0x12, 0xa9, 0x08, 0x80, 0x32, 0x88, 0x97,
	0x3c, 0x22, 0x0f, 0x74, 0x39, 0x44, 0x40, 0x04, 0x65, 0x4b, 0x82, 0xe0, 0x23, 0x2e, 0x32, 0x70,
	0xeb, 0x8f, 0x86, 0xea, 0x67, 0xb3, 0x4e, 0x1d, 0x8b, 0x4b, 0xe3, 0x0d, 0xaa, 0xa6, 0x29, 0x98,
	0xda, 0x8e, 0xb6, 0x5f, 0xeb, 0x58, 0xf6, 0xfd, 0x7d, 0xb3, 0x4f, 0xa5, 0x0a, 0x2b, 0xb5, 0xf1,
	0x01, 0xd5, 0xf3, 0xaf, 0xe1, 0xa6, 0xbe, 0x53, 0xd9, 0xaf, 0x75, 0x76, 0xcb, 0xec, 0x38, 0x27,
	0xc6, 0x45, 0xab, 0xf1, 0x11, 0x6d, 0xa8, 0x4e, 0xa8, 0x18, 0xcc, 0x8a, 0x7c, 0xcb, 0xde, 0xe2,
	0xb7, 0x9c, 0xa7, 0x62, 0x5c, 0x4f, 0xf2, 0xc7, 0xd6, 0x95, 0x86, 0x1a, 0xb7, 0x35, 0x62, 0xe0,
	0xc3, 0x48, 0x18, 0x6f, 0x51, 0x85, 0x88, 0x4b, 0x55, 0x63, 0x29, 0xb7, 0x10, 0x0d, 0x9e, 0x3a,
	0x8c, 0x63, 0x54, 0x65, 0x12, 0x61, 0xea, 0xd2, 0x7b, 0xf0, 0xb0, 0x37, 0x49, 0x0b, 0x56, 0xd6,
	0xd6, 0x8d, 0x86, 0xcc, 0x02, 0xfb, 0x3d, 0x90, 0xc8, 0x63, 0xf2, 0x64, 0x6c, 0x17, 0x3a, 0xb0,
	0x36, 0x4b, 0xf8, 0x13, 0x5a, 0x8f, 0x3d, 0xc6, 0x03, 0x2f, 0x72, 0xc5, 0x28, 0x01, 0x79, 0xff,
	0x46, 0xe7, 0x70, 0xf1, 0xfd, 0x27, 0xa9, 0x23, 0x1c, 0xf8, 0xe7, 0xa3, 0x04, 0x70, 0x4d, 0x11,
	0xa6, 0x07, 0xa3, 0x8d, 0x1a, 0x77, 0x06, 0x48, 0xc8, 0xa0, 0xd7, 0xf0, 0x66, 0xfe, 0xfb, 0x19,
	0x08, 0x63, 0x6f, 0xae, 0x23, 0xab, 0x52, 0x78, 0x27, 0xea, 0x1f, 0x3a, 0xfa, 0x2f, 0x57, 0x4a,
	0x57, 0xee, 0x88, 0xf1, 0x19, 0x29, 0x99, 0x9b, 0x2e, 0x8d, 0xa9, 0xc9, 0xd1, 0x28, 0x7d, 0x79,
	0xaa, 0xb2, 0x4f, 0xe5, 0x6a, 0x9d, 0xa4, 0x9b, 0x85, 0xd7, 0x53, 0x84, 0x42, 0xba, 0xe8, 0xff,
	0xc2, 0xc8, 0x64, 0x64, 0xfd, 0x11, 0xe4, 0xad, 0x02, 0x49, 0x5d, 0xf0, 0x05, 0x35, 0x54, 0xa5,
	0x92, 0x2d, 0xe1, 0x95, 0x47, 0xc0, 0x37, 0x33, 0x4a, 0x37, 0x85, 0xb4, 0x6e, 0x74, 0xf4, 0xf4,
	0x68, 0x30, 0xa0, 0xc2, 0x13, 0xd0, 0x9f, 0x1b, 0x4b, 0x8c, 0x6a, 0xfd, 0xdb, 0xfc, 0xd4, 0x78,
	0xbe, 0x7c, 0xd0, 0x78, 0xe6, 0x72, 0xc7, 0x79, 0x48, 0x36, 0xea, 0xfa, 0x3f, 0x8f, 0xfa, 0x11,
	0xaa, 0x42, 0x56, 0xf9, 0xd4, 0xdb, 0x2e, 0xf3, 0xce, 0xb5, 0x1c, 0x2b, 0xa3, 0x11, 0xa0, 0x27,
	0xc5, 0xb9, 0x71, 0xd5, 0xf2, 0xac, 0x4a, 0xe2, 0xeb, 0x32, 0xe2, 0x2c, 0xa1, 0xfb, 0xb6, 0x68,
	0x2b, 0x99, 0xff, 0xf8, 0xae, 0xfb, 0x73, 0x6c, 0x69, 0xd7, 0x63, 0x4b, 0xfb, 0x3d, 0xb6, 0xb4,
	0xab, 0x89, 0xb5, 0x72, 0x3d, 0xb1, 0x56, 0x7e, 0x4d, 0xac, 0x95, 0xaf, 0x07, 0x7e, 0x28, 0x82,
	0x61, 0xcf, 0x26, 0x34, 0x76, 0xca, 0xfe, 0xfb, 0x17, 0xbe, 0x33, 0xdd, 0x29, 0xde, 0xab, 0xca,
	0xff, 0xe2, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x10, 0x15, 0x88, 0xd7, 0x06, 0x00,
	0x00,
}

func (m *SimulationCtx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationCtx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationCtx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyTheorem != nil {
		{
			size, err := m.PolicyTheorem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Relationships) > 0 {
		for iNdEx := len(m.Relationships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relationships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSimulation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ctx != nil {
		{
			size, err := m.Ctx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulationCtxDeclaration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationCtxDeclaration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationCtxDeclaration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyTheorem) > 0 {
		i -= len(m.PolicyTheorem)
		copy(dAtA[i:], m.PolicyTheorem)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.PolicyTheorem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RelationshipSet) > 0 {
		i -= len(m.RelationshipSet)
		copy(dAtA[i:], m.RelationshipSet)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.RelationshipSet)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarshalType != 0 {
		i = encodeVarintSimulation(dAtA, i, uint64(m.MarshalType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeclarationErrors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeclarationErrors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeclarationErrors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TheoremsErrrors) > 0 {
		for iNdEx := len(m.TheoremsErrrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TheoremsErrrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSimulation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RelationshipsErrors) > 0 {
		for iNdEx := len(m.RelationshipsErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelationshipsErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSimulation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PolicyErrors) > 0 {
		for iNdEx := len(m.PolicyErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicyErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSimulation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnnotatedSimulationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotatedSimulationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnotatedSimulationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyTheoremResult != nil {
		{
			size, err := m.PolicyTheoremResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Errors != nil {
		{
			size, err := m.Errors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ctx != nil {
		{
			size, err := m.Ctx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Declaration != nil {
		{
			size, err := m.Declaration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSimulation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSimulation(dAtA []byte, offset int, v uint64) int {
	offset -= sovSimulation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimulationCtx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	if len(m.Relationships) > 0 {
		for _, e := range m.Relationships {
			l = e.Size()
			n += 1 + l + sovSimulation(uint64(l))
		}
	}
	if m.PolicyTheorem != nil {
		l = m.PolicyTheorem.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	return n
}

func (m *SimulationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ctx != nil {
		l = m.Ctx.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	return n
}

func (m *SimulationCtxDeclaration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	if m.MarshalType != 0 {
		n += 1 + sovSimulation(uint64(m.MarshalType))
	}
	l = len(m.RelationshipSet)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	l = len(m.PolicyTheorem)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	return n
}

func (m *DeclarationErrors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PolicyErrors) > 0 {
		for _, e := range m.PolicyErrors {
			l = e.Size()
			n += 1 + l + sovSimulation(uint64(l))
		}
	}
	if len(m.RelationshipsErrors) > 0 {
		for _, e := range m.RelationshipsErrors {
			l = e.Size()
			n += 1 + l + sovSimulation(uint64(l))
		}
	}
	if len(m.TheoremsErrrors) > 0 {
		for _, e := range m.TheoremsErrrors {
			l = e.Size()
			n += 1 + l + sovSimulation(uint64(l))
		}
	}
	return n
}

func (m *AnnotatedSimulationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Declaration != nil {
		l = m.Declaration.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	if m.Ctx != nil {
		l = m.Ctx.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	if m.Errors != nil {
		l = m.Errors.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	if m.PolicyTheoremResult != nil {
		l = m.PolicyTheoremResult.Size()
		n += 1 + l + sovSimulation(uint64(l))
	}
	return n
}

func sovSimulation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSimulation(x uint64) (n int) {
	return sovSimulation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimulationCtx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationCtx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationCtx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relationships = append(m.Relationships, &Relationship{})
			if err := m.Relationships[len(m.Relationships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTheorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyTheorem == nil {
				m.PolicyTheorem = &PolicyTheorem{}
			}
			if err := m.PolicyTheorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ctx == nil {
				m.Ctx = &SimulationCtx{}
			}
			if err := m.Ctx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &PolicyTheoremResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationCtxDeclaration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationCtxDeclaration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationCtxDeclaration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshalType", wireType)
			}
			m.MarshalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarshalType |= PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTheorem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyTheorem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeclarationErrors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeclarationErrors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeclarationErrors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyErrors = append(m.PolicyErrors, &errors.ParserMessage{})
			if err := m.PolicyErrors[len(m.PolicyErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipsErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipsErrors = append(m.RelationshipsErrors, &errors.ParserMessage{})
			if err := m.RelationshipsErrors[len(m.RelationshipsErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremsErrrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheoremsErrrors = append(m.TheoremsErrrors, &errors.ParserMessage{})
			if err := m.TheoremsErrrors[len(m.TheoremsErrrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotatedSimulationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotatedSimulationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotatedSimulationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Declaration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Declaration == nil {
				m.Declaration = &SimulationCtxDeclaration{}
			}
			if err := m.Declaration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ctx == nil {
				m.Ctx = &SimulationCtx{}
			}
			if err := m.Ctx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errors == nil {
				m.Errors = &DeclarationErrors{}
			}
			if err := m.Errors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTheoremResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyTheoremResult == nil {
				m.PolicyTheoremResult = &AnnotatedPolicyTheoremResult{}
			}
			if err := m.PolicyTheoremResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimulation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSimulation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSimulation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSimulation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSimulation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimulation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSimulation = fmt.Errorf("proto: unexpected end of group")
)
