// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/principal.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PrincipalType enumerates possible types of users
type PrincipalKind int32

const (
	// Anonymous models an user which hasn't authenticated
	PrincipalKind_Anonymous PrincipalKind = 0
	// Root models the super user / admin
	PrincipalKind_Root PrincipalKind = 1
	// DID models a principal identified through a DID
	PrincipalKind_DID PrincipalKind = 2
)

var PrincipalKind_name = map[int32]string{
	0: "Anonymous",
	1: "Root",
	2: "DID",
}

var PrincipalKind_value = map[string]int32{
	"Anonymous": 0,
	"Root":      1,
	"DID":       2,
}

func (x PrincipalKind) String() string {
	return proto.EnumName(PrincipalKind_name, int32(x))
}

func (PrincipalKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53d7ad510952fb67, []int{0}
}

// Principal models an user which was authenticated with acp_core
type Principal struct {
	Kind       PrincipalKind `protobuf:"varint,1,opt,name=kind,proto3,enum=sourcenetwork.acp_core.PrincipalKind" json:"kind,omitempty"`
	Identifier string        `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *Principal) Reset()         { *m = Principal{} }
func (m *Principal) String() string { return proto.CompactTextString(m) }
func (*Principal) ProtoMessage()    {}
func (*Principal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53d7ad510952fb67, []int{0}
}
func (m *Principal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Principal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Principal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Principal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Principal.Merge(m, src)
}
func (m *Principal) XXX_Size() int {
	return m.Size()
}
func (m *Principal) XXX_DiscardUnknown() {
	xxx_messageInfo_Principal.DiscardUnknown(m)
}

var xxx_messageInfo_Principal proto.InternalMessageInfo

func (m *Principal) GetKind() PrincipalKind {
	if m != nil {
		return m.Kind
	}
	return PrincipalKind_Anonymous
}

func (m *Principal) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func init() {
	proto.RegisterEnum("sourcenetwork.acp_core.PrincipalKind", PrincipalKind_name, PrincipalKind_value)
	proto.RegisterType((*Principal)(nil), "sourcenetwork.acp_core.Principal")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/principal.proto", fileDescriptor_53d7ad510952fb67)
}

var fileDescriptor_53d7ad510952fb67 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x4c, 0x2e, 0x88, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x2f, 0x28, 0xca, 0xcc, 0x4b, 0xce, 0x2c, 0x48, 0xcc, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x43, 0x51, 0xa7, 0x07, 0x53, 0xa7, 0x94, 0xc6, 0xc5, 0x19, 0x00, 0x53,
	0x2a, 0x64, 0xc9, 0xc5, 0x92, 0x9d, 0x99, 0x97, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0xa4,
	0xaa, 0x87, 0x5d, 0x8f, 0x1e, 0x5c, 0x83, 0x77, 0x66, 0x5e, 0x4a, 0x10, 0x58, 0x8b, 0x90, 0x1c,
	0x17, 0x57, 0x66, 0x4a, 0x6a, 0x5e, 0x49, 0x66, 0x5a, 0x66, 0x6a, 0x91, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x92, 0x88, 0x96, 0x21, 0x17, 0x2f, 0x8a, 0x36, 0x21, 0x5e, 0x2e, 0x4e, 0xc7,
	0xbc, 0xfc, 0xbc, 0xca, 0xdc, 0xfc, 0xd2, 0x62, 0x01, 0x06, 0x21, 0x0e, 0x2e, 0x96, 0xa0, 0xfc,
	0xfc, 0x12, 0x01, 0x46, 0x21, 0x76, 0x2e, 0x66, 0x17, 0x4f, 0x17, 0x01, 0x26, 0x27, 0xd7, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4e, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xc7, 0xe5, 0xff, 0xec, 0x74, 0xfd, 0x92, 0xca, 0x82, 0xd4, 0xe2,
	0x24, 0x36, 0x70, 0x00, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x1a, 0xe5, 0x73, 0x2a,
	0x01, 0x00, 0x00,
}

func (m *Principal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Principal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Principal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintPrincipal(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintPrincipal(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrincipal(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrincipal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Principal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovPrincipal(uint64(m.Kind))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovPrincipal(uint64(l))
	}
	return n
}

func sovPrincipal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrincipal(x uint64) (n int) {
	return sovPrincipal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Principal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrincipal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Principal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Principal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrincipal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= PrincipalKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrincipal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrincipal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrincipal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrincipal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrincipal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrincipal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrincipal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrincipal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrincipal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrincipal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrincipal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrincipal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrincipal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrincipal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrincipal = fmt.Errorf("proto: unexpected end of group")
)
