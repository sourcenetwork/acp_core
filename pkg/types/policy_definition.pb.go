// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/policy_definition.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PolicyDefinition represents a Policy defined either as a raw
// Policy type or a shortened and marshaled version
type PolicyDefinition struct {
	// Types that are valid to be assigned to Definition:
	//	*PolicyDefinition_MarshaledPolicy
	//	*PolicyDefinition_Policy
	Definition isPolicyDefinition_Definition `protobuf_oneof:"definition"`
}

func (m *PolicyDefinition) Reset()         { *m = PolicyDefinition{} }
func (m *PolicyDefinition) String() string { return proto.CompactTextString(m) }
func (*PolicyDefinition) ProtoMessage()    {}
func (*PolicyDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd12205088f6fade, []int{0}
}
func (m *PolicyDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyDefinition.Merge(m, src)
}
func (m *PolicyDefinition) XXX_Size() int {
	return m.Size()
}
func (m *PolicyDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyDefinition proto.InternalMessageInfo

type isPolicyDefinition_Definition interface {
	isPolicyDefinition_Definition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyDefinition_MarshaledPolicy struct {
	MarshaledPolicy *MarshaledPolicy `protobuf:"bytes,1,opt,name=marshaled_policy,json=marshaledPolicy,proto3,oneof" json:"marshaled_policy,omitempty"`
}
type PolicyDefinition_Policy struct {
	Policy *Policy `protobuf:"bytes,2,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
}

func (*PolicyDefinition_MarshaledPolicy) isPolicyDefinition_Definition() {}
func (*PolicyDefinition_Policy) isPolicyDefinition_Definition()          {}

func (m *PolicyDefinition) GetDefinition() isPolicyDefinition_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *PolicyDefinition) GetMarshaledPolicy() *MarshaledPolicy {
	if x, ok := m.GetDefinition().(*PolicyDefinition_MarshaledPolicy); ok {
		return x.MarshaledPolicy
	}
	return nil
}

func (m *PolicyDefinition) GetPolicy() *Policy {
	if x, ok := m.GetDefinition().(*PolicyDefinition_Policy); ok {
		return x.Policy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyDefinition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyDefinition_MarshaledPolicy)(nil),
		(*PolicyDefinition_Policy)(nil),
	}
}

func init() {
	proto.RegisterType((*PolicyDefinition)(nil), "sourcenetwork.acp_core.PolicyDefinition")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/policy_definition.proto", fileDescriptor_dd12205088f6fade)
}

var fileDescriptor_dd12205088f6fade = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2b, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x4c, 0x2e, 0x88, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x2f, 0xc8, 0xcf, 0xc9, 0x4c, 0xae, 0x8c, 0x4f, 0x49, 0x4d, 0xcb, 0xcc, 0xcb,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x43, 0x51, 0xaf, 0x07,
	0x53, 0x2f, 0xa5, 0x8c, 0xd7, 0x1c, 0x88, 0x66, 0x29, 0x4d, 0xfc, 0x96, 0x15, 0x67, 0xe4, 0x17,
	0x95, 0x40, 0x94, 0x2a, 0x6d, 0x60, 0xe4, 0x12, 0x08, 0x00, 0x0b, 0xbb, 0xc0, 0x9d, 0x20, 0x14,
	0xc2, 0x25, 0x90, 0x9b, 0x58, 0x54, 0x9c, 0x91, 0x98, 0x93, 0x9a, 0x12, 0x0f, 0xd1, 0x24, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xae, 0x87, 0xdd, 0x5d, 0x7a, 0xbe, 0x30, 0xf5, 0x10, 0xc3,
	0x3c, 0x18, 0x82, 0xf8, 0x73, 0x51, 0x85, 0x84, 0x2c, 0xb8, 0xd8, 0xa0, 0x66, 0x31, 0x81, 0xcd,
	0x92, 0xc3, 0x65, 0x16, 0xdc, 0x08, 0xa8, 0x7a, 0x27, 0x1e, 0x2e, 0x2e, 0x44, 0x00, 0x39, 0xb9,
	0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x76, 0x7a, 0x66, 0x49, 0x46,
	0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xae, 0x20, 0xc8, 0x4e, 0xd7, 0x2f, 0xa9, 0x2c, 0x48,
	0x2d, 0x4e, 0x62, 0x03, 0x07, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x25, 0x66, 0xc6,
	0x9a, 0x01, 0x00, 0x00,
}

func (m *PolicyDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Definition != nil {
		{
			size := m.Definition.Size()
			i -= size
			if _, err := m.Definition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyDefinition_MarshaledPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyDefinition_MarshaledPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarshaledPolicy != nil {
		{
			size, err := m.MarshaledPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyDefinition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PolicyDefinition_Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyDefinition_Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyDefinition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintPolicyDefinition(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyDefinition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Definition != nil {
		n += m.Definition.Size()
	}
	return n
}

func (m *PolicyDefinition_MarshaledPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarshaledPolicy != nil {
		l = m.MarshaledPolicy.Size()
		n += 1 + l + sovPolicyDefinition(uint64(l))
	}
	return n
}
func (m *PolicyDefinition_Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovPolicyDefinition(uint64(l))
	}
	return n
}

func sovPolicyDefinition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyDefinition(x uint64) (n int) {
	return sovPolicyDefinition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyDefinition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshaledPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyDefinition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MarshaledPolicy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Definition = &PolicyDefinition_MarshaledPolicy{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyDefinition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Policy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Definition = &PolicyDefinition_Policy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyDefinition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyDefinition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyDefinition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyDefinition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyDefinition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyDefinition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyDefinition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyDefinition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyDefinition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyDefinition = fmt.Errorf("proto: unexpected end of group")
)
