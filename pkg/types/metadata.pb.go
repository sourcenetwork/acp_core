// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/acp_core/metadata.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RecorMetadata contains system defined data containing
// data set during a record's creation
type RecordMetadata struct {
	Creator    *Principal        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CreationTs *types.Timestamp  `protobuf:"bytes,2,opt,name=creation_ts,json=creationTs,proto3" json:"creation_ts,omitempty"`
	Supplied   *SuppliedMetadata `protobuf:"bytes,3,opt,name=supplied,proto3" json:"supplied,omitempty"`
}

func (m *RecordMetadata) Reset()         { *m = RecordMetadata{} }
func (m *RecordMetadata) String() string { return proto.CompactTextString(m) }
func (*RecordMetadata) ProtoMessage()    {}
func (*RecordMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f5abfc61b6277e, []int{0}
}
func (m *RecordMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMetadata.Merge(m, src)
}
func (m *RecordMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RecordMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMetadata proto.InternalMessageInfo

func (m *RecordMetadata) GetCreator() *Principal {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *RecordMetadata) GetCreationTs() *types.Timestamp {
	if m != nil {
		return m.CreationTs
	}
	return nil
}

func (m *RecordMetadata) GetSupplied() *SuppliedMetadata {
	if m != nil {
		return m.Supplied
	}
	return nil
}

// SuppliedMetadata models arbitrary satalite data supplied
// by callers which contain metadata about a record
type SuppliedMetadata struct {
	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blob       []byte            `protobuf:"bytes,2,opt,name=misc,proto3" json:"misc,omitempty"`
}

func (m *SuppliedMetadata) Reset()         { *m = SuppliedMetadata{} }
func (m *SuppliedMetadata) String() string { return proto.CompactTextString(m) }
func (*SuppliedMetadata) ProtoMessage()    {}
func (*SuppliedMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f5abfc61b6277e, []int{1}
}
func (m *SuppliedMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuppliedMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuppliedMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuppliedMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuppliedMetadata.Merge(m, src)
}
func (m *SuppliedMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SuppliedMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SuppliedMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SuppliedMetadata proto.InternalMessageInfo

func (m *SuppliedMetadata) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *SuppliedMetadata) GetMisc() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordMetadata)(nil), "sourcenetwork.acp_core.RecordMetadata")
	proto.RegisterType((*SuppliedMetadata)(nil), "sourcenetwork.acp_core.SuppliedMetadata")
	proto.RegisterMapType((map[string]string)(nil), "sourcenetwork.acp_core.SuppliedMetadata.AttributesEntry")
}

func init() {
	proto.RegisterFile("sourcenetwork/acp_core/metadata.proto", fileDescriptor_d4f5abfc61b6277e)
}

var fileDescriptor_d4f5abfc61b6277e = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0x2b, 0x31,
	0x18, 0xc5, 0x9b, 0xf6, 0xfe, 0x6b, 0x7a, 0xd1, 0x12, 0x44, 0x86, 0x59, 0x8c, 0xb5, 0xa0, 0x14,
	0x84, 0x0c, 0xd4, 0x4d, 0xb1, 0xb8, 0x50, 0xec, 0x52, 0x90, 0xd8, 0x85, 0xb8, 0x29, 0x99, 0x34,
	0x8e, 0xa1, 0x33, 0x93, 0x90, 0x64, 0x94, 0xbe, 0x85, 0x6f, 0xe4, 0xd6, 0x65, 0x97, 0x2e, 0xa5,
	0x7d, 0x11, 0x31, 0xd3, 0x29, 0x5a, 0x2c, 0xb8, 0x3b, 0x21, 0xe7, 0x77, 0xbe, 0x93, 0x2f, 0xf0,
	0xc0, 0xc8, 0x5c, 0x33, 0x9e, 0x71, 0xfb, 0x28, 0xf5, 0x24, 0xa4, 0x4c, 0x8d, 0x98, 0xd4, 0x3c,
	0x4c, 0xb9, 0xa5, 0x63, 0x6a, 0x29, 0x56, 0x5a, 0x5a, 0x89, 0x76, 0xbf, 0xd8, 0x70, 0x69, 0xf3,
	0xf7, 0x62, 0x29, 0xe3, 0x84, 0x87, 0xce, 0x15, 0xe5, 0x77, 0xa1, 0x15, 0x29, 0x37, 0x96, 0xa6,
	0xaa, 0x00, 0xfd, 0xc3, 0x0d, 0xf9, 0x4a, 0x8b, 0x8c, 0x09, 0x45, 0x93, 0xc2, 0xd7, 0x9e, 0x01,
	0xb8, 0x45, 0x38, 0x93, 0x7a, 0x7c, 0xb9, 0x9c, 0x8c, 0xfa, 0xf0, 0x2f, 0xd3, 0x9c, 0x5a, 0xa9,
	0x3d, 0xd0, 0x02, 0x9d, 0x46, 0x77, 0x1f, 0x7f, 0xdf, 0x02, 0x5f, 0x95, 0x61, 0xa4, 0x24, 0x50,
	0x1f, 0x36, 0x9c, 0x14, 0x32, 0x1b, 0x59, 0xe3, 0x55, 0x5d, 0x80, 0x8f, 0x8b, 0xba, 0xb8, 0xac,
	0x8b, 0x87, 0x65, 0x5d, 0x02, 0x4b, 0xfb, 0xd0, 0xa0, 0x0b, 0xf8, 0xcf, 0xe4, 0x4a, 0x25, 0x82,
	0x8f, 0xbd, 0x9a, 0x23, 0x3b, 0x9b, 0x46, 0x5f, 0x2f, 0x7d, 0x65, 0x6b, 0xb2, 0x22, 0xdb, 0xcf,
	0x00, 0x36, 0xd7, 0xaf, 0xd1, 0x0d, 0x84, 0xd4, 0x5a, 0x2d, 0xa2, 0xdc, 0x72, 0xe3, 0x81, 0x56,
	0xad, 0xd3, 0xe8, 0xf6, 0x7e, 0x1a, 0x8e, 0xcf, 0x56, 0xe8, 0x20, 0xb3, 0x7a, 0x4a, 0x3e, 0x65,
	0x21, 0x04, 0x7f, 0xa5, 0xc2, 0x30, 0xf7, 0xd4, 0xff, 0xc4, 0x69, 0xff, 0x14, 0x6e, 0xaf, 0x21,
	0xa8, 0x09, 0x6b, 0x13, 0x3e, 0x75, 0x1b, 0xad, 0x93, 0x0f, 0x89, 0x76, 0xe0, 0xef, 0x07, 0x9a,
	0xe4, 0xdc, 0x91, 0x75, 0x52, 0x1c, 0x4e, 0xaa, 0x3d, 0x70, 0x3e, 0x78, 0x99, 0x07, 0x60, 0x36,
	0x0f, 0xc0, 0xdb, 0x3c, 0x00, 0x4f, 0x8b, 0xa0, 0x32, 0x5b, 0x04, 0x95, 0xd7, 0x45, 0x50, 0xb9,
	0x3d, 0x8a, 0x85, 0xbd, 0xcf, 0x23, 0xcc, 0x64, 0x1a, 0x6e, 0xfa, 0xe1, 0x49, 0x1c, 0xda, 0xa9,
	0xe2, 0x26, 0xfa, 0xe3, 0xd6, 0x7d, 0xfc, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xa7, 0x8b, 0x84,
	0x6c, 0x02, 0x00, 0x00,
}

func (m *RecordMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Supplied != nil {
		{
			size, err := m.Supplied.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreationTs != nil {
		{
			size, err := m.CreationTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuppliedMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuppliedMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuppliedMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		i -= len(m.Blob)
		copy(dAtA[i:], m.Blob)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Blob)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMetadata(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMetadata(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecordMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CreationTs != nil {
		l = m.CreationTs.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Supplied != nil {
		l = m.Supplied.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *SuppliedMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMetadata(uint64(len(k))) + 1 + len(v) + sovMetadata(uint64(len(v)))
			n += mapEntrySize + 1 + sovMetadata(uint64(mapEntrySize))
		}
	}
	l = len(m.Blob)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Principal{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTs == nil {
				m.CreationTs = &types.Timestamp{}
			}
			if err := m.CreationTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supplied == nil {
				m.Supplied = &SuppliedMetadata{}
			}
			if err := m.Supplied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuppliedMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuppliedMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuppliedMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetadata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMetadata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMetadata
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMetadata
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misc", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
