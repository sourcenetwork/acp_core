syntax = "proto3";

package sourcenetwork.acp_core.playground;

import "sourcenetwork/acp_core/parser_message.proto";
import "sourcenetwork/acp_core/relationship.proto";
import "sourcenetwork/acp_core/policy.proto";
import "sourcenetwork/acp_core/theorem.proto";

option go_package = "github.com/sourcenetwork/acp_core/pkg/playground";

// SandboxRecord represents an instance of a sandbox
message SandboxRecord {
  // Handle is an opaque identifier to a sandbox
  uint64 handle = 1;

  // name is a user given designation to a sandbox
  string name = 2;

  string description = 3;

  SandboxData data = 4;

  // scratchpad acts as temporary storage for modifications in the sandbox state
  SandboxData scratchpad = 5;

  SandboxCtx ctx = 6;

  bool initialized = 7;
}

// SandboxData encapsulates all the data necessary to create a Sandbox
message SandboxData {
    string policy_definition = 1;
    string relationships = 2;
    string policy_theorem = 3;
}

// SandboxCtx encapsulated all context data
// to execute an isolated theorem execution simulation
message SandboxCtx {
  sourcenetwork.acp_core.Policy policy = 1;
  repeated sourcenetwork.acp_core.Relationship relationships = 2;
  sourcenetwork.acp_core.PolicyTheorem policy_theorem = 3;
}

message SandboxDataErrors {
    // policy_errors contains all errors encountered while
    // processing the given policy
    repeated sourcenetwork.acp_core.LocatedMessage policy_errors = 1;
    // policy_errors contains all errors encountered while
    // processing the relationship set
    repeated sourcenetwork.acp_core.LocatedMessage relationships_errors = 2;
    // policy_errors contains all errors encountered while
    // parsing the theorems
    repeated sourcenetwork.acp_core.LocatedMessage theorems_errrors = 3;
}