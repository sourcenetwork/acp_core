syntax = "proto3";

package sourcenetwork.acp_core;

import "google/protobuf/timestamp.proto";
import "sourcenetwork/acp_core/access_decision.proto";
import "sourcenetwork/acp_core/buffer_position.proto";
import "sourcenetwork/acp_core/policy.proto";
import "sourcenetwork/acp_core/policy_short.proto";
import "sourcenetwork/acp_core/relationship.proto";
import "sourcenetwork/acp_core/relationship_selector.proto";
import "sourcenetwork/acp_core/system.proto";

option go_package = "github.com/sourcenetwork/acp_core/pkg/types";

// AuthorizationTheorem states that the given AccessRequest request is valid (or not) in the context of a certain Policy
message AuthorizationTheorem {
  Operation operation = 1;
  Actor actor = 2;
  bool assert_true = 3;
}

message ReachabilityTheorem {
  Actor actor = 1;
  string operation = 2;
  Object object = 3;
  bool assert_true = 4;
}

// DelegationTheorem models a statement declaring that actor can create and delete relationships
// with `relation` for the given `object`
message DelegationTheorem {
  Actor actor = 1;
  Operation operation = 2;
  bool assert_true = 3;
}

// PolicyTheorem models a set of theorems about a Policy
message PolicyTheorem {
  repeated AuthorizationTheorem authorization_theorems = 1;
  repeated DelegationTheorem delegation_theorems = 2;
  repeated ReachabilityTheorem reachability_theorems = 3;
}

// ResultStatus models the possible results from executing a Theorem
enum ResultStatus {
  Reject = 0;
  Accept = 1;
  Error = 2;
}

// Result models the result of evaluating a theorem
message Result {
  // status indicates whether the theorem was accepted, rejected or an error happened
  ResultStatus status = 1;

  // Message explains the result
  string message = 2;
}

message AuthorizationTheoremResult {
  AuthorizationTheorem theorem = 1;
  Result result = 2;
}

message DelegationTheoremResult {
  DelegationTheorem theorem = 1;
  Result result = 2;
}

message ReachabilityTheoremResult {
  ReachabilityTheorem theorem = 1;
  Result result = 2;
}

message AnnotatedAuthorizationTheoremResult {
  AuthorizationTheoremResult result = 1;
  BufferRange range = 2;
}

message AnnotatedDelegationTheoremResult {
  DelegationTheoremResult result = 1;
  BufferRange range = 2;
}

message AnnotatedReachabilityTheoremResult {
  ReachabilityTheoremResult result = 1;
  BufferRange range = 2;
}

message PolicyTheoremResult {
  PolicyTheorem theorem = 1;
  repeated AuthorizationTheoremResult authorization_theorems_result = 2;
  repeated DelegationTheoremResult delegation_theorems_result = 3;
  repeated ReachabilityTheoremResult reachability_theorems_result = 4;
}

message AnnotatedPolicyTheoremResult {
  PolicyTheorem theorem = 1;
  repeated AnnotatedAuthorizationTheoremResult authorization_theorems_result = 2;
  repeated AnnotatedDelegationTheoremResult delegation_theorems_result = 3;
  repeated AnnotatedReachabilityTheoremResult reachability_theorems_result = 4;
}
