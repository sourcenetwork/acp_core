syntax = "proto3";

package sourcenetwork.acp_core;

import "sourcenetwork/acp_core/catalogue.proto";
import "sourcenetwork/acp_core/sandbox.proto";
import "sourcenetwork/acp_core/theorem.proto";

option go_package = "github.com/sourcenetwork/acp_core/pkg/types";

service PlaygroundService {
  // NewSandbox creates a new isolated execution environment in the Service
  // Returns a handle which references the sandbox
  rpc NewSandbox(NewSandboxRequest) returns (NewSandboxResponse);

  // ListSandboxes returns the list of sandboxes created in the Playgruond
  rpc ListSandboxes(ListSandboxesRequest) returns (ListSandboxesResponse);

  // SetState updates the state of a Sandbox environment with the newly provided data
  rpc SetState(SetStateRequest) returns (SetStateResponse);

  // RestoreScratchpad restores the data in scratchpad to match the currently loaded sandbox state
  rpc RestoreScratchpad(RestoreScratchpadRequest) returns (RestoreScratchpadResponse);

  // GetCatalogue returns the catalogue (index/LUT) of defined entities within a sandbox
  rpc GetCatalogue(GetCatalogueRequest) returns (GetCatalogueResponse);

  // GetSandbox returns the internal sandbox state of a sandbox
  rpc GetSandbox(GetSandboxRequest) returns (GetSandboxResponse);

  // VerifyTheorems executes the defined test suite for a sandbox
  rpc VerifyTheorems(VerifyTheoremsRequest) returns (VerifyTheoremsResponse);

  // Simulate receives Sandbox state data and a theorem, creates an ephemeral sandbox
  // evaluates the given theorem against the sandbox's policy and returns the result
  // Simulate is a oneshot operation and persists no state in the process.
  rpc Simulate(SimulateRequest) returns (SimulateReponse);

  // GetSampleSandboxes returns a set of preloaded SandboxData objects
  // which are used to demo different ACP Features
  rpc GetSampleSandboxes(GetSampleSandboxesRequest) returns (GetSampleSandboxesResponse);

  // Check runs a Check operation with the provided data for the context of a sandbox.
  // A Check call is used to verify whether some actor is authorized to act on a some object
  //rpc Check (CheckRequest) returns (CheckResponse);

  // ReverseLookup runs a reverse lookup operation in a sandbox.
  // Reverse lookup is used to collect all the permissions an actor can do within a policy
  //rpc ReverseLookup (ReverseLookupRequest) returns (ReverseLookupResponse);

  // AuthorizeCommand runs an authorize command operation in a sandbox.
  //
  // This operation is used to assert whether some actor is allowed to perform a command
  // in a policy. Commands refer to actions take can be done to the policy itself,
  // such as creating or deleting relationships.
  //rpc AuthorizeCommand (AuthorizeCommandRequest) returns (AuthorizeCommandResponse);

  // Expand runs an expand operation in a sandbox.
  //
  // Expand is used to walk through the Object graph, starting at an Object Relation node
  // and generate the tree of every actor which can perform the specified operation.
  //rpc Expand(ExpandRequest) returns (ExpandResponse);
}

message NewSandboxRequest {
  // user defined name for the sandbox
  string name = 1;

  // optional description for documentation
  string description = 2;
}

message NewSandboxResponse {
  // record modeling the created sandbox
  sourcenetwork.acp_core.SandboxRecord record = 1;
}

message SetStateRequest {
  // handle to an existing sandbox
  uint64 handle = 1;

  // data to set in the sandbox
  sourcenetwork.acp_core.SandboxData data = 2;
}

message SetStateResponse {
  // ok indicates the state updated sucessfuly
  bool ok = 1;
  // errors represent all recoverable errors found while parsing and setting the sandbox state
  sourcenetwork.acp_core.SandboxDataErrors errors = 2;
  // record contains a representation of the sandbox's new internal state
  sourcenetwork.acp_core.SandboxRecord record = 3;
}

message GetCatalogueRequest {
  // handle to an existing sandbox
  uint64 handle = 1;
}

message GetCatalogueResponse {
  // catalogue for the state of the given sandbox
  sourcenetwork.acp_core.PolicyCatalogue catalogue = 1;
}

message VerifyTheoremsRequest {
  // handle to an existing sandbox
  uint64 handle = 1;
}

message VerifyTheoremsResponse {
  // result of the provided sandbox theorem
  sourcenetwork.acp_core.AnnotatedPolicyTheoremResult result = 1;
}

message ListSandboxesRequest {}

message ListSandboxesResponse {
  // records contains all sandboxes that exist in a playground
  repeated sourcenetwork.acp_core.SandboxRecord records = 1;
}

message RestoreScratchpadRequest {
  // handle to an existing sandbox
  uint64 handle = 1;
}

message RestoreScratchpadResponse {
  // scratchpad contains the data in the restored scratchpad
  sourcenetwork.acp_core.SandboxData scratchpad = 1;
}

message SimulateRequest {
  // data to set in the sandbox
  sourcenetwork.acp_core.SandboxData data = 1;
}

message SimulateReponse {
  // validate_data flags whether the input SandboxData was sucessfuly loaded
  bool valid_data = 1;

  // errors represent all recoverable errors found while parsing and setting the sandbox state
  sourcenetwork.acp_core.SandboxDataErrors errors = 2;

  // record contains a representation of the sandbox's new internal state
  sourcenetwork.acp_core.SandboxRecord record = 3;

  // result of the provided sandbox theorem
  sourcenetwork.acp_core.AnnotatedPolicyTheoremResult result = 4;
}

message GetSandboxRequest {
  // handle to an existing sandbox
  uint64 handle = 1;
}

message GetSandboxResponse {
  // record contains a representation of the sandbox's new internal state
  sourcenetwork.acp_core.SandboxRecord record = 1;
}

message GetSampleSandboxesRequest{} 

message GetSampleSandboxesResponse{
  repeated SandboxTemplate samples = 1;
}