syntax = "proto3";

package sourcenetwork.acp_core;

import "google/protobuf/timestamp.proto";

import "sourcenetwork/acp_core/access_decision.proto";
import "sourcenetwork/acp_core/policy.proto";
import "sourcenetwork/acp_core/policy_short.proto";
import "sourcenetwork/acp_core/relationship.proto";
import "sourcenetwork/acp_core/relationship_selector.proto";
import "sourcenetwork/acp_core/system.proto";
import "sourcenetwork/acp_core/theorem.proto";
import "sourcenetwork/acp_core/simulation.proto";

option go_package = "github.com/sourcenetwork/acp_core/pkg/types";

service ACPEngine {
  // CreatePolicy adds a new Policy to SourceHub.
  // The Policy models an aplication's high level access control rules.
  rpc CreatePolicy (CreatePolicyRequest) returns (CreatePolicyResponse);

  // GetPolicy returns a Policy with the given ID
  rpc GetPolicy (GetPolicyRequest) returns (GetPolicyResponse);

  // ListPolicies returns a set of Policies registered in the system
  rpc ListPolicies (ListPoliciesRequest) returns (ListPoliciesResponse);

  // DeletePolicy removes a Policy and all relationships and objects registered within it.
  rpc DeletePolicy (DeletePolicyRequest) returns (DeletePolicyResponse);
  
  // SetRelationship creates or updates a Relationship within a Policy
  // A Relationship is a statement which ties together an object and a subject with a "relation",
  // which means the set of high level rules defined in the Policy will apply to these entities.
  rpc SetRelationship (SetRelationshipRequest) returns (SetRelationshipResponse);
  
  // DelereRelationship removes a Relationship from a Policy.
  // If the Relationship was not found in a Policy, this Cmd is a no-op.
  rpc DeleteRelationship (DeleteRelationshipRequest) returns (DeleteRelationshipResponse);

  // RegisterObject creates a special kind of Relationship within a Policy which ties
  // the msg's Actor as the owner of the msg's Object.
  // The Owner has complete control over the set of subjects that are related to their Object,
  // giving them autonomy to share the object and revoke acces to the object,
  // much like owners in a Discretionary Access Control model.
  //
  // Attempting to register a previously registered Object is an error,
  // Object IDs are therefore assumed to be unique within a Policy.
  rpc RegisterObject (RegisterObjectRequest) returns (RegisterObjectResponse);

  // UnregisterObject let's an Object's Owner effectively "unshare" their Object.
  // This method wipes all Relationships referencing the given Object.
  //
  // A caveat is that after removing the Relationships, a record of the original Object owner
  // is maintained to prevent an "ownership hijack" attack.
  //
  // Suppose Bob owns object Foo, which is shared with Bob but not Eve.
  // Eve wants to access Foo but was not given permission to, they could "hijack" Bob's object by waiting for Bob to Unregister Foo,
  // then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
  // If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
  // The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
  // is an "ownership hijack".
  rpc UnregisterObject (UnregisterObjectRequest) returns (UnregisterObjectResponse);

  // TransferObject updates an Object's Owner to some other actor in the system, after which the original owner 
  // loses autonomy over the object and cannot create or modify relationships.
  rpc TransferObject(TransferObjectRequest) returns (TransferObjectResponse);


  // GetObjectRegistration returns the registration status of an Object
  rpc GetObjectRegistration(GetObjectRegistrationRequest) returns (GetObjectRegistrationResponse) ;

  // FilterRelationships returns filtered set of Relationships in a Policy.
  rpc FilterRelationships(FilterRelationshipsRequest) returns (FilterRelationshipsResponse);

  rpc ValidatePolicy(ValidatePolicyRequest) returns (ValidatePolicyResponse);

  rpc SetParams(SetParamsRequest) returns (SetParamsResponse);

  rpc GetParams(GetParamsRequest) returns (GetParamsResponse);

  rpc VerifyAccessRequest(VerifyAccessRequestRequest) returns (VerifyAccessRequestResponse);

  // Simulate receives a triplet of Policy, Relationships and PolicyTheorem and executes
  // the theorems against the given context and verifies whether they're true or not.
  // The execution context is ephemeral and the policy is not persisted in memory.
  rpc Simulate(SimulateRequest) returns (SimulateResponse);

  // Expand, Reverse lookup

  /*
  not sure how to handle the capability system yet
  // CheckAccess executes an Access Request for an User and stores the result of the evaluation in SourceHub.
  // The resulting evaluation is used to generate a cryptographic proof that the given Access Request
  // was valid at a particular block height.
  rpc CheckAccess (CmdCheckAccess) returns (CmdCheckAccessResponse);
  */
}

message CreatePolicyRequest {
  string                    policy        = 1;
  PolicyMarshalingType      marshal_type  = 2;
  google.protobuf.Timestamp creation_time = 3;
  // metadata is a map of attributes which can be used to store
  // caller supplied satellite data 
  map<string, string> metadata = 4;
}

message CreatePolicyResponse {
  Policy policy = 1;
  map<string, string> metadata = 2;
}

message SetRelationshipRequest {
  string                    policy_id     = 1;
  google.protobuf.Timestamp creation_time = 2;
  Relationship              relationship  = 3;
  // metadata is a map of attributes which can be used to store
  // caller supplied satellite data 
  map<string, string> metadata = 4;
}

message SetRelationshipResponse {
  // Indicates whether the given Relationship previously existed, ie the Tx was a no op
  bool record_existed = 1;

  RelationshipRecord record = 2;
}

message DeleteRelationshipRequest {
  string       policy_id    = 1;
  Relationship relationship = 2;
}

message DeleteRelationshipResponse {
  bool record_found = 1;
}

message RegisterObjectRequest {
  string                    policy_id     = 1;
  Object                    object        = 2;
  google.protobuf.Timestamp creation_time = 3;
  // metadata is a map of attributes which can be used to store
  // caller supplied satellite data 
  map<string, string> metadata = 4;
}

message RegisterObjectResponse {
  RegistrationResult result = 1;
  RelationshipRecord record = 2;
}

message UnregisterObjectRequest {
  string policy_id = 1;
  Object object    = 2;
}

message UnregisterObjectResponse {
  bool found = 1;
  uint64 relationships_removed = 2;
}


message GetObjectRegistrationRequest {
  string policy_id = 1;
  Object object = 2;
}

message GetObjectRegistrationResponse  {
  bool is_registered = 1;
  string owner_id = 2;
}


message FilterRelationshipsRequest {
  string policy_id = 1;
  RelationshipSelector selector = 2;
}

message FilterRelationshipsResponse {
  repeated RelationshipRecord records = 1;
}

message GetPolicyRequest {
  // id of the Policy to be fetched
  string id = 1;
 }

message GetPolicyResponse { 
  Policy policy = 1;
}

message ListPoliciesRequest{}

message ListPoliciesResponse {
  repeated Policy policies = 1;
}

message DeletePolicyRequest{
  string id =1;
}
message DeletePolicyResponse{
  bool found =1;
}

message TransferObjectRequest{
  string                    policy_id     = 1;
  Object                    object        = 2;
  Actor new_owner = 3;
}

message TransferObjectResponse{

}


message ValidatePolicyRequest{
  string                    policy        = 1;
  PolicyMarshalingType      marshal_type  = 2;
}

message ValidatePolicyResponse{
  bool valid = 1;
  string error_msg = 2;
}

message SetParamsRequest{
  Params params = 1;
}

message SetParamsResponse{
}

message GetParamsRequest{

}

message GetParamsResponse{
  Params params = 1;
}

message VerifyAccessRequestRequest{
    string policy_id = 1;
    AccessRequest access_request = 2;
}

message VerifyAccessRequestResponse{
    bool valid = 1;
}

message SimulateRequest {
  SimulationCtxDeclaration declaration = 1;
}

message SimulateResponse {
  AnnotatedSimulationResult result = 1;
}