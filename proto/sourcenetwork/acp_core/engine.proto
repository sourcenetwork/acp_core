syntax = "proto3";

package sourcenetwork.acp_core;

import "google/protobuf/timestamp.proto";
import "sourcenetwork/acp_core/access_decision.proto";
import "sourcenetwork/acp_core/catalogue.proto";
import "sourcenetwork/acp_core/metadata.proto";
import "sourcenetwork/acp_core/policy.proto";
import "sourcenetwork/acp_core/policy_record.proto";
import "sourcenetwork/acp_core/policy_short.proto";
import "sourcenetwork/acp_core/relationship.proto";
import "sourcenetwork/acp_core/relationship_selector.proto";
import "sourcenetwork/acp_core/system.proto";
import "sourcenetwork/acp_core/theorem.proto";

option go_package = "github.com/sourcenetwork/acp_core/pkg/types";

service ACPEngine {
  // CreatePolicy adds a new Policy to SourceHub.
  // The Policy models an aplication's high level access control rules.
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse);

  // GetPolicy returns a Policy with the given ID
  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse);

  // GetPolicyCatalogue builds and return a Policy's Catalogue
  rpc GetPolicyCatalogue(GetPolicyCatalogueRequest) returns (GetPolicyCatalogueResponse);

  // ListPolicies returns a set of Policies registered in the system
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse);

  // DeletePolicy removes a Policy and all relationships and objects registered within it.
  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse);

  // SetRelationship creates or updates a Relationship within a Policy
  // A Relationship is a statement which ties together an object and a subject with a "relation",
  // which means the set of high level rules defined in the Policy will apply to these entities.
  rpc SetRelationship(SetRelationshipRequest) returns (SetRelationshipResponse);

  // DelereRelationship removes a Relationship from a Policy.
  // If the Relationship was not found in a Policy, this Cmd is a no-op.
  rpc DeleteRelationship(DeleteRelationshipRequest) returns (DeleteRelationshipResponse);

  // RegisterObject creates a special kind of Relationship within a Policy which ties
  // the msg's Actor as the owner of the msg's Object.
  // The Owner has complete control over the set of subjects that are related to their Object,
  // giving them autonomy to share the object and revoke acces to the object,
  // much like owners in a Discretionary Access Control model.
  //
  // Attempting to register a previously registered Object - whether active or archived -
  // is an error, Object IDs are therefore assumed to be unique within a Policy.
  rpc RegisterObject(RegisterObjectRequest) returns (RegisterObjectResponse);

  // ArchiveObject sets an Object's state as "archived"
  //
  // Archiving an object removes all relationships and effectively disables it.
  // No relationships can be created for it and no checks can be executed against it.
  // Note that the original owner record is preserved for security reasons.
  //
  // Attempting to archive an already archived object is a noop.
  // Archiving an object that isn't registered is an error
  // Only the owner can archive an object
  //
  // Note: ownership records aren't removed since doing so could lead to an ownership hijack attack.
  // In order to pass ownership to another owner, use the TransferObject method.
  //
  // Hijack attacks look like the following:
  // Suppose Bob owns object Foo, which is shared with Bob but not Eve.
  // Eve wants to access Foo but was not given permission to it.
  // Eve could "hijack" Bob's object by waiting for Bob to delete its ownership record for Foo,
  // then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
  // If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
  // The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
  // is an "ownership hijack".
  rpc ArchiveObject(ArchiveObjectRequest) returns (ArchiveObjectResponse);

  // TransferObject updates an Object's Owner to some other actor in the system, after which the original owner
  // loses autonomy over the object and cannot create or modify relationships.
  //
  // Transfering object cannot be reversed, unless another Transfer is initiated by the new owner.
  //
  // Transfering an archived or unregistered object is an error.
  // Only the owner can transfer an object.
  rpc TransferObject(TransferObjectRequest) returns (TransferObjectResponse);

  // UnarchiveObject returns a previously archived object to active status,
  // such that the owner is able to create relationships and share that object again.
  //
  // Only the original owner of the object can unarchive it, returns an authorization error otherwise.
  // Attempting to unarchive an active or unregistered object is an error.
  rpc UnarchiveObject(UnarchiveObjectRequest) returns (UnarchiveObjectResponse);

  // AmendRegistration transfer an object's ownership between two users
  // This operation can only be executed by the root principal.
  //
  // Amending the registration of an archived or unregistered object is an error.
  rpc AmendRegistration(AmendRegistrationRequest) returns (AmendRegistrationResponse);

  // EvaluateTheorem executes the given theorem against a stored policy.
  //
  // Returns an error if the policy does not exist.
  rpc EvaluateTheorem(EvaluateTheoremRequest) returns (EvaluateTheoremResponse);

  // GetObjectRegistration returns the registration status of an Object
  rpc GetObjectRegistration(GetObjectRegistrationRequest) returns (GetObjectRegistrationResponse);

  // FilterRelationships returns filtered set of Relationships in a Policy.
  rpc FilterRelationships(FilterRelationshipsRequest) returns (FilterRelationshipsResponse);

  // ValidatePolicy verifies whether a policy payload is valid and would be accepted
  // by the engine, without creating it.
  //
  // Returns ok or validation errors found within the policy construction
  rpc ValidatePolicy(ValidatePolicyRequest) returns (ValidatePolicyResponse);

  // SetParams tunes the parameters of the ACP Engine.
  // This operation can only be done by the root principal
  rpc SetParams(SetParamsRequest) returns (SetParamsResponse);

  // GetParams returns the current params set in the ACP Engine.
  rpc GetParams(GetParamsRequest) returns (GetParamsResponse);

  // VerifyAccessRequest evaluates an AccessRequest
  // Returns true if the authenticated actor is allowed to perform the operations they are requesting.
  // FIXME: there is no need to bind the authenticated principal to the AccessRequest,
  // the verification is often done by someone else
  rpc VerifyAccessRequest(VerifyAccessRequestRequest) returns (VerifyAccessRequestResponse);

  // TODO: Expand and Reverse lookup
}

message CreatePolicyRequest {
  string policy = 1;
  sourcenetwork.acp_core.PolicyMarshalingType marshal_type = 2;
  SuppliedMetadata metadata = 3;
}

message CreatePolicyResponse {
  PolicyRecord record = 1;
}

message SetRelationshipRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Relationship relationship = 2;
  SuppliedMetadata metadata = 3;
}

message SetRelationshipResponse {
  // Indicates whether the given Relationship previously existed, ie the Tx was a no op
  bool record_existed = 1;

  sourcenetwork.acp_core.RelationshipRecord record = 2;
}

message DeleteRelationshipRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Relationship relationship = 2;
}

message DeleteRelationshipResponse {
  bool record_found = 1;
}

message RegisterObjectRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
  SuppliedMetadata metadata = 3;
}

message RegisterObjectResponse {
  sourcenetwork.acp_core.RelationshipRecord record = 1;
}

message ArchiveObjectRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
}

message ArchiveObjectResponse {
  uint64 relationships_removed = 1;
  bool record_modified = 2;
}

message GetObjectRegistrationRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
}

message GetObjectRegistrationResponse {
  bool is_registered = 1;
  string owner_id = 2;
  sourcenetwork.acp_core.RelationshipRecord record = 3;
}

message FilterRelationshipsRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.RelationshipSelector selector = 2;
}

message FilterRelationshipsResponse {
  repeated sourcenetwork.acp_core.RelationshipRecord records = 1;
}

message GetPolicyRequest {
  // id of the Policy to be fetched
  string id = 1;
}

message GetPolicyResponse {
  PolicyRecord record = 1;
}

message ListPoliciesRequest {}

message ListPoliciesResponse {
  repeated PolicyRecord records = 1;
}

message DeletePolicyRequest {
  string id = 1;
}
message DeletePolicyResponse {
  bool found = 1;
}

message TransferObjectRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
  sourcenetwork.acp_core.Actor new_owner = 3;
}

message TransferObjectResponse {
  sourcenetwork.acp_core.RelationshipRecord record = 1;
}

message ValidatePolicyRequest {
  string policy = 1;
  sourcenetwork.acp_core.PolicyMarshalingType marshal_type = 2;
}

message ValidatePolicyResponse {
  bool valid = 1;
  string error_msg = 2;
}

message SetParamsRequest {
  sourcenetwork.acp_core.Params params = 1;
}

message SetParamsResponse {}

message GetParamsRequest {}

message GetParamsResponse {
  sourcenetwork.acp_core.Params params = 1;
}

message VerifyAccessRequestRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.AccessRequest access_request = 2;
}

message VerifyAccessRequestResponse {
  bool valid = 1;
}

message GetPolicyCatalogueRequest {
  string policy_id = 1;
}

message GetPolicyCatalogueResponse {
  sourcenetwork.acp_core.PolicyCatalogue catalogue = 1;
}
message EvaluateTheoremRequest {
  // policy_id is the id of the policy against which the theorem is evaluated
  string policy_id = 1;

  // policy_theorem defines a PolicyTheorem using the DSL specified in the theorem grammar
  string policy_theorem = 2;
}

message EvaluateTheoremResponse {
  // result of theorem verification
  sourcenetwork.acp_core.AnnotatedPolicyTheoremResult result = 1;
}

message AmendRegistrationRequest {
  string policy_id = 1;
  Object object = 2;
  Actor new_owner = 3;
}

message AmendRegistrationResponse {
  RelationshipRecord record = 1;
}

message UnarchiveObjectRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
}

message UnarchiveObjectResponse {
  RelationshipRecord record = 1;
  bool record_modified = 2;
}
