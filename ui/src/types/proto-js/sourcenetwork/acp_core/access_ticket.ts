// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/access_ticket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccessDecision } from "./access_decision";

export const protobufPackage = "sourcenetwork.acp_core";

/**
 * Represents a Capability token containing an opaque proof and a set of Operations
 * the Actor is allowed to perform.
 * Tickets should be verified by a Reference Monitor before granting access to the requested operations.
 */
export interface AccessTicket {
  /** identified the ticket version */
  versionDenominator: string;
  decisionId: string;
  decision:
    | AccessDecision
    | undefined;
  /**
   * proof of existance that the given decision exists in the chain
   * validation strategy is dependent on ticket version
   */
  decisionProof: Uint8Array;
  /** signature of ticket which must match actor pkey in the access decision */
  signature: Uint8Array;
}

function createBaseAccessTicket(): AccessTicket {
  return {
    versionDenominator: "",
    decisionId: "",
    decision: undefined,
    decisionProof: new Uint8Array(0),
    signature: new Uint8Array(0),
  };
}

export const AccessTicket: MessageFns<AccessTicket> = {
  encode(message: AccessTicket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.versionDenominator !== "") {
      writer.uint32(10).string(message.versionDenominator);
    }
    if (message.decisionId !== "") {
      writer.uint32(18).string(message.decisionId);
    }
    if (message.decision !== undefined) {
      AccessDecision.encode(message.decision, writer.uint32(26).fork()).join();
    }
    if (message.decisionProof.length !== 0) {
      writer.uint32(34).bytes(message.decisionProof);
    }
    if (message.signature.length !== 0) {
      writer.uint32(42).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTicket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTicket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versionDenominator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.decisionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.decision = AccessDecision.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.decisionProof = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessTicket {
    return {
      versionDenominator: isSet(object.versionDenominator) ? globalThis.String(object.versionDenominator) : "",
      decisionId: isSet(object.decisionId) ? globalThis.String(object.decisionId) : "",
      decision: isSet(object.decision) ? AccessDecision.fromJSON(object.decision) : undefined,
      decisionProof: isSet(object.decisionProof) ? bytesFromBase64(object.decisionProof) : new Uint8Array(0),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
    };
  },

  toJSON(message: AccessTicket): unknown {
    const obj: any = {};
    if (message.versionDenominator !== "") {
      obj.versionDenominator = message.versionDenominator;
    }
    if (message.decisionId !== "") {
      obj.decisionId = message.decisionId;
    }
    if (message.decision !== undefined) {
      obj.decision = AccessDecision.toJSON(message.decision);
    }
    if (message.decisionProof.length !== 0) {
      obj.decisionProof = base64FromBytes(message.decisionProof);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessTicket>, I>>(base?: I): AccessTicket {
    return AccessTicket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessTicket>, I>>(object: I): AccessTicket {
    const message = createBaseAccessTicket();
    message.versionDenominator = object.versionDenominator ?? "";
    message.decisionId = object.decisionId ?? "";
    message.decision = (object.decision !== undefined && object.decision !== null)
      ? AccessDecision.fromPartial(object.decision)
      : undefined;
    message.decisionProof = object.decisionProof ?? new Uint8Array(0);
    message.signature = object.signature ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
