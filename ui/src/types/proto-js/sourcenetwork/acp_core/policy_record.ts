// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/policy_record.proto

/* eslint-disable */
import { type Policy } from "./policy";
import { type PolicyMarshalingType } from "./policy_short";

export const protobufPackage = "sourcenetwork.acp_core";

/** PolicyRecord represents a the Policy Document which will be persisted in the data layer */
export interface PolicyRecord {
  policy: Policy | undefined;
  managementGraph:
    | ManagementGraph
    | undefined;
  /**
   * metadata contains any application specific data
   * which was not supplied by the policy creator directly
   */
  metadata: { [key: string]: string };
  /**
   * policy_definition contains the policy payload as the client
   * originally submitted
   */
  policyDefinition: string;
  marshalType: PolicyMarshalingType;
}

export interface PolicyRecord_MetadataEntry {
  key: string;
  value: string;
}

/**
 * ManagementGraph represents a Policy's Relation Management Graph.
 *
 * The ManagementGraph is a directed graph which expresses the notion of Relation Management Authority.
 * Relation Management Authority is the idea that a certain set of relationships with relation R will be managed by an actor with relation RM.
 * Thus we can say RM manages R, meaning that if an actor A has a relationship 'actor {A} is a {RM} for {O}' where O is an object,
 * then Actor A can create relationships 'actor {S} is a {R} for {O}' for any actor S.
 *
 * Nodes in the Graph are Relations in a Policy.
 * Edges point from one Relation to another.
 *
 * NOTE: This proto definition should be treated as an *abstract data type*,
 * meaning that the fields should not be manually editted.
 */
export interface ManagementGraph {
  /** map of node id to node definition */
  nodes: { [key: string]: ManagerNode };
  /** stores all edges leaving a node */
  forwardEdges: { [key: string]: ManagerEdges };
  /** stores all edges pointing to a node */
  backwardEdges: { [key: string]: ManagerEdges };
}

export interface ManagementGraph_NodesEntry {
  key: string;
  value: ManagerNode | undefined;
}

export interface ManagementGraph_ForwardEdgesEntry {
  key: string;
  value: ManagerEdges | undefined;
}

export interface ManagementGraph_BackwardEdgesEntry {
  key: string;
  value: ManagerEdges | undefined;
}

export interface ManagerNode {
  id: string;
  text: string;
}

export interface ManagerEdges {
  edges: { [key: string]: boolean };
}

export interface ManagerEdges_EdgesEntry {
  key: string;
  value: boolean;
}
