// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sourcenetwork.acp_core";

export interface EventPolicyCreated {
  policyId: string;
  policyName: string;
}

export interface EventAccessDecisionCreated {
  creator: string;
  policyId: string;
  decisionId: string;
  actor: string;
  actorDid: string;
}

export interface EventObjectRegistered {
  actor: string;
  policyId: string;
  objectResource: string;
  objectId: string;
}

export interface EventObjectArchived {
  actor: string;
  policyId: string;
  objectResource: string;
  objectId: string;
}

export interface EventObjectUnarchived {
  actor: string;
  policyId: string;
  objectResource: string;
  objectId: string;
}

export interface EventObjectTransfered {
  newOwner: string;
  policyId: string;
  objectResource: string;
  objectId: string;
}

export interface EventObjectRegistrationAmended {
  oldOwner: string;
  newOwner: string;
  policyId: string;
  objectResource: string;
  objectId: string;
}

function createBaseEventPolicyCreated(): EventPolicyCreated {
  return { policyId: "", policyName: "" };
}

export const EventPolicyCreated: MessageFns<EventPolicyCreated> = {
  encode(message: EventPolicyCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.policyName !== "") {
      writer.uint32(26).string(message.policyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPolicyCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPolicyCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPolicyCreated {
    return {
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      policyName: isSet(object.policyName) ? globalThis.String(object.policyName) : "",
    };
  },

  toJSON(message: EventPolicyCreated): unknown {
    const obj: any = {};
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.policyName !== "") {
      obj.policyName = message.policyName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPolicyCreated>, I>>(base?: I): EventPolicyCreated {
    return EventPolicyCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPolicyCreated>, I>>(object: I): EventPolicyCreated {
    const message = createBaseEventPolicyCreated();
    message.policyId = object.policyId ?? "";
    message.policyName = object.policyName ?? "";
    return message;
  },
};

function createBaseEventAccessDecisionCreated(): EventAccessDecisionCreated {
  return { creator: "", policyId: "", decisionId: "", actor: "", actorDid: "" };
}

export const EventAccessDecisionCreated: MessageFns<EventAccessDecisionCreated> = {
  encode(message: EventAccessDecisionCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.decisionId !== "") {
      writer.uint32(26).string(message.decisionId);
    }
    if (message.actor !== "") {
      writer.uint32(34).string(message.actor);
    }
    if (message.actorDid !== "") {
      writer.uint32(42).string(message.actorDid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAccessDecisionCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAccessDecisionCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.decisionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actorDid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAccessDecisionCreated {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      decisionId: isSet(object.decisionId) ? globalThis.String(object.decisionId) : "",
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      actorDid: isSet(object.actorDid) ? globalThis.String(object.actorDid) : "",
    };
  },

  toJSON(message: EventAccessDecisionCreated): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.decisionId !== "") {
      obj.decisionId = message.decisionId;
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.actorDid !== "") {
      obj.actorDid = message.actorDid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAccessDecisionCreated>, I>>(base?: I): EventAccessDecisionCreated {
    return EventAccessDecisionCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAccessDecisionCreated>, I>>(object: I): EventAccessDecisionCreated {
    const message = createBaseEventAccessDecisionCreated();
    message.creator = object.creator ?? "";
    message.policyId = object.policyId ?? "";
    message.decisionId = object.decisionId ?? "";
    message.actor = object.actor ?? "";
    message.actorDid = object.actorDid ?? "";
    return message;
  },
};

function createBaseEventObjectRegistered(): EventObjectRegistered {
  return { actor: "", policyId: "", objectResource: "", objectId: "" };
}

export const EventObjectRegistered: MessageFns<EventObjectRegistered> = {
  encode(message: EventObjectRegistered, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== "") {
      writer.uint32(10).string(message.actor);
    }
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.objectResource !== "") {
      writer.uint32(26).string(message.objectResource);
    }
    if (message.objectId !== "") {
      writer.uint32(34).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventObjectRegistered {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventObjectRegistered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectResource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventObjectRegistered {
    return {
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      objectResource: isSet(object.objectResource) ? globalThis.String(object.objectResource) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: EventObjectRegistered): unknown {
    const obj: any = {};
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.objectResource !== "") {
      obj.objectResource = message.objectResource;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventObjectRegistered>, I>>(base?: I): EventObjectRegistered {
    return EventObjectRegistered.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventObjectRegistered>, I>>(object: I): EventObjectRegistered {
    const message = createBaseEventObjectRegistered();
    message.actor = object.actor ?? "";
    message.policyId = object.policyId ?? "";
    message.objectResource = object.objectResource ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseEventObjectArchived(): EventObjectArchived {
  return { actor: "", policyId: "", objectResource: "", objectId: "" };
}

export const EventObjectArchived: MessageFns<EventObjectArchived> = {
  encode(message: EventObjectArchived, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== "") {
      writer.uint32(10).string(message.actor);
    }
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.objectResource !== "") {
      writer.uint32(26).string(message.objectResource);
    }
    if (message.objectId !== "") {
      writer.uint32(34).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventObjectArchived {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventObjectArchived();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectResource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventObjectArchived {
    return {
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      objectResource: isSet(object.objectResource) ? globalThis.String(object.objectResource) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: EventObjectArchived): unknown {
    const obj: any = {};
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.objectResource !== "") {
      obj.objectResource = message.objectResource;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventObjectArchived>, I>>(base?: I): EventObjectArchived {
    return EventObjectArchived.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventObjectArchived>, I>>(object: I): EventObjectArchived {
    const message = createBaseEventObjectArchived();
    message.actor = object.actor ?? "";
    message.policyId = object.policyId ?? "";
    message.objectResource = object.objectResource ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseEventObjectUnarchived(): EventObjectUnarchived {
  return { actor: "", policyId: "", objectResource: "", objectId: "" };
}

export const EventObjectUnarchived: MessageFns<EventObjectUnarchived> = {
  encode(message: EventObjectUnarchived, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== "") {
      writer.uint32(10).string(message.actor);
    }
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.objectResource !== "") {
      writer.uint32(26).string(message.objectResource);
    }
    if (message.objectId !== "") {
      writer.uint32(34).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventObjectUnarchived {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventObjectUnarchived();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectResource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventObjectUnarchived {
    return {
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      objectResource: isSet(object.objectResource) ? globalThis.String(object.objectResource) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: EventObjectUnarchived): unknown {
    const obj: any = {};
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.objectResource !== "") {
      obj.objectResource = message.objectResource;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventObjectUnarchived>, I>>(base?: I): EventObjectUnarchived {
    return EventObjectUnarchived.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventObjectUnarchived>, I>>(object: I): EventObjectUnarchived {
    const message = createBaseEventObjectUnarchived();
    message.actor = object.actor ?? "";
    message.policyId = object.policyId ?? "";
    message.objectResource = object.objectResource ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseEventObjectTransfered(): EventObjectTransfered {
  return { newOwner: "", policyId: "", objectResource: "", objectId: "" };
}

export const EventObjectTransfered: MessageFns<EventObjectTransfered> = {
  encode(message: EventObjectTransfered, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newOwner !== "") {
      writer.uint32(10).string(message.newOwner);
    }
    if (message.policyId !== "") {
      writer.uint32(18).string(message.policyId);
    }
    if (message.objectResource !== "") {
      writer.uint32(26).string(message.objectResource);
    }
    if (message.objectId !== "") {
      writer.uint32(34).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventObjectTransfered {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventObjectTransfered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newOwner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectResource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventObjectTransfered {
    return {
      newOwner: isSet(object.newOwner) ? globalThis.String(object.newOwner) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      objectResource: isSet(object.objectResource) ? globalThis.String(object.objectResource) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: EventObjectTransfered): unknown {
    const obj: any = {};
    if (message.newOwner !== "") {
      obj.newOwner = message.newOwner;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.objectResource !== "") {
      obj.objectResource = message.objectResource;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventObjectTransfered>, I>>(base?: I): EventObjectTransfered {
    return EventObjectTransfered.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventObjectTransfered>, I>>(object: I): EventObjectTransfered {
    const message = createBaseEventObjectTransfered();
    message.newOwner = object.newOwner ?? "";
    message.policyId = object.policyId ?? "";
    message.objectResource = object.objectResource ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseEventObjectRegistrationAmended(): EventObjectRegistrationAmended {
  return { oldOwner: "", newOwner: "", policyId: "", objectResource: "", objectId: "" };
}

export const EventObjectRegistrationAmended: MessageFns<EventObjectRegistrationAmended> = {
  encode(message: EventObjectRegistrationAmended, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldOwner !== "") {
      writer.uint32(10).string(message.oldOwner);
    }
    if (message.newOwner !== "") {
      writer.uint32(18).string(message.newOwner);
    }
    if (message.policyId !== "") {
      writer.uint32(26).string(message.policyId);
    }
    if (message.objectResource !== "") {
      writer.uint32(34).string(message.objectResource);
    }
    if (message.objectId !== "") {
      writer.uint32(42).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventObjectRegistrationAmended {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventObjectRegistrationAmended();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.oldOwner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newOwner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectResource = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventObjectRegistrationAmended {
    return {
      oldOwner: isSet(object.oldOwner) ? globalThis.String(object.oldOwner) : "",
      newOwner: isSet(object.newOwner) ? globalThis.String(object.newOwner) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      objectResource: isSet(object.objectResource) ? globalThis.String(object.objectResource) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: EventObjectRegistrationAmended): unknown {
    const obj: any = {};
    if (message.oldOwner !== "") {
      obj.oldOwner = message.oldOwner;
    }
    if (message.newOwner !== "") {
      obj.newOwner = message.newOwner;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.objectResource !== "") {
      obj.objectResource = message.objectResource;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventObjectRegistrationAmended>, I>>(base?: I): EventObjectRegistrationAmended {
    return EventObjectRegistrationAmended.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventObjectRegistrationAmended>, I>>(
    object: I,
  ): EventObjectRegistrationAmended {
    const message = createBaseEventObjectRegistrationAmended();
    message.oldOwner = object.oldOwner ?? "";
    message.newOwner = object.newOwner ?? "";
    message.policyId = object.policyId ?? "";
    message.objectResource = object.objectResource ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
