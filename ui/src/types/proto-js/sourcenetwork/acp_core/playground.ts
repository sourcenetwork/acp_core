// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/playground.proto

/* eslint-disable */
import { type PolicyCatalogue } from "./catalogue";
import { type SandboxData, type SandboxDataErrors, type SandboxRecord } from "./sandbox";
import { type AnnotatedPolicyTheoremResult } from "./theorem";

export const protobufPackage = "sourcenetwork.acp_core";

export interface NewSandboxRequest {
  /** user defined name for the sandbox */
  name: string;
  /** optional description for documentation */
  description: string;
}

export interface NewSandboxResponse {
  /** record modeling the created sandbox */
  record: SandboxRecord | undefined;
}

export interface SetStateRequest {
  /** handle to an existing sandbox */
  handle: number;
  /** data to set in the sandbox */
  data: SandboxData | undefined;
}

export interface SetStateResponse {
  /** ok indicates the state updated sucessfuly */
  ok: boolean;
  /** errors represent all recoverable errors found while parsing and setting the sandbox state */
  errors:
    | SandboxDataErrors
    | undefined;
  /** record contains a representation of the sandbox's new internal state */
  record: SandboxRecord | undefined;
}

export interface GetCatalogueRequest {
  /** handle to an existing sandbox */
  handle: number;
}

export interface GetCatalogueResponse {
  /** catalogue for the state of the given sandbox */
  catalogue: PolicyCatalogue | undefined;
}

export interface VerifyTheoremsRequest {
  /** handle to an existing sandbox */
  handle: number;
}

export interface VerifyTheoremsResponse {
  /** result of the provided sandbox theorem */
  result: AnnotatedPolicyTheoremResult | undefined;
}

export interface ListSandboxesRequest {
}

export interface ListSandboxesResponse {
  /** records contains all sandboxes that exist in a playground */
  records: SandboxRecord[];
}

export interface RestoreScratchpadRequest {
  /** handle to an existing sandbox */
  handle: number;
}

export interface RestoreScratchpadResponse {
  /** scratchpad contains the data in the restored scratchpad */
  scratchpad: SandboxData | undefined;
}

export interface SimulateRequest {
  /** data to set in the sandbox */
  data: SandboxData | undefined;
}

export interface SimulateReponse {
  /** validate_data flags whether the input SandboxData was sucessfuly loaded */
  validData: boolean;
  /** errors represent all recoverable errors found while parsing and setting the sandbox state */
  errors:
    | SandboxDataErrors
    | undefined;
  /** record contains a representation of the sandbox's new internal state */
  record:
    | SandboxRecord
    | undefined;
  /** result of the provided sandbox theorem */
  result: AnnotatedPolicyTheoremResult | undefined;
}

export interface GetSandboxRequest {
  /** handle to an existing sandbox */
  handle: number;
}

export interface GetSandboxResponse {
  /** record contains a representation of the sandbox's new internal state */
  record: SandboxRecord | undefined;
}

export interface PlaygroundService {
  /**
   * NewSandbox creates a new isolated execution environment in the Service
   * Returns a handle which references the sandbox
   */
  NewSandbox(request: NewSandboxRequest): Promise<NewSandboxResponse>;
  /** ListSandboxes returns the list of sandboxes created in the Playgruond */
  ListSandboxes(request: ListSandboxesRequest): Promise<ListSandboxesResponse>;
  /** SetState updates the state of a Sandbox environment with the newly provided data */
  SetState(request: SetStateRequest): Promise<SetStateResponse>;
  /** RestoreScratchpad restores the data in scratchpad to match the currently loaded sandbox state */
  RestoreScratchpad(request: RestoreScratchpadRequest): Promise<RestoreScratchpadResponse>;
  /** GetCatalogue returns the catalogue (index/LUT) of defined entities within a sandbox */
  GetCatalogue(request: GetCatalogueRequest): Promise<GetCatalogueResponse>;
  /** GetSandbox returns the internal sandbox state of a sandbox */
  GetSandbox(request: GetSandboxRequest): Promise<GetSandboxResponse>;
  /** VerifyTheorems executes the defined test suite for a sandbox */
  VerifyTheorems(request: VerifyTheoremsRequest): Promise<VerifyTheoremsResponse>;
  /**
   * Simulate receives Sandbox state data and a theorem, creates an ephemeral sandbox
   * evaluates the given theorem against the sandbox's policy and returns the result
   * Simulate is a oneshot operation and persists no state in the process.
   */
  Simulate(request: SimulateRequest): Promise<SimulateReponse>;
}
