// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/parser_message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BufferInterval } from "./buffer_position";

export const protobufPackage = "sourcenetwork.acp_core";

/** LocatedMessage models a message which points to a position in a text buffer */
export interface LocatedMessage {
  message: string;
  kind: LocatedMessage_MessageKind;
  inputName: string;
  interval: BufferInterval | undefined;
}

export enum LocatedMessage_MessageKind {
  UNKNOWN = 0,
  ERROR = 1,
  INFO = 2,
  WARNING = 3,
  UNRECOGNIZED = -1,
}

export function locatedMessage_MessageKindFromJSON(object: any): LocatedMessage_MessageKind {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return LocatedMessage_MessageKind.UNKNOWN;
    case 1:
    case "ERROR":
      return LocatedMessage_MessageKind.ERROR;
    case 2:
    case "INFO":
      return LocatedMessage_MessageKind.INFO;
    case 3:
    case "WARNING":
      return LocatedMessage_MessageKind.WARNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LocatedMessage_MessageKind.UNRECOGNIZED;
  }
}

export function locatedMessage_MessageKindToJSON(object: LocatedMessage_MessageKind): string {
  switch (object) {
    case LocatedMessage_MessageKind.UNKNOWN:
      return "UNKNOWN";
    case LocatedMessage_MessageKind.ERROR:
      return "ERROR";
    case LocatedMessage_MessageKind.INFO:
      return "INFO";
    case LocatedMessage_MessageKind.WARNING:
      return "WARNING";
    case LocatedMessage_MessageKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLocatedMessage(): LocatedMessage {
  return { message: "", kind: 0, inputName: "", interval: undefined };
}

export const LocatedMessage: MessageFns<LocatedMessage> = {
  encode(message: LocatedMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.kind !== 0) {
      writer.uint32(16).int32(message.kind);
    }
    if (message.inputName !== "") {
      writer.uint32(26).string(message.inputName);
    }
    if (message.interval !== undefined) {
      BufferInterval.encode(message.interval, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocatedMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocatedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.interval = BufferInterval.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocatedMessage {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      kind: isSet(object.kind) ? locatedMessage_MessageKindFromJSON(object.kind) : 0,
      inputName: isSet(object.inputName) ? globalThis.String(object.inputName) : "",
      interval: isSet(object.interval) ? BufferInterval.fromJSON(object.interval) : undefined,
    };
  },

  toJSON(message: LocatedMessage): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.kind !== 0) {
      obj.kind = locatedMessage_MessageKindToJSON(message.kind);
    }
    if (message.inputName !== "") {
      obj.inputName = message.inputName;
    }
    if (message.interval !== undefined) {
      obj.interval = BufferInterval.toJSON(message.interval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocatedMessage>, I>>(base?: I): LocatedMessage {
    return LocatedMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocatedMessage>, I>>(object: I): LocatedMessage {
    const message = createBaseLocatedMessage();
    message.message = object.message ?? "";
    message.kind = object.kind ?? 0;
    message.inputName = object.inputName ?? "";
    message.interval = (object.interval !== undefined && object.interval !== null)
      ? BufferInterval.fromPartial(object.interval)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
