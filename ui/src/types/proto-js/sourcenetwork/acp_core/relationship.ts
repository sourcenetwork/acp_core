// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/relationship.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "sourcenetwork.acp_core";

/** Object represents an entity which must be access controlled within a Policy. */
export interface Object {
  resource: string;
  id: string;
}

/** Actor represents an entity which makes access requests to a Policy. */
export interface Actor {
  id: string;
}

/**
 * ActorSet represents a set of Actors in a Policy.
 * It is specified through an Object, Relation pair, which represents
 * all actors which have a relationship with given obj-rel pair.
 * This expansion is recursive.
 */
export interface ActorSet {
  object: Object | undefined;
  relation: string;
}

/**
 * AllActors models a special Relationship Subject which indicates
 * that all Actors in the Policy are included.
 */
export interface AllActors {
}

/** Subject specifies the target of a Relationship. */
export interface Subject {
  actor?: Actor | undefined;
  actorSet?: ActorSet | undefined;
  allActors?: AllActors | undefined;
  object?: Object | undefined;
}

/**
 * Relationship models an access control rule.
 * It states that the given subject has relation with object.
 */
export interface Relationship {
  object: Object | undefined;
  relation: string;
  subject: Subject | undefined;
}

/** RelationshipRecord represents a document contained a Relationship and additional data. */
export interface RelationshipRecord {
  policyId: string;
  /** owner_did is the DID of the Actor which created the relationship */
  ownerDid: string;
  relationship:
    | Relationship
    | undefined;
  /** archived indicates whether an object has been unregistered */
  archived: boolean;
  creationTime:
    | Date
    | undefined;
  /** metadata contains arbitrary caller specified metadata */
  metadata: { [key: string]: string };
}

export interface RelationshipRecord_MetadataEntry {
  key: string;
  value: string;
}

/** Registration represents a record assigning an Object as being owned by an Actor */
export interface Registration {
  object: Object | undefined;
  actor: Actor | undefined;
}

function createBaseObject(): Object {
  return { resource: "", id: "" };
}

export const Object: MessageFns<Object> = {
  encode(message: Object, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Object {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Object {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: Object): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Object>, I>>(base?: I): Object {
    return Object.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Object>, I>>(object: I): Object {
    const message = createBaseObject();
    message.resource = object.resource ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActor(): Actor {
  return { id: "" };
}

export const Actor: MessageFns<Actor> = {
  encode(message: Actor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actor {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Actor): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Actor>, I>>(base?: I): Actor {
    return Actor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Actor>, I>>(object: I): Actor {
    const message = createBaseActor();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActorSet(): ActorSet {
  return { object: undefined, relation: "" };
}

export const ActorSet: MessageFns<ActorSet> = {
  encode(message: ActorSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(10).fork()).join();
    }
    if (message.relation !== "") {
      writer.uint32(18).string(message.relation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActorSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActorSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActorSet {
    return {
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
      relation: isSet(object.relation) ? globalThis.String(object.relation) : "",
    };
  },

  toJSON(message: ActorSet): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    if (message.relation !== "") {
      obj.relation = message.relation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActorSet>, I>>(base?: I): ActorSet {
    return ActorSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActorSet>, I>>(object: I): ActorSet {
    const message = createBaseActorSet();
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    message.relation = object.relation ?? "";
    return message;
  },
};

function createBaseAllActors(): AllActors {
  return {};
}

export const AllActors: MessageFns<AllActors> = {
  encode(_: AllActors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllActors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllActors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AllActors {
    return {};
  },

  toJSON(_: AllActors): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AllActors>, I>>(base?: I): AllActors {
    return AllActors.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllActors>, I>>(_: I): AllActors {
    const message = createBaseAllActors();
    return message;
  },
};

function createBaseSubject(): Subject {
  return { actor: undefined, actorSet: undefined, allActors: undefined, object: undefined };
}

export const Subject: MessageFns<Subject> = {
  encode(message: Subject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== undefined) {
      Actor.encode(message.actor, writer.uint32(10).fork()).join();
    }
    if (message.actorSet !== undefined) {
      ActorSet.encode(message.actorSet, writer.uint32(18).fork()).join();
    }
    if (message.allActors !== undefined) {
      AllActors.encode(message.allActors, writer.uint32(26).fork()).join();
    }
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = Actor.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actorSet = ActorSet.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.allActors = AllActors.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subject {
    return {
      actor: isSet(object.actor) ? Actor.fromJSON(object.actor) : undefined,
      actorSet: isSet(object.actorSet) ? ActorSet.fromJSON(object.actorSet) : undefined,
      allActors: isSet(object.allActors) ? AllActors.fromJSON(object.allActors) : undefined,
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
    };
  },

  toJSON(message: Subject): unknown {
    const obj: any = {};
    if (message.actor !== undefined) {
      obj.actor = Actor.toJSON(message.actor);
    }
    if (message.actorSet !== undefined) {
      obj.actorSet = ActorSet.toJSON(message.actorSet);
    }
    if (message.allActors !== undefined) {
      obj.allActors = AllActors.toJSON(message.allActors);
    }
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Subject>, I>>(base?: I): Subject {
    return Subject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Subject>, I>>(object: I): Subject {
    const message = createBaseSubject();
    message.actor = (object.actor !== undefined && object.actor !== null) ? Actor.fromPartial(object.actor) : undefined;
    message.actorSet = (object.actorSet !== undefined && object.actorSet !== null)
      ? ActorSet.fromPartial(object.actorSet)
      : undefined;
    message.allActors = (object.allActors !== undefined && object.allActors !== null)
      ? AllActors.fromPartial(object.allActors)
      : undefined;
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    return message;
  },
};

function createBaseRelationship(): Relationship {
  return { object: undefined, relation: "", subject: undefined };
}

export const Relationship: MessageFns<Relationship> = {
  encode(message: Relationship, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(10).fork()).join();
    }
    if (message.relation !== "") {
      writer.uint32(18).string(message.relation);
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Relationship {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationship();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relation = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subject = Subject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Relationship {
    return {
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
      relation: isSet(object.relation) ? globalThis.String(object.relation) : "",
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
    };
  },

  toJSON(message: Relationship): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    if (message.relation !== "") {
      obj.relation = message.relation;
    }
    if (message.subject !== undefined) {
      obj.subject = Subject.toJSON(message.subject);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Relationship>, I>>(base?: I): Relationship {
    return Relationship.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Relationship>, I>>(object: I): Relationship {
    const message = createBaseRelationship();
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    message.relation = object.relation ?? "";
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    return message;
  },
};

function createBaseRelationshipRecord(): RelationshipRecord {
  return {
    policyId: "",
    ownerDid: "",
    relationship: undefined,
    archived: false,
    creationTime: undefined,
    metadata: {},
  };
}

export const RelationshipRecord: MessageFns<RelationshipRecord> = {
  encode(message: RelationshipRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyId !== "") {
      writer.uint32(10).string(message.policyId);
    }
    if (message.ownerDid !== "") {
      writer.uint32(18).string(message.ownerDid);
    }
    if (message.relationship !== undefined) {
      Relationship.encode(message.relationship, writer.uint32(26).fork()).join();
    }
    if (message.archived !== false) {
      writer.uint32(32).bool(message.archived);
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(42).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      RelationshipRecord_MetadataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ownerDid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.relationship = Relationship.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.archived = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = RelationshipRecord_MetadataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.metadata[entry6.key] = entry6.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipRecord {
    return {
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      ownerDid: isSet(object.ownerDid) ? globalThis.String(object.ownerDid) : "",
      relationship: isSet(object.relationship) ? Relationship.fromJSON(object.relationship) : undefined,
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RelationshipRecord): unknown {
    const obj: any = {};
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.ownerDid !== "") {
      obj.ownerDid = message.ownerDid;
    }
    if (message.relationship !== undefined) {
      obj.relationship = Relationship.toJSON(message.relationship);
    }
    if (message.archived !== false) {
      obj.archived = message.archived;
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelationshipRecord>, I>>(base?: I): RelationshipRecord {
    return RelationshipRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelationshipRecord>, I>>(object: I): RelationshipRecord {
    const message = createBaseRelationshipRecord();
    message.policyId = object.policyId ?? "";
    message.ownerDid = object.ownerDid ?? "";
    message.relationship = (object.relationship !== undefined && object.relationship !== null)
      ? Relationship.fromPartial(object.relationship)
      : undefined;
    message.archived = object.archived ?? false;
    message.creationTime = object.creationTime ?? undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseRelationshipRecord_MetadataEntry(): RelationshipRecord_MetadataEntry {
  return { key: "", value: "" };
}

export const RelationshipRecord_MetadataEntry: MessageFns<RelationshipRecord_MetadataEntry> = {
  encode(message: RelationshipRecord_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelationshipRecord_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelationshipRecord_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelationshipRecord_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RelationshipRecord_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelationshipRecord_MetadataEntry>, I>>(
    base?: I,
  ): RelationshipRecord_MetadataEntry {
    return RelationshipRecord_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelationshipRecord_MetadataEntry>, I>>(
    object: I,
  ): RelationshipRecord_MetadataEntry {
    const message = createBaseRelationshipRecord_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRegistration(): Registration {
  return { object: undefined, actor: undefined };
}

export const Registration: MessageFns<Registration> = {
  encode(message: Registration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(10).fork()).join();
    }
    if (message.actor !== undefined) {
      Actor.encode(message.actor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Registration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actor = Actor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Registration {
    return {
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
      actor: isSet(object.actor) ? Actor.fromJSON(object.actor) : undefined,
    };
  },

  toJSON(message: Registration): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    if (message.actor !== undefined) {
      obj.actor = Actor.toJSON(message.actor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Registration>, I>>(base?: I): Registration {
    return Registration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Registration>, I>>(object: I): Registration {
    const message = createBaseRegistration();
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    message.actor = (object.actor !== undefined && object.actor !== null) ? Actor.fromPartial(object.actor) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
