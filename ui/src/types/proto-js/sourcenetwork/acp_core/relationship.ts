// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/relationship.proto

/* eslint-disable */

export const protobufPackage = "sourcenetwork.acp_core";

/** Object represents an entity which must be access controlled within a Policy. */
export interface Object {
  resource: string;
  id: string;
}

/** Actor represents an entity which makes access requests to a Policy. */
export interface Actor {
  id: string;
}

/**
 * ActorSet represents a set of Actors in a Policy.
 * It is specified through an Object, Relation pair, which represents
 * all actors which have a relationship with given obj-rel pair.
 * This expansion is recursive.
 */
export interface ActorSet {
  object: Object | undefined;
  relation: string;
}

/**
 * AllActors models a special Relationship Subject which indicates
 * that all Actors in the Policy are included.
 */
export interface AllActors {
}

/** Subject specifies the target of a Relationship. */
export interface Subject {
  actor?: Actor | undefined;
  actorSet?: ActorSet | undefined;
  allActors?: AllActors | undefined;
  object?: Object | undefined;
}

/**
 * Relationship models an access control rule.
 * It states that the given subject has relation with object.
 */
export interface Relationship {
  object: Object | undefined;
  relation: string;
  subject: Subject | undefined;
}

/** RelationshipRecord represents a document contained a Relationship and additional data. */
export interface RelationshipRecord {
  policyId: string;
  /** owner_did is the DID of the Actor which created the relationship */
  ownerDid: string;
  relationship:
    | Relationship
    | undefined;
  /** archived indicates whether an object has been unregistered */
  archived: boolean;
  creationTime:
    | Date
    | undefined;
  /** metadata contains arbitrary caller specified metadata */
  metadata: { [key: string]: string };
}

export interface RelationshipRecord_MetadataEntry {
  key: string;
  value: string;
}

/** Registration represents a record assigning an Object as being owned by an Actor */
export interface Registration {
  object: Object | undefined;
  actor: Actor | undefined;
}
