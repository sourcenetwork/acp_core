// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/theorem.proto

/* eslint-disable */
import { type Operation } from "./access_decision";
import { type BufferInterval } from "./buffer_position";
import { type Actor, type Object } from "./relationship";

export const protobufPackage = "sourcenetwork.acp_core";

/** ResultStatus models the possible results from executing a Theorem */
export enum ResultStatus {
  Reject = 0,
  Accept = 1,
  Error = 2,
  UNRECOGNIZED = -1,
}

/** AuthorizationTheorem states that the given AccessRequest request is valid (or not) in the context of a certain Policy */
export interface AuthorizationTheorem {
  operation: Operation | undefined;
  actor: Actor | undefined;
  assertTrue: boolean;
}

export interface ReachabilityTheorem {
  actor: Actor | undefined;
  operation: string;
  object: Object | undefined;
  assertTrue: boolean;
}

/**
 * DelegationTheorem models a statement declaring that actor can create and delete relationships
 * with `relation` for the given `object`
 */
export interface DelegationTheorem {
  actor: Actor | undefined;
  operation: Operation | undefined;
  assertTrue: boolean;
}

/** PolicyTheorem models a set of theorems about a Policy */
export interface PolicyTheorem {
  authorizationTheorems: AuthorizationTheorem[];
  delegationTheorems: DelegationTheorem[];
  reachabilityTheorems: ReachabilityTheorem[];
}

/** Result models the result of evaluating a theorem */
export interface Result {
  /** status indicates whether the theorem was accepted, rejected or an error happened */
  status: ResultStatus;
  /** Message explains the result */
  message: string;
}

export interface AuthorizationTheoremResult {
  theorem: AuthorizationTheorem | undefined;
  result: Result | undefined;
}

export interface DelegationTheoremResult {
  theorem: DelegationTheorem | undefined;
  result: Result | undefined;
}

export interface ReachabilityTheoremResult {
  theorem: ReachabilityTheorem | undefined;
  result: Result | undefined;
}

export interface AnnotatedAuthorizationTheoremResult {
  result: AuthorizationTheoremResult | undefined;
  interval: BufferInterval | undefined;
}

export interface AnnotatedDelegationTheoremResult {
  result: DelegationTheoremResult | undefined;
  interval: BufferInterval | undefined;
}

export interface AnnotatedReachabilityTheoremResult {
  result: ReachabilityTheoremResult | undefined;
  interval: BufferInterval | undefined;
}

export interface PolicyTheoremResult {
  theorem: PolicyTheorem | undefined;
  authorizationTheoremsResult: AuthorizationTheoremResult[];
  delegationTheoremsResult: DelegationTheoremResult[];
  reachabilityTheoremsResult: ReachabilityTheoremResult[];
}

export interface AnnotatedPolicyTheoremResult {
  theorem: PolicyTheorem | undefined;
  authorizationTheoremsResult: AnnotatedAuthorizationTheoremResult[];
  delegationTheoremsResult: AnnotatedDelegationTheoremResult[];
  reachabilityTheoremsResult: AnnotatedReachabilityTheoremResult[];
}
