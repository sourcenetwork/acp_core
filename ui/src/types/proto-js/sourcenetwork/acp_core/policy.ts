// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "sourcenetwork.acp_core";

/**
 * Policy represents an ACP module Policy definition.
 * Each Policy defines a set of high level rules over how the acces control system
 * should behave.
 */
export interface Policy {
  id: string;
  name: string;
  description: string;
  creationTime: Date | undefined;
  attributes: { [key: string]: string };
  resources: Resource[];
  actorResource: ActorResource | undefined;
}

export interface Policy_AttributesEntry {
  key: string;
  value: string;
}

/**
 * Resource models a namespace for objects in a Policy.
 * Appications will have multiple entities which they must manage such as files or groups.
 * A Resource represents a set of entities of a certain type.
 */
export interface Resource {
  name: string;
  doc: string;
  permissions: Permission[];
  relations: Relation[];
}

export interface Relation {
  name: string;
  doc: string;
  /** list of relations managed by the current relation */
  manages: string[];
  /** value restriction types */
  vrTypes: Restriction[];
}

/**
 * Restriction models a specification which a Relationship's actor
 * should meet.
 */
export interface Restriction {
  /** resource_name scopes permissible actors resource */
  resourceName: string;
  /** relation_name scopes permissible actors relation */
  relationName: string;
}

/**
 * Permission models a special type of Relation which is evaluated at runtime.
 * A permission often maps to an operation defined for a resource which an actor may attempt.
 */
export interface Permission {
  name: string;
  doc: string;
  expression: string;
}

/** ActorResource represents a special Resource which is reserved for Policy actors. */
export interface ActorResource {
  name: string;
  doc: string;
  relations: Relation[];
}

function createBasePolicy(): Policy {
  return {
    id: "",
    name: "",
    description: "",
    creationTime: undefined,
    attributes: {},
    resources: [],
    actorResource: undefined,
  };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(34).fork()).join();
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      Policy_AttributesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    for (const v of message.resources) {
      Resource.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.actorResource !== undefined) {
      ActorResource.encode(message.actorResource, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Policy_AttributesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.attributes[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resources.push(Resource.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.actorResource = ActorResource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Resource.fromJSON(e))
        : [],
      actorResource: isSet(object.actorResource) ? ActorResource.fromJSON(object.actorResource) : undefined,
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Resource.toJSON(e));
    }
    if (message.actorResource !== undefined) {
      obj.actorResource = ActorResource.toJSON(message.actorResource);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy>, I>>(base?: I): Policy {
    return Policy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy>, I>>(object: I): Policy {
    const message = createBasePolicy();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.creationTime = object.creationTime ?? undefined;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.resources = object.resources?.map((e) => Resource.fromPartial(e)) || [];
    message.actorResource = (object.actorResource !== undefined && object.actorResource !== null)
      ? ActorResource.fromPartial(object.actorResource)
      : undefined;
    return message;
  },
};

function createBasePolicy_AttributesEntry(): Policy_AttributesEntry {
  return { key: "", value: "" };
}

export const Policy_AttributesEntry: MessageFns<Policy_AttributesEntry> = {
  encode(message: Policy_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Policy_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy_AttributesEntry>, I>>(base?: I): Policy_AttributesEntry {
    return Policy_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy_AttributesEntry>, I>>(object: I): Policy_AttributesEntry {
    const message = createBasePolicy_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseResource(): Resource {
  return { name: "", doc: "", permissions: [], relations: [] };
}

export const Resource: MessageFns<Resource> = {
  encode(message: Resource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.doc !== "") {
      writer.uint32(18).string(message.doc);
    }
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.relations) {
      Relation.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.doc = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.relations.push(Relation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      doc: isSet(object.doc) ? globalThis.String(object.doc) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
      relations: globalThis.Array.isArray(object?.relations)
        ? object.relations.map((e: any) => Relation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Resource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.doc !== "") {
      obj.doc = message.doc;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    if (message.relations?.length) {
      obj.relations = message.relations.map((e) => Relation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Resource>, I>>(base?: I): Resource {
    return Resource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Resource>, I>>(object: I): Resource {
    const message = createBaseResource();
    message.name = object.name ?? "";
    message.doc = object.doc ?? "";
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    message.relations = object.relations?.map((e) => Relation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRelation(): Relation {
  return { name: "", doc: "", manages: [], vrTypes: [] };
}

export const Relation: MessageFns<Relation> = {
  encode(message: Relation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.doc !== "") {
      writer.uint32(18).string(message.doc);
    }
    for (const v of message.manages) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.vrTypes) {
      Restriction.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Relation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.doc = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.manages.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vrTypes.push(Restriction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Relation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      doc: isSet(object.doc) ? globalThis.String(object.doc) : "",
      manages: globalThis.Array.isArray(object?.manages) ? object.manages.map((e: any) => globalThis.String(e)) : [],
      vrTypes: globalThis.Array.isArray(object?.vrTypes) ? object.vrTypes.map((e: any) => Restriction.fromJSON(e)) : [],
    };
  },

  toJSON(message: Relation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.doc !== "") {
      obj.doc = message.doc;
    }
    if (message.manages?.length) {
      obj.manages = message.manages;
    }
    if (message.vrTypes?.length) {
      obj.vrTypes = message.vrTypes.map((e) => Restriction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Relation>, I>>(base?: I): Relation {
    return Relation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Relation>, I>>(object: I): Relation {
    const message = createBaseRelation();
    message.name = object.name ?? "";
    message.doc = object.doc ?? "";
    message.manages = object.manages?.map((e) => e) || [];
    message.vrTypes = object.vrTypes?.map((e) => Restriction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestriction(): Restriction {
  return { resourceName: "", relationName: "" };
}

export const Restriction: MessageFns<Restriction> = {
  encode(message: Restriction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.relationName !== "") {
      writer.uint32(18).string(message.relationName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restriction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestriction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relationName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restriction {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      relationName: isSet(object.relationName) ? globalThis.String(object.relationName) : "",
    };
  },

  toJSON(message: Restriction): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.relationName !== "") {
      obj.relationName = message.relationName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Restriction>, I>>(base?: I): Restriction {
    return Restriction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Restriction>, I>>(object: I): Restriction {
    const message = createBaseRestriction();
    message.resourceName = object.resourceName ?? "";
    message.relationName = object.relationName ?? "";
    return message;
  },
};

function createBasePermission(): Permission {
  return { name: "", doc: "", expression: "" };
}

export const Permission: MessageFns<Permission> = {
  encode(message: Permission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.doc !== "") {
      writer.uint32(18).string(message.doc);
    }
    if (message.expression !== "") {
      writer.uint32(26).string(message.expression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Permission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.doc = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expression = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Permission {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      doc: isSet(object.doc) ? globalThis.String(object.doc) : "",
      expression: isSet(object.expression) ? globalThis.String(object.expression) : "",
    };
  },

  toJSON(message: Permission): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.doc !== "") {
      obj.doc = message.doc;
    }
    if (message.expression !== "") {
      obj.expression = message.expression;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Permission>, I>>(base?: I): Permission {
    return Permission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Permission>, I>>(object: I): Permission {
    const message = createBasePermission();
    message.name = object.name ?? "";
    message.doc = object.doc ?? "";
    message.expression = object.expression ?? "";
    return message;
  },
};

function createBaseActorResource(): ActorResource {
  return { name: "", doc: "", relations: [] };
}

export const ActorResource: MessageFns<ActorResource> = {
  encode(message: ActorResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.doc !== "") {
      writer.uint32(18).string(message.doc);
    }
    for (const v of message.relations) {
      Relation.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActorResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActorResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.doc = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.relations.push(Relation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActorResource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      doc: isSet(object.doc) ? globalThis.String(object.doc) : "",
      relations: globalThis.Array.isArray(object?.relations)
        ? object.relations.map((e: any) => Relation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ActorResource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.doc !== "") {
      obj.doc = message.doc;
    }
    if (message.relations?.length) {
      obj.relations = message.relations.map((e) => Relation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActorResource>, I>>(base?: I): ActorResource {
    return ActorResource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActorResource>, I>>(object: I): ActorResource {
    const message = createBaseActorResource();
    message.name = object.name ?? "";
    message.doc = object.doc ?? "";
    message.relations = object.relations?.map((e) => Relation.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
