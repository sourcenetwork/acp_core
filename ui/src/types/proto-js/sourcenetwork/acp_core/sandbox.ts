// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/sandbox.proto

/* eslint-disable */
import { type LocatedMessage } from "./parser_message";
import { type Policy } from "./policy";
import { type Relationship } from "./relationship";
import { type PolicyTheorem } from "./theorem";

export const protobufPackage = "sourcenetwork.acp_core";

/** SandboxRecord represents an instance of a sandbox */
export interface SandboxRecord {
  /** Handle is an opaque identifier to a sandbox */
  handle: number;
  /** name is a user given designation to a sandbox */
  name: string;
  description: string;
  data:
    | SandboxData
    | undefined;
  /** scratchpad acts as temporary storage for modifications in the sandbox data */
  scratchpad: SandboxData | undefined;
  ctx: SandboxCtx | undefined;
  initialized: boolean;
}

/** SandboxData encapsulates all the data necessary to create a Sandbox */
export interface SandboxData {
  /** policy_definition contains a yaml serialized policy which will be loaded in the sandbox */
  policyDefinition: string;
  /**
   * relationships is a set of line separated relationships, as defined in the PolicyTheoremDSL
   * For an introduction to the language, check acp_core docs
   */
  relationships: string;
  /**
   * policy_theorem is a PolicyTheoremDSL document representing a PolicyTheorem.
   * For an introduction to the language, check acp_core docs
   */
  policyTheorem: string;
}

/**
 * SandboxCtx encapsulated all context data
 * to execute an isolated theorem execution simulation
 */
export interface SandboxCtx {
  /** policy contains the parsed policy as defined in SandboxData */
  policy:
    | Policy
    | undefined;
  /** relationships contains the parsed relationships as defined in SandboxData */
  relationships: Relationship[];
  /** policy_theorem contains the parsed policy_theorem as defined in SandboxData */
  policyTheorem: PolicyTheorem | undefined;
}

export interface SandboxDataErrors {
  /**
   * policy_errors contains all errors encountered while
   * processing the given policy
   */
  policyErrors: LocatedMessage[];
  /**
   * policy_errors contains all errors encountered while
   * processing the relationship set
   */
  relationshipsErrors: LocatedMessage[];
  /**
   * policy_errors contains all errors encountered while
   * parsing the theorems
   */
  theoremsErrors: LocatedMessage[];
}

/**
 * SandboxTemplate models a template sandbox
 * containing its data, a name and description
 */
export interface SandboxTemplate {
  name: string;
  description: string;
  data: SandboxData | undefined;
}
