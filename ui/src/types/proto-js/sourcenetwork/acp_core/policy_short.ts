// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/policy_short.proto

/* eslint-disable */
import { type ActorResource } from "./policy";

export const protobufPackage = "sourcenetwork.acp_core";

/** PolicyEncodingType enumerates supported marshaling types for policies. */
export enum PolicyMarshalingType {
  /** UNKNOWN - Fallback value for a missing Marshaling Type */
  UNKNOWN = 0,
  /** SHORT_YAML - Policy Marshaled as a YAML Short Policy definition */
  SHORT_YAML = 1,
  /** SHORT_JSON - Policy Marshaled as a JSON Short Policy definition */
  SHORT_JSON = 2,
  UNRECOGNIZED = -1,
}

/**
 * PolicyShort is a compact Policy definition which is conveniently expressed
 * as JSON or YAML. The shorthand format is used created a Policy.
 */
export interface PolicyShort {
  name: string;
  description: string;
  /** meta field stores arbitrary key-values from users */
  meta: { [key: string]: string };
  /**
   * resources defines resources within a policy.
   * map keys define the name for a resource
   */
  resources: { [key: string]: ResourceShort };
  /**
   * actor resource defines the actor resource for the policy
   * optional.
   */
  actor:
    | ActorResource
    | undefined;
  /** specify the policy version */
  version: string;
}

export interface PolicyShort_MetaEntry {
  key: string;
  value: string;
}

export interface PolicyShort_ResourcesEntry {
  key: string;
  value: ResourceShort | undefined;
}

export interface ResourceShort {
  doc: string;
  permissions: { [key: string]: PermissionShort };
  relations: { [key: string]: RelationShort };
}

export interface ResourceShort_PermissionsEntry {
  key: string;
  value: PermissionShort | undefined;
}

export interface ResourceShort_RelationsEntry {
  key: string;
  value: RelationShort | undefined;
}

export interface RelationShort {
  doc: string;
  /** list of relations managed by the current relation */
  manages: string[];
  /**
   * types define a list of target types the current relation can point to.
   * Each type restriction points to a a resource's relation.
   * The syntax for a type restriction is "{resource}->{relation}", where relation is optional.
   * An empty relation means the relationship can only point to an object node, as opposed to an userset.
   */
  types: string[];
}

export interface PermissionShort {
  doc: string;
  expr: string;
}
