// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/catalogue.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sourcenetwork.acp_core";

/** PolicyCatalogue represents a lookup table for entities definedw withing a Policy */
export interface PolicyCatalogue {
  resourceCatalogue: { [key: string]: ResourceCatalogue };
  actorResourceName: string;
  actors: string[];
}

export interface PolicyCatalogue_ResourceCatalogueEntry {
  key: string;
  value: ResourceCatalogue | undefined;
}

/** ResourceCatalogue models the set of known objects, permissions and relations for a Resource within a Policy */
export interface ResourceCatalogue {
  permissions: string[];
  relations: string[];
  objectIds: string[];
}

function createBasePolicyCatalogue(): PolicyCatalogue {
  return { resourceCatalogue: {}, actorResourceName: "", actors: [] };
}

export const PolicyCatalogue: MessageFns<PolicyCatalogue> = {
  encode(message: PolicyCatalogue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.resourceCatalogue).forEach(([key, value]) => {
      PolicyCatalogue_ResourceCatalogueEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.actorResourceName !== "") {
      writer.uint32(18).string(message.actorResourceName);
    }
    for (const v of message.actors) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyCatalogue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyCatalogue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = PolicyCatalogue_ResourceCatalogueEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.resourceCatalogue[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actorResourceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actors.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyCatalogue {
    return {
      resourceCatalogue: isObject(object.resourceCatalogue)
        ? Object.entries(object.resourceCatalogue).reduce<{ [key: string]: ResourceCatalogue }>((acc, [key, value]) => {
          acc[key] = ResourceCatalogue.fromJSON(value);
          return acc;
        }, {})
        : {},
      actorResourceName: isSet(object.actorResourceName) ? globalThis.String(object.actorResourceName) : "",
      actors: globalThis.Array.isArray(object?.actors) ? object.actors.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: PolicyCatalogue): unknown {
    const obj: any = {};
    if (message.resourceCatalogue) {
      const entries = Object.entries(message.resourceCatalogue);
      if (entries.length > 0) {
        obj.resourceCatalogue = {};
        entries.forEach(([k, v]) => {
          obj.resourceCatalogue[k] = ResourceCatalogue.toJSON(v);
        });
      }
    }
    if (message.actorResourceName !== "") {
      obj.actorResourceName = message.actorResourceName;
    }
    if (message.actors?.length) {
      obj.actors = message.actors;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyCatalogue>, I>>(base?: I): PolicyCatalogue {
    return PolicyCatalogue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyCatalogue>, I>>(object: I): PolicyCatalogue {
    const message = createBasePolicyCatalogue();
    message.resourceCatalogue = Object.entries(object.resourceCatalogue ?? {}).reduce<
      { [key: string]: ResourceCatalogue }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ResourceCatalogue.fromPartial(value);
      }
      return acc;
    }, {});
    message.actorResourceName = object.actorResourceName ?? "";
    message.actors = object.actors?.map((e) => e) || [];
    return message;
  },
};

function createBasePolicyCatalogue_ResourceCatalogueEntry(): PolicyCatalogue_ResourceCatalogueEntry {
  return { key: "", value: undefined };
}

export const PolicyCatalogue_ResourceCatalogueEntry: MessageFns<PolicyCatalogue_ResourceCatalogueEntry> = {
  encode(message: PolicyCatalogue_ResourceCatalogueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ResourceCatalogue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyCatalogue_ResourceCatalogueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyCatalogue_ResourceCatalogueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ResourceCatalogue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyCatalogue_ResourceCatalogueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ResourceCatalogue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PolicyCatalogue_ResourceCatalogueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ResourceCatalogue.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyCatalogue_ResourceCatalogueEntry>, I>>(
    base?: I,
  ): PolicyCatalogue_ResourceCatalogueEntry {
    return PolicyCatalogue_ResourceCatalogueEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyCatalogue_ResourceCatalogueEntry>, I>>(
    object: I,
  ): PolicyCatalogue_ResourceCatalogueEntry {
    const message = createBasePolicyCatalogue_ResourceCatalogueEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ResourceCatalogue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseResourceCatalogue(): ResourceCatalogue {
  return { permissions: [], relations: [], objectIds: [] };
}

export const ResourceCatalogue: MessageFns<ResourceCatalogue> = {
  encode(message: ResourceCatalogue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.relations) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.objectIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceCatalogue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceCatalogue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relations.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceCatalogue {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => globalThis.String(e))
        : [],
      relations: globalThis.Array.isArray(object?.relations)
        ? object.relations.map((e: any) => globalThis.String(e))
        : [],
      objectIds: globalThis.Array.isArray(object?.objectIds)
        ? object.objectIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ResourceCatalogue): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions;
    }
    if (message.relations?.length) {
      obj.relations = message.relations;
    }
    if (message.objectIds?.length) {
      obj.objectIds = message.objectIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResourceCatalogue>, I>>(base?: I): ResourceCatalogue {
    return ResourceCatalogue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResourceCatalogue>, I>>(object: I): ResourceCatalogue {
    const message = createBaseResourceCatalogue();
    message.permissions = object.permissions?.map((e) => e) || [];
    message.relations = object.relations?.map((e) => e) || [];
    message.objectIds = object.objectIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
