// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/buffer_position.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sourcenetwork.acp_core";

/**
 * BufferInterval models a range in
 * a line oriented buffer
 */
export interface BufferInterval {
  start: BufferPosition | undefined;
  end: BufferPosition | undefined;
}

/**
 * BufferPosition models a position in
 * a line oriented buffer
 */
export interface BufferPosition {
  line: number;
  column: number;
}

function createBaseBufferInterval(): BufferInterval {
  return { start: undefined, end: undefined };
}

export const BufferInterval: MessageFns<BufferInterval> = {
  encode(message: BufferInterval, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      BufferPosition.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      BufferPosition.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferInterval {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferInterval();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = BufferPosition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = BufferPosition.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BufferInterval {
    return {
      start: isSet(object.start) ? BufferPosition.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? BufferPosition.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: BufferInterval): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = BufferPosition.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = BufferPosition.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BufferInterval>, I>>(base?: I): BufferInterval {
    return BufferInterval.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BufferInterval>, I>>(object: I): BufferInterval {
    const message = createBaseBufferInterval();
    message.start = (object.start !== undefined && object.start !== null)
      ? BufferPosition.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? BufferPosition.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseBufferPosition(): BufferPosition {
  return { line: 0, column: 0 };
}

export const BufferPosition: MessageFns<BufferPosition> = {
  encode(message: BufferPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.line !== 0) {
      writer.uint32(8).uint64(message.line);
    }
    if (message.column !== 0) {
      writer.uint32(16).uint64(message.column);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.line = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.column = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BufferPosition {
    return {
      line: isSet(object.line) ? globalThis.Number(object.line) : 0,
      column: isSet(object.column) ? globalThis.Number(object.column) : 0,
    };
  },

  toJSON(message: BufferPosition): unknown {
    const obj: any = {};
    if (message.line !== 0) {
      obj.line = Math.round(message.line);
    }
    if (message.column !== 0) {
      obj.column = Math.round(message.column);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BufferPosition>, I>>(base?: I): BufferPosition {
    return BufferPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BufferPosition>, I>>(object: I): BufferPosition {
    const message = createBaseBufferPosition();
    message.line = object.line ?? 0;
    message.column = object.column ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
