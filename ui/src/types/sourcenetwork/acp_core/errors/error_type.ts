// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/errors/error_type.proto

/* eslint-disable */

export const protobufPackage = "sourcenetwork.acp_core.errors";

/**
 * ErrorType represent families of errors which acp_core can throw.
 * Concrete errors are refined with additional context data and explanatory messages
 */
export enum ErrorType {
  /** UNKNOWN - UNKNOWN is a catch all bucket for unspecified errors (represents an internal error) */
  UNKNOWN = 0,
  /** INTERNAL - INTERNAL is a general base error for IO or unexpected system errors */
  INTERNAL = 1,
  /** UNAUTHENTICATED - UNAUTHENTICATED signals caller was not authenticated while it was required */
  UNAUTHENTICATED = 2,
  /**
   * UNAUTHORIZED - UNAUTHORIZED is a general error for operations that were
   * rejected due to insufficient permission unauthorized
   */
  UNAUTHORIZED = 3,
  /** BAD_INPUT - BAD_INPUT is a general base error for input errors */
  BAD_INPUT = 4,
  /**
   * OPERATION_FORBIDDEN - OPERATION_FORBIDDEN signals that the operation was not executed
   * as that would violate part of the Access Control system
   */
  OPERATION_FORBIDDEN = 5,
  /** NOT_FOUND - NOT_FOUND signals that the requested entity was not found in the system */
  NOT_FOUND = 6,
  UNRECOGNIZED = -1,
}

export function errorTypeFromJSON(object: any): ErrorType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ErrorType.UNKNOWN;
    case 1:
    case "INTERNAL":
      return ErrorType.INTERNAL;
    case 2:
    case "UNAUTHENTICATED":
      return ErrorType.UNAUTHENTICATED;
    case 3:
    case "UNAUTHORIZED":
      return ErrorType.UNAUTHORIZED;
    case 4:
    case "BAD_INPUT":
      return ErrorType.BAD_INPUT;
    case 5:
    case "OPERATION_FORBIDDEN":
      return ErrorType.OPERATION_FORBIDDEN;
    case 6:
    case "NOT_FOUND":
      return ErrorType.NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ErrorType.UNRECOGNIZED;
  }
}

export function errorTypeToJSON(object: ErrorType): string {
  switch (object) {
    case ErrorType.UNKNOWN:
      return "UNKNOWN";
    case ErrorType.INTERNAL:
      return "INTERNAL";
    case ErrorType.UNAUTHENTICATED:
      return "UNAUTHENTICATED";
    case ErrorType.UNAUTHORIZED:
      return "UNAUTHORIZED";
    case ErrorType.BAD_INPUT:
      return "BAD_INPUT";
    case ErrorType.OPERATION_FORBIDDEN:
      return "OPERATION_FORBIDDEN";
    case ErrorType.NOT_FOUND:
      return "NOT_FOUND";
    case ErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
