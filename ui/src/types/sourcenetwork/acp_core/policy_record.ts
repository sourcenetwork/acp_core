// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/policy_record.proto

/* eslint-disable */
import { Policy } from "./policy";
import { PolicyMarshalingType, policyMarshalingTypeFromJSON, policyMarshalingTypeToJSON } from "./policy_short";

export const protobufPackage = "sourcenetwork.acp_core";

/** PolicyRecord represents a the Policy Document which will be persisted in the data layer */
export interface PolicyRecord {
  policy: Policy | undefined;
  managementGraph:
    | ManagementGraph
    | undefined;
  /**
   * metadata contains any application specific data
   * which was not supplied by the policy creator directly
   */
  metadata: { [key: string]: string };
  /**
   * policy_definition contains the policy payload as the client
   * originally submitted
   */
  policyDefinition: string;
  marshalType: PolicyMarshalingType;
}

export interface PolicyRecord_MetadataEntry {
  key: string;
  value: string;
}

/**
 * ManagementGraph represents a Policy's Relation Management Graph.
 *
 * The ManagementGraph is a directed graph which expresses the notion of Relation Management Authority.
 * Relation Management Authority is the idea that a certain set of relationships with relation R will be managed by an actor with relation RM.
 * Thus we can say RM manages R, meaning that if an actor A has a relationship 'actor {A} is a {RM} for {O}' where O is an object,
 * then Actor A can create relationships 'actor {S} is a {R} for {O}' for any actor S.
 *
 * Nodes in the Graph are Relations in a Policy.
 * Edges point from one Relation to another.
 *
 * NOTE: This proto definition should be treated as an *abstract data type*,
 * meaning that the fields should not be manually editted.
 */
export interface ManagementGraph {
  /** map of node id to node definition */
  nodes: { [key: string]: ManagerNode };
  /** stores all edges leaving a node */
  forwardEdges: { [key: string]: ManagerEdges };
  /** stores all edges pointing to a node */
  backwardEdges: { [key: string]: ManagerEdges };
}

export interface ManagementGraph_NodesEntry {
  key: string;
  value: ManagerNode | undefined;
}

export interface ManagementGraph_ForwardEdgesEntry {
  key: string;
  value: ManagerEdges | undefined;
}

export interface ManagementGraph_BackwardEdgesEntry {
  key: string;
  value: ManagerEdges | undefined;
}

export interface ManagerNode {
  id: string;
  text: string;
}

export interface ManagerEdges {
  edges: { [key: string]: boolean };
}

export interface ManagerEdges_EdgesEntry {
  key: string;
  value: boolean;
}

function createBasePolicyRecord(): PolicyRecord {
  return { policy: undefined, managementGraph: undefined, metadata: {}, policyDefinition: "", marshalType: 0 };
}

export const PolicyRecord: MessageFns<PolicyRecord> = {
  fromJSON(object: any): PolicyRecord {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      managementGraph: isSet(object.managementGraph) ? ManagementGraph.fromJSON(object.managementGraph) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      policyDefinition: isSet(object.policyDefinition) ? globalThis.String(object.policyDefinition) : "",
      marshalType: isSet(object.marshalType) ? policyMarshalingTypeFromJSON(object.marshalType) : 0,
    };
  },

  toJSON(message: PolicyRecord): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.managementGraph !== undefined) {
      obj.managementGraph = ManagementGraph.toJSON(message.managementGraph);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.policyDefinition !== "") {
      obj.policyDefinition = message.policyDefinition;
    }
    if (message.marshalType !== 0) {
      obj.marshalType = policyMarshalingTypeToJSON(message.marshalType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyRecord>, I>>(base?: I): PolicyRecord {
    return PolicyRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyRecord>, I>>(object: I): PolicyRecord {
    const message = createBasePolicyRecord();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.managementGraph = (object.managementGraph !== undefined && object.managementGraph !== null)
      ? ManagementGraph.fromPartial(object.managementGraph)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.policyDefinition = object.policyDefinition ?? "";
    message.marshalType = object.marshalType ?? 0;
    return message;
  },
};

function createBasePolicyRecord_MetadataEntry(): PolicyRecord_MetadataEntry {
  return { key: "", value: "" };
}

export const PolicyRecord_MetadataEntry: MessageFns<PolicyRecord_MetadataEntry> = {
  fromJSON(object: any): PolicyRecord_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PolicyRecord_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyRecord_MetadataEntry>, I>>(base?: I): PolicyRecord_MetadataEntry {
    return PolicyRecord_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyRecord_MetadataEntry>, I>>(object: I): PolicyRecord_MetadataEntry {
    const message = createBasePolicyRecord_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseManagementGraph(): ManagementGraph {
  return { nodes: {}, forwardEdges: {}, backwardEdges: {} };
}

export const ManagementGraph: MessageFns<ManagementGraph> = {
  fromJSON(object: any): ManagementGraph {
    return {
      nodes: isObject(object.nodes)
        ? Object.entries(object.nodes).reduce<{ [key: string]: ManagerNode }>((acc, [key, value]) => {
          acc[key] = ManagerNode.fromJSON(value);
          return acc;
        }, {})
        : {},
      forwardEdges: isObject(object.forwardEdges)
        ? Object.entries(object.forwardEdges).reduce<{ [key: string]: ManagerEdges }>((acc, [key, value]) => {
          acc[key] = ManagerEdges.fromJSON(value);
          return acc;
        }, {})
        : {},
      backwardEdges: isObject(object.backwardEdges)
        ? Object.entries(object.backwardEdges).reduce<{ [key: string]: ManagerEdges }>((acc, [key, value]) => {
          acc[key] = ManagerEdges.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ManagementGraph): unknown {
    const obj: any = {};
    if (message.nodes) {
      const entries = Object.entries(message.nodes);
      if (entries.length > 0) {
        obj.nodes = {};
        entries.forEach(([k, v]) => {
          obj.nodes[k] = ManagerNode.toJSON(v);
        });
      }
    }
    if (message.forwardEdges) {
      const entries = Object.entries(message.forwardEdges);
      if (entries.length > 0) {
        obj.forwardEdges = {};
        entries.forEach(([k, v]) => {
          obj.forwardEdges[k] = ManagerEdges.toJSON(v);
        });
      }
    }
    if (message.backwardEdges) {
      const entries = Object.entries(message.backwardEdges);
      if (entries.length > 0) {
        obj.backwardEdges = {};
        entries.forEach(([k, v]) => {
          obj.backwardEdges[k] = ManagerEdges.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagementGraph>, I>>(base?: I): ManagementGraph {
    return ManagementGraph.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagementGraph>, I>>(object: I): ManagementGraph {
    const message = createBaseManagementGraph();
    message.nodes = Object.entries(object.nodes ?? {}).reduce<{ [key: string]: ManagerNode }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ManagerNode.fromPartial(value);
      }
      return acc;
    }, {});
    message.forwardEdges = Object.entries(object.forwardEdges ?? {}).reduce<{ [key: string]: ManagerEdges }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ManagerEdges.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.backwardEdges = Object.entries(object.backwardEdges ?? {}).reduce<{ [key: string]: ManagerEdges }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ManagerEdges.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseManagementGraph_NodesEntry(): ManagementGraph_NodesEntry {
  return { key: "", value: undefined };
}

export const ManagementGraph_NodesEntry: MessageFns<ManagementGraph_NodesEntry> = {
  fromJSON(object: any): ManagementGraph_NodesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ManagerNode.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ManagementGraph_NodesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ManagerNode.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagementGraph_NodesEntry>, I>>(base?: I): ManagementGraph_NodesEntry {
    return ManagementGraph_NodesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagementGraph_NodesEntry>, I>>(object: I): ManagementGraph_NodesEntry {
    const message = createBaseManagementGraph_NodesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ManagerNode.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseManagementGraph_ForwardEdgesEntry(): ManagementGraph_ForwardEdgesEntry {
  return { key: "", value: undefined };
}

export const ManagementGraph_ForwardEdgesEntry: MessageFns<ManagementGraph_ForwardEdgesEntry> = {
  fromJSON(object: any): ManagementGraph_ForwardEdgesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ManagerEdges.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ManagementGraph_ForwardEdgesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ManagerEdges.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagementGraph_ForwardEdgesEntry>, I>>(
    base?: I,
  ): ManagementGraph_ForwardEdgesEntry {
    return ManagementGraph_ForwardEdgesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagementGraph_ForwardEdgesEntry>, I>>(
    object: I,
  ): ManagementGraph_ForwardEdgesEntry {
    const message = createBaseManagementGraph_ForwardEdgesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ManagerEdges.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseManagementGraph_BackwardEdgesEntry(): ManagementGraph_BackwardEdgesEntry {
  return { key: "", value: undefined };
}

export const ManagementGraph_BackwardEdgesEntry: MessageFns<ManagementGraph_BackwardEdgesEntry> = {
  fromJSON(object: any): ManagementGraph_BackwardEdgesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ManagerEdges.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ManagementGraph_BackwardEdgesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ManagerEdges.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagementGraph_BackwardEdgesEntry>, I>>(
    base?: I,
  ): ManagementGraph_BackwardEdgesEntry {
    return ManagementGraph_BackwardEdgesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagementGraph_BackwardEdgesEntry>, I>>(
    object: I,
  ): ManagementGraph_BackwardEdgesEntry {
    const message = createBaseManagementGraph_BackwardEdgesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ManagerEdges.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseManagerNode(): ManagerNode {
  return { id: "", text: "" };
}

export const ManagerNode: MessageFns<ManagerNode> = {
  fromJSON(object: any): ManagerNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: ManagerNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerNode>, I>>(base?: I): ManagerNode {
    return ManagerNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerNode>, I>>(object: I): ManagerNode {
    const message = createBaseManagerNode();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseManagerEdges(): ManagerEdges {
  return { edges: {} };
}

export const ManagerEdges: MessageFns<ManagerEdges> = {
  fromJSON(object: any): ManagerEdges {
    return {
      edges: isObject(object.edges)
        ? Object.entries(object.edges).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ManagerEdges): unknown {
    const obj: any = {};
    if (message.edges) {
      const entries = Object.entries(message.edges);
      if (entries.length > 0) {
        obj.edges = {};
        entries.forEach(([k, v]) => {
          obj.edges[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerEdges>, I>>(base?: I): ManagerEdges {
    return ManagerEdges.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerEdges>, I>>(object: I): ManagerEdges {
    const message = createBaseManagerEdges();
    message.edges = Object.entries(object.edges ?? {}).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Boolean(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseManagerEdges_EdgesEntry(): ManagerEdges_EdgesEntry {
  return { key: "", value: false };
}

export const ManagerEdges_EdgesEntry: MessageFns<ManagerEdges_EdgesEntry> = {
  fromJSON(object: any): ManagerEdges_EdgesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: ManagerEdges_EdgesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerEdges_EdgesEntry>, I>>(base?: I): ManagerEdges_EdgesEntry {
    return ManagerEdges_EdgesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerEdges_EdgesEntry>, I>>(object: I): ManagerEdges_EdgesEntry {
    const message = createBaseManagerEdges_EdgesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
