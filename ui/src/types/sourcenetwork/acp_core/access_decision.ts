// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: sourcenetwork/acp_core/access_decision.proto

/* eslint-disable */
import { Timestamp } from "../../google/protobuf/timestamp";
import { Actor, Object } from "./relationship";

export const protobufPackage = "sourcenetwork.acp_core";

/** AccessDecision models the result of evaluating a set of AccessRequests for an Actor */
export interface AccessDecision {
  id: string;
  /** used as part of id generation */
  policyId: string;
  /** used as part of id generation */
  creator: string;
  /** used as part of id generation */
  creatorAccSequence: number;
  /** used as part of id generation */
  operations: Operation[];
  /** used as part of id generation */
  actor: string;
  /** used as part of id generation */
  params: DecisionParams | undefined;
  creationTime:
    | Date
    | undefined;
  /** issued_height stores the block height when the Decision was evaluated */
  issuedHeight: number;
}

/** DecisionParams stores auxiliary information regarding the validity of a decision */
export interface DecisionParams {
  /** number of blocks a Decision is valid for */
  decisionExpirationDelta: number;
  /** number of blocks a DecisionProof is valid for */
  proofExpirationDelta: number;
  /** number of blocks an AccessTicket is valid for */
  ticketExpirationDelta: number;
}

/** AccessRequest represents the wish to perform a set of operations by an actor */
export interface AccessRequest {
  operations: Operation[];
  /** actor requesting operations */
  actor: Actor | undefined;
}

/** Operation represents an action over an object. */
export interface Operation {
  /** target object for operation */
  object:
    | Object
    | undefined;
  /** permission required to perform operation */
  permission: string;
}

function createBaseAccessDecision(): AccessDecision {
  return {
    id: "",
    policyId: "",
    creator: "",
    creatorAccSequence: 0,
    operations: [],
    actor: "",
    params: undefined,
    creationTime: undefined,
    issuedHeight: 0,
  };
}

export const AccessDecision: MessageFns<AccessDecision> = {
  fromJSON(object: any): AccessDecision {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      creatorAccSequence: isSet(object.creatorAccSequence) ? globalThis.Number(object.creatorAccSequence) : 0,
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => Operation.fromJSON(e))
        : [],
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      params: isSet(object.params) ? DecisionParams.fromJSON(object.params) : undefined,
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      issuedHeight: isSet(object.issuedHeight) ? globalThis.Number(object.issuedHeight) : 0,
    };
  },

  toJSON(message: AccessDecision): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.creatorAccSequence !== 0) {
      obj.creatorAccSequence = Math.round(message.creatorAccSequence);
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => Operation.toJSON(e));
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.params !== undefined) {
      obj.params = DecisionParams.toJSON(message.params);
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.issuedHeight !== 0) {
      obj.issuedHeight = Math.round(message.issuedHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessDecision>, I>>(base?: I): AccessDecision {
    return AccessDecision.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessDecision>, I>>(object: I): AccessDecision {
    const message = createBaseAccessDecision();
    message.id = object.id ?? "";
    message.policyId = object.policyId ?? "";
    message.creator = object.creator ?? "";
    message.creatorAccSequence = object.creatorAccSequence ?? 0;
    message.operations = object.operations?.map((e) => Operation.fromPartial(e)) || [];
    message.actor = object.actor ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? DecisionParams.fromPartial(object.params)
      : undefined;
    message.creationTime = object.creationTime ?? undefined;
    message.issuedHeight = object.issuedHeight ?? 0;
    return message;
  },
};

function createBaseDecisionParams(): DecisionParams {
  return { decisionExpirationDelta: 0, proofExpirationDelta: 0, ticketExpirationDelta: 0 };
}

export const DecisionParams: MessageFns<DecisionParams> = {
  fromJSON(object: any): DecisionParams {
    return {
      decisionExpirationDelta: isSet(object.decisionExpirationDelta)
        ? globalThis.Number(object.decisionExpirationDelta)
        : 0,
      proofExpirationDelta: isSet(object.proofExpirationDelta) ? globalThis.Number(object.proofExpirationDelta) : 0,
      ticketExpirationDelta: isSet(object.ticketExpirationDelta) ? globalThis.Number(object.ticketExpirationDelta) : 0,
    };
  },

  toJSON(message: DecisionParams): unknown {
    const obj: any = {};
    if (message.decisionExpirationDelta !== 0) {
      obj.decisionExpirationDelta = Math.round(message.decisionExpirationDelta);
    }
    if (message.proofExpirationDelta !== 0) {
      obj.proofExpirationDelta = Math.round(message.proofExpirationDelta);
    }
    if (message.ticketExpirationDelta !== 0) {
      obj.ticketExpirationDelta = Math.round(message.ticketExpirationDelta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DecisionParams>, I>>(base?: I): DecisionParams {
    return DecisionParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DecisionParams>, I>>(object: I): DecisionParams {
    const message = createBaseDecisionParams();
    message.decisionExpirationDelta = object.decisionExpirationDelta ?? 0;
    message.proofExpirationDelta = object.proofExpirationDelta ?? 0;
    message.ticketExpirationDelta = object.ticketExpirationDelta ?? 0;
    return message;
  },
};

function createBaseAccessRequest(): AccessRequest {
  return { operations: [], actor: undefined };
}

export const AccessRequest: MessageFns<AccessRequest> = {
  fromJSON(object: any): AccessRequest {
    return {
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => Operation.fromJSON(e))
        : [],
      actor: isSet(object.actor) ? Actor.fromJSON(object.actor) : undefined,
    };
  },

  toJSON(message: AccessRequest): unknown {
    const obj: any = {};
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => Operation.toJSON(e));
    }
    if (message.actor !== undefined) {
      obj.actor = Actor.toJSON(message.actor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessRequest>, I>>(base?: I): AccessRequest {
    return AccessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessRequest>, I>>(object: I): AccessRequest {
    const message = createBaseAccessRequest();
    message.operations = object.operations?.map((e) => Operation.fromPartial(e)) || [];
    message.actor = (object.actor !== undefined && object.actor !== null) ? Actor.fromPartial(object.actor) : undefined;
    return message;
  },
};

function createBaseOperation(): Operation {
  return { object: undefined, permission: "" };
}

export const Operation: MessageFns<Operation> = {
  fromJSON(object: any): Operation {
    return {
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
      permission: isSet(object.permission) ? globalThis.String(object.permission) : "",
    };
  },

  toJSON(message: Operation): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    if (message.permission !== "") {
      obj.permission = message.permission;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Operation>, I>>(base?: I): Operation {
    return Operation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Operation>, I>>(object: I): Operation {
    const message = createBaseOperation();
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    message.permission = object.permission ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
